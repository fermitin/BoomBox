D G "__PCH__" 0 319 ""5.074""
D G "__DEVICE__" 0 319 "2422"
D G "__DATE__" 0 319 ""07-Kov-19""
D G "__TIME__" 0 319 ""22:12:53""
D G "_UNICODE" 0 319 ""?""
D G "__EVAL" 0 319 ""?"" "Standard Header file for the PIC18F24K22 device ////////////////"
c L "set_tris_a" 2 3 6 "FUNCTION"
f N "set_tris_a" 2 45 ""
v L "value" 2 45 "int8" `55 
f B "set_tris_a" 2 45 "void(int8 value)" `54 
f N "set_tris_b" 2 46 ""
v L "value" 2 46 "int8" `57 
f B "set_tris_b" 2 46 "void(int8 value)" `56 
f N "set_tris_c" 2 47 ""
v L "value" 2 47 "int8" `59 
f B "set_tris_c" 2 47 "void(int8 value)" `58 
f N "set_tris_e" 2 48 ""
v L "value" 2 48 "int8" `61 
f B "set_tris_e" 2 48 "void(int8 value)" `60 
f N "get_tris_a" 2 49 ""
f B "get_tris_a" 2 49 "int8()" `62 
f N "get_tris_b" 2 50 ""
f B "get_tris_b" 2 50 "int8()" `63 
f N "get_tris_c" 2 51 ""
f B "get_tris_c" 2 51 "int8()" `64 
f N "get_tris_e" 2 52 ""
f B "get_tris_e" 2 52 "int8()" `65 
f N "output_a" 2 53 ""
v L "value" 2 53 "int8" `67 
f B "output_a" 2 53 "void(int8 value)" `66 
f N "output_b" 2 54 ""
v L "value" 2 54 "int8" `69 
f B "output_b" 2 54 "void(int8 value)" `68 
f N "output_c" 2 55 ""
v L "value" 2 55 "int8" `71 
f B "output_c" 2 55 "void(int8 value)" `70 
f N "output_e" 2 56 ""
v L "value" 2 56 "int8" `73 
f B "output_e" 2 56 "void(int8 value)" `72 
f N "input_a" 2 57 ""
f B "input_a" 2 57 "int8()" `74 
f N "input_b" 2 58 ""
f B "input_b" 2 58 "int8()" `75 
f N "input_c" 2 59 ""
f B "input_c" 2 59 "int8()" `76 
f N "input_e" 2 60 ""
f B "input_e" 2 60 "int8()" `77 
f N "input_change_a" 2 61 ""
f B "input_change_a" 2 61 "int8()" `78 
f N "input_change_b" 2 62 ""
f B "input_change_b" 2 62 "int8()" `79 
f N "input_change_c" 2 63 ""
f B "input_change_c" 2 63 "int8()" `80 
f N "input_change_e" 2 64 ""
f B "input_change_e" 2 64 "int8()" `81 
f N "port_b_pullups" 2 65 ""
v L "upmask" 2 65 "int8" `83 
f B "port_b_pullups" 2 65 "void(int8 upmask)" `82 
f N "port_e_pullups" 2 66 ""
v L "value" 2 66 "int8" `85 
f B "port_e_pullups" 2 66 "void(int8 value)" `84 
f N "input" 2 67 ""
v L "pin" 2 67 "int16" `87 
f B "input" 2 67 "int8(int16 pin)" `86 
f N "input_state" 2 68 ""
v L "pin" 2 68 "int16" `89 
f B "input_state" 2 68 "int8(int16 pin)" `88 
f N "output_low" 2 69 ""
v L "pin" 2 69 "int16" `91 
f B "output_low" 2 69 "void(int16 pin)" `90 
f N "output_high" 2 70 ""
v L "pin" 2 70 "int16" `93 
f B "output_high" 2 70 "void(int16 pin)" `92 
f N "output_toggle" 2 71 ""
v L "pin" 2 71 "int16" `95 
f B "output_toggle" 2 71 "void(int16 pin)" `94 
f N "output_bit" 2 72 ""
v L "pin" 2 72 "int16" `97 
v L "level" 2 72 "int8" `98 
f B "output_bit" 2 72 "void(int16 pin,int8 level)" `96 
f N "output_float" 2 73 ""
v L "pin" 2 73 "int16" `100 
f B "output_float" 2 73 "void(int16 pin)" `99 
f N "output_drive" 2 74 ""
v L "pin" 2 74 "int16" `102 
f B "output_drive" 2 74 "void(int16 pin)" `101  "Constants used to identify pins in the above are:"
d G "PIN_A0" 2 78 "31744"
d G "PIN_A1" 2 79 "31745"
d G "PIN_A2" 2 80 "31746"
d G "PIN_A3" 2 81 "31747"
d G "PIN_A4" 2 82 "31748"
d G "PIN_A5" 2 83 "31749"
d G "PIN_A6" 2 84 "31750"
d G "PIN_A7" 2 85 "31751"
d G "PIN_B0" 2 87 "31752"
d G "PIN_B1" 2 88 "31753"
d G "PIN_B2" 2 89 "31754"
d G "PIN_B3" 2 90 "31755"
d G "PIN_B4" 2 91 "31756"
d G "PIN_B5" 2 92 "31757"
d G "PIN_B6" 2 93 "31758"
d G "PIN_B7" 2 94 "31759"
d G "PIN_C0" 2 96 "31760"
d G "PIN_C1" 2 97 "31761"
d G "PIN_C2" 2 98 "31762"
d G "PIN_C3" 2 99 "31763"
d G "PIN_C4" 2 100 "31764"
d G "PIN_C5" 2 101 "31765"
d G "PIN_C6" 2 102 "31766"
d G "PIN_C7" 2 103 "31767"
d G "PIN_E3" 2 105 "31779"
d G "FALSE" 2 108 "0"
d G "TRUE" 2 109 "1"
d G "BYTE" 2 111 "int8"
d G "BOOLEAN" 2 112 "int1"
d G "getc" 2 114 "getch"
d G "fgetc" 2 115 "getch"
d G "getchar" 2 116 "getch"
d G "putc" 2 117 "putchar"
d G "fputc" 2 118 "putchar"
d G "fgets" 2 119 "gets"
d G "fputs" 2 120 "puts"
c L "output_drive" 2 3 3 "FUNCTION"
f N "restart_cause" 2 125 ""
f B "restart_cause" 2 125 "int8()" `103 
f N "reset_cpu" 2 126 ""
f B "reset_cpu" 2 126 "void()" `104 
f N "sleep" 2 127 ""
f B "sleep" 2 127 "void()" `105 
f N "sleep" 2 128 ""
v L "type" 2 128 "int8" `107 
f B "sleep" 2 128 "void(int8 type)" `106  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_TIMEOUT" 2 130 "7"
d G "MCLR_FROM_SLEEP" 2 131 "11"
d G "MCLR_FROM_RUN" 2 132 "15"
d G "NORMAL_POWER_UP" 2 133 "12"
d G "BROWNOUT_RESTART" 2 134 "14"
d G "WDT_FROM_SLEEP" 2 135 "3"
d G "RESET_INSTRUCTION" 2 136 "0"
d G "SLEEP_FULL" 2 139 "0" "Default"
d G "SLEEP_IDLE" 2 140 "1" "Clock and peripherals don't stop"
c L "sleep" 2 3 5 "FUNCTION"
f N "setup_timer_0" 2 147 ""
v L "mode" 2 147 "int8" `109 
f B "setup_timer_0" 2 147 "void(int8 mode)" `108 
f N "set_timer0" 2 148 ""
v L "value" 2 148 "int16" `111 
f B "set_timer0" 2 148 "void(int16 value)" `110 
f N "get_timer0" 2 149 ""
f B "get_timer0" 2 149 "int16()" `112 
f N "setup_counters" 2 150 ""
v L "mode" 2 150 "int8" `114 
v L "prescaler" 2 150 "int8" `115 
f B "setup_counters" 2 150 "void(int8 mode,int8 prescaler)" `113 
f N "set_rtcc" 2 151 ""
v L "value" 2 151 "int16" `117 
f B "set_rtcc" 2 151 "void(int16 value)" `116 
f N "get_rtcc" 2 152 ""
f B "get_rtcc" 2 152 "int16()" `118  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 2 154 "0"
d G "T0_EXT_L_TO_H" 2 155 "32"
d G "T0_EXT_H_TO_L" 2 156 "48"
d G "T0_DIV_1" 2 158 "8"
d G "T0_DIV_2" 2 159 "0"
d G "T0_DIV_4" 2 160 "1"
d G "T0_DIV_8" 2 161 "2"
d G "T0_DIV_16" 2 162 "3"
d G "T0_DIV_32" 2 163 "4"
d G "T0_DIV_64" 2 164 "5"
d G "T0_DIV_128" 2 165 "6"
d G "T0_DIV_256" 2 166 "7"
d G "T0_OFF" 2 168 "0x80"
d G "T0_8_BIT" 2 170 "0x40"
d G "RTCC_INTERNAL" 2 174 "0"
d G "RTCC_EXT_L_TO_H" 2 175 "32"
d G "RTCC_EXT_H_TO_L" 2 176 "48"
d G "RTCC_DIV_1" 2 177 "8"
d G "RTCC_DIV_2" 2 178 "0"
d G "RTCC_DIV_4" 2 179 "1"
d G "RTCC_DIV_8" 2 180 "2"
d G "RTCC_DIV_16" 2 181 "3"
d G "RTCC_DIV_32" 2 182 "4"
d G "RTCC_DIV_64" 2 183 "5"
d G "RTCC_DIV_128" 2 184 "6"
d G "RTCC_DIV_256" 2 185 "7"
d G "RTCC_OFF" 2 186 "0x80"
d G "RTCC_8_BIT" 2 187 "0x40"
c L "get_rtcc" 2 3 8 "FUNCTION"
f N "setup_wdt" 2 198 ""
v L "mode" 2 198 "int16" `120 
f B "setup_wdt" 2 198 "void(int16 mode)" `119 
f N "restart_wdt" 2 199 ""
f B "restart_wdt" 2 199 "void()" `121  "Constants used for SETUP_WDT() are:"
d G "WDT_ON" 2 201 "0x100"
d G "WDT_OFF" 2 202 "0"
d G "WDT_4MS" 2 204 "0x300"
d G "WDT_8MS" 2 205 "0x500"
d G "WDT_16MS" 2 206 "0x700"
d G "WDT_32MS" 2 207 "0x900"
d G "WDT_64MS" 2 208 "0xB00"
d G "WDT_128MS" 2 209 "0xD00"
d G "WDT_256MS" 2 210 "0xF00"
d G "WDT_512MS" 2 211 "0x1100"
d G "WDT_1S" 2 212 "0x1300"
d G "WDT_2S" 2 213 "0x1500"
d G "WDT_4S" 2 214 "0x1700"
d G "WDT_8S" 2 215 "0x1900"
d G "WDT_16" 2 216 "0x1B00"
d G "WDT_32S" 2 217 "0x1D00"
d G "WDT_64S" 2 218 "0x1F00"
d G "WDT_128S" 2 219 "0x2100"
c L "restart_wdt" 2 3 3 "FUNCTION"
f N "setup_timer_1" 2 224 ""
v L "mode" 2 224 "int16" `123 
f B "setup_timer_1" 2 224 "void(int16 mode)" `122 
f N "get_timer1" 2 225 ""
f B "get_timer1" 2 225 "int16()" `124 
f N "set_timer1" 2 226 ""
v L "value" 2 226 "int16" `126 
f B "set_timer1" 2 226 "void(int16 value)" `125  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 2 229 "0"
d G "T1_INTERNAL" 2 230 "0x07"
d G "T1_EXTERNAL" 2 231 "0x87"
d G "T1_EXTERNAL_SYNC" 2 232 "0x83"
d G "T1_FOSC" 2 233 "0x47"
d G "T1_ENABLE_SOSC" 2 235 "0x08"
d G "T1_DIV_BY_1" 2 237 "0"
d G "T1_DIV_BY_2" 2 238 "0x10"
d G "T1_DIV_BY_4" 2 239 "0x20"
d G "T1_DIV_BY_8" 2 240 "0x30"
d G "T1_GATE" 2 242 "0x8000"
d G "T1_GATE_INVERTED" 2 243 "0xC000"
d G "T1_GATE_TOGGLE" 2 244 "0xA000"
d G "T1_GATE_SINGLE" 2 245 "0x9000"
d G "T1_GATE_TIMER2" 2 246 "0x8100"
d G "T1_GATE_COMP1" 2 247 "0x8200"
d G "T1_GATE_COMP2" 2 248 "0x8300"
c L "set_timer1" 2 3 3 "FUNCTION"
f N "setup_timer_2" 2 253 ""
v L "mode" 2 253 "int8" `128 
v L "period" 2 253 "int8" `129 
v L "postscale" 2 253 "int8" `130 
f B "setup_timer_2" 2 253 "void(int8 mode,int8 period,int8 postscale)" `127 
f N "get_timer2" 2 254 ""
f B "get_timer2" 2 254 "int8()" `131 
f N "set_timer2" 2 255 ""
v L "value" 2 255 "int8" `133 
f B "set_timer2" 2 255 "void(int8 value)" `132  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 2 257 "0"
d G "T2_DIV_BY_1" 2 258 "4"
d G "T2_DIV_BY_4" 2 259 "5"
d G "T2_DIV_BY_16" 2 260 "6"
c L "set_timer2" 2 3 3 "FUNCTION"
f N "setup_timer_3" 2 265 ""
v L "mode" 2 265 "int16" `135 
f B "setup_timer_3" 2 265 "void(int16 mode)" `134 
f N "get_timer3" 2 266 ""
f B "get_timer3" 2 266 "int16()" `136 
f N "set_timer3" 2 267 ""
v L "value" 2 267 "int16" `138 
f B "set_timer3" 2 267 "void(int16 value)" `137  "Constants used for SETUP_TIMER_3() are:"
d G "T3_DISABLED" 2 270 "0"
d G "T3_INTERNAL" 2 271 "0x07"
d G "T3_EXTERNAL" 2 272 "0x87"
d G "T3_EXTERNAL_SYNC" 2 273 "0x83"
d G "T3_FOSC" 2 274 "0x47"
d G "T3_ENABLE_SOSC" 2 276 "0x08"
d G "T3_DIV_BY_1" 2 278 "0"
d G "T3_DIV_BY_2" 2 279 "0x10"
d G "T3_DIV_BY_4" 2 280 "0x20"
d G "T3_DIV_BY_8" 2 281 "0x30"
d G "T3_GATE" 2 283 "0x8000"
d G "T3_GATE_INVERTED" 2 284 "0xC000"
d G "T3_GATE_TOGGLE" 2 285 "0xA000"
d G "T3_GATE_SINGLE" 2 286 "0x9000"
d G "T3_GATE_TIMER4" 2 287 "0x8100"
d G "T3_GATE_COMP1" 2 288 "0x8200"
d G "T3_GATE_COMP2" 2 289 "0x8300"
c L "set_timer3" 2 3 3 "FUNCTION"
f N "setup_timer_4" 2 294 ""
v L "mode" 2 294 "int16" `140 
v L "period" 2 294 "int8" `141 
v L "postscaler" 2 294 "int8" `142 
f B "setup_timer_4" 2 294 "void(int16 mode,int8 period,int8 postscaler)" `139 
f N "get_timer4" 2 295 ""
f B "get_timer4" 2 295 "int8()" `143 
f N "set_timer4" 2 296 ""
v L "value" 2 296 "int8" `145 
f B "set_timer4" 2 296 "void(int8 value)" `144  "Constants used for SETUP_TIMER_4() are:"
d G "T4_DISABLED" 2 298 "0"
d G "T4_DIV_BY_1" 2 299 "4"
d G "T4_DIV_BY_4" 2 300 "5"
d G "T4_DIV_BY_16" 2 301 "6"
c L "set_timer4" 2 3 3 "FUNCTION"
f N "setup_timer_5" 2 306 ""
v L "mode" 2 306 "int16" `147 
f B "setup_timer_5" 2 306 "void(int16 mode)" `146 
f N "get_timer5" 2 307 ""
f B "get_timer5" 2 307 "int16()" `148 
f N "set_timer5" 2 308 ""
v L "value" 2 308 "int16" `150 
f B "set_timer5" 2 308 "void(int16 value)" `149  "Constants used for SETUP_TIMER_5() are:"
d G "T5_DISABLED" 2 311 "0"
d G "T5_INTERNAL" 2 312 "0x07"
d G "T5_EXTERNAL" 2 313 "0x87"
d G "T5_EXTERNAL_SYNC" 2 314 "0x83"
d G "T5_FOSC" 2 315 "0x47"
d G "T5_LFINTRC" 2 316 "0xC7"
d G "T5_ENABLE_SOSC" 2 318 "0x08"
d G "T5_DIV_BY_1" 2 320 "0"
d G "T5_DIV_BY_2" 2 321 "0x10"
d G "T5_DIV_BY_4" 2 322 "0x20"
d G "T5_DIV_BY_8" 2 323 "0x30"
d G "T5_GATE" 2 325 "0x8000"
d G "T5_GATE_INVERTED" 2 326 "0xC000"
d G "T5_GATE_TOGGLE" 2 327 "0xA000"
d G "T5_GATE_SINGLE" 2 328 "0x9000"
d G "T5_GATE_TIMER6" 2 329 "0x8100"
d G "T5_GATE_COMP1" 2 330 "0x8200"
d G "T5_GATE_COMP2" 2 331 "0x8300"
c L "set_timer5" 2 3 3 "FUNCTION"
f N "setup_timer_6" 2 336 ""
v L "mode" 2 336 "int16" `152 
v L "period" 2 336 "int8" `153 
v L "postscaler" 2 336 "int8" `154 
f B "setup_timer_6" 2 336 "void(int16 mode,int8 period,int8 postscaler)" `151 
f N "get_timer6" 2 337 ""
f B "get_timer6" 2 337 "int8()" `155 
f N "set_timer6" 2 338 ""
v L "value" 2 338 "int8" `157 
f B "set_timer6" 2 338 "void(int8 value)" `156  "Constants used for SETUP_TIMER_6() are:"
d G "T6_DISABLED" 2 341 "0"
d G "T6_DIV_BY_1" 2 342 "4"
d G "T6_DIV_BY_4" 2 343 "5"
d G "T6_DIV_BY_16" 2 344 "6"
c L "set_timer6" 2 3 4 "FUNCTION"
f N "setup_ccp1" 2 350 ""
v L "mode" 2 350 "int32" `159 
f B "setup_ccp1" 2 350 "void(int32 mode)" `158 
f N "setup_ccp1" 2 351 ""
v L "mode" 2 351 "int32" `161 
v L "pwm" 2 351 "int8" `162 
f B "setup_ccp1" 2 351 "void(int32 mode,int8 pwm)" `160 
f N "set_pwm1_duty" 2 352 ""
v L "value" 2 352 "int16" `164 
f B "set_pwm1_duty" 2 352 "void(int16 value)" `163  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 2 354 "0"
d G "CCP_CAPTURE_FE" 2 355 "0x04"
d G "CCP_CAPTURE_RE" 2 356 "0x05"
d G "CCP_CAPTURE_DIV_4" 2 357 "0x06"
d G "CCP_CAPTURE_DIV_16" 2 358 "0x07"
d G "CCP_COMPARE_SET_ON_MATCH" 2 359 "0x08"
d G "CCP_COMPARE_CLR_ON_MATCH" 2 360 "0x09"
d G "CCP_COMPARE_INT" 2 361 "0x0A"
d G "CCP_COMPARE_INT_AND_TOGGLE" 2 362 "0x02"
d G "CCP_COMPARE_RESET_TIMER" 2 363 "0x0B"
d G "CCP_PWM" 2 364 "0x0C"
d G "CCP_PWM_PLUS_1" 2 365 "0x1c"
d G "CCP_PWM_PLUS_2" 2 366 "0x2c"
d G "CCP_PWM_PLUS_3" 2 367 "0x3c"
c L "set_pwm1_duty" 2 3 1 "FUNCTION"
d G "CCP_USE_TIMER1_AND_TIMER2" 2 376 "0x0000"
d G "CCP_USE_TIMER3_AND_TIMER4" 2 377 "0x0100"
d G "CCP_USE_TIMER5_AND_TIMER6" 2 378 "0x0200"
d G "CCP_PWM_H_H" 2 381 "0x0c"
d G "CCP_PWM_H_L" 2 382 "0x0d"
d G "CCP_PWM_L_H" 2 383 "0x0e"
d G "CCP_PWM_L_L" 2 384 "0x0f"
d G "CCP_PWM_FULL_BRIDGE" 2 386 "0x40"
d G "CCP_PWM_FULL_BRIDGE_REV" 2 387 "0xC0"
d G "CCP_PWM_HALF_BRIDGE" 2 388 "0x80"
d G "CCP_SHUTDOWN_ON_COMP1" 2 390 "0x100000"
d G "CCP_SHUTDOWN_ON_COMP2" 2 391 "0x200000"
d G "CCP_SHUTDOWN_ON_COMP" 2 392 "0x300000"
d G "CCP_SHUTDOWN_ON_INT0" 2 393 "0x400000"
d G "CCP_SHUTDOWN_ON_COMP1_INT0" 2 394 "0x500000"
d G "CCP_SHUTDOWN_ON_COMP2_INT0" 2 395 "0x600000"
d G "CCP_SHUTDOWN_ON_COMP_INT0" 2 396 "0x700000"
d G "CCP_SHUTDOWN_AC_L" 2 398 "0x000000"
d G "CCP_SHUTDOWN_AC_H" 2 399 "0x040000"
d G "CCP_SHUTDOWN_AC_F" 2 400 "0x080000"
d G "CCP_SHUTDOWN_BD_L" 2 402 "0x000000"
d G "CCP_SHUTDOWN_BD_H" 2 403 "0x010000"
d G "CCP_SHUTDOWN_BD_F" 2 404 "0x020000"
d G "CCP_SHUTDOWN_RESTART" 2 406 "0x80000000"
d G "CCP_PULSE_STEERING_A" 2 408 "0x01000000"
d G "CCP_PULSE_STEERING_B" 2 409 "0x02000000"
d G "CCP_PULSE_STEERING_C" 2 410 "0x04000000"
d G "CCP_PULSE_STEERING_D" 2 411 "0x08000000"
d G "CCP_PULSE_STEERING_SYNC" 2 412 "0x10000000"
c L "set_pwm1_duty" 2 3 1 "FUNCTION"
f N "setup_ccp2" 2 416 ""
v L "mode" 2 416 "int32" `169 
f B "setup_ccp2" 2 416 "void(int32 mode)" `168 
f N "setup_ccp2" 2 417 ""
v L "mode" 2 417 "int32" `171 
v L "pwm" 2 417 "int8" `172 
f B "setup_ccp2" 2 417 "void(int32 mode,int8 pwm)" `170 
f N "set_pwm2_duty" 2 418 ""
v L "value" 2 418 "int16" `174 
f B "set_pwm2_duty" 2 418 "void(int16 value)" `173 
c L "set_pwm2_duty" 2 3 1 "FUNCTION"
f N "setup_ccp3" 2 424 ""
v L "mode" 2 424 "int32" `179 
f B "setup_ccp3" 2 424 "void(int32 mode)" `178 
f N "setup_ccp3" 2 425 ""
v L "mode" 2 425 "int32" `181 
v L "pwm" 2 425 "int8" `182 
f B "setup_ccp3" 2 425 "void(int32 mode,int8 pwm)" `180 
f N "set_pwm3_duty" 2 426 ""
v L "value" 2 426 "int16" `184 
f B "set_pwm3_duty" 2 426 "void(int16 value)" `183 
c L "set_pwm3_duty" 2 3 1 "FUNCTION"
f N "setup_ccp4" 2 432 ""
v L "mode" 2 432 "int32" `189 
f B "setup_ccp4" 2 432 "void(int32 mode)" `188 
f N "setup_ccp4" 2 433 ""
v L "mode" 2 433 "int32" `191 
v L "pwm" 2 433 "int8" `192 
f B "setup_ccp4" 2 433 "void(int32 mode,int8 pwm)" `190 
f N "set_pwm4_duty" 2 434 ""
v L "value" 2 434 "int16" `194 
f B "set_pwm4_duty" 2 434 "void(int16 value)" `193 
c L "set_pwm4_duty" 2 3 1 "FUNCTION"
f N "setup_ccp5" 2 440 ""
v L "mode" 2 440 "int32" `199 
f B "setup_ccp5" 2 440 "void(int32 mode)" `198 
f N "setup_ccp5" 2 441 ""
v L "mode" 2 441 "int32" `201 
v L "pwm" 2 441 "int8" `202 
f B "setup_ccp5" 2 441 "void(int32 mode,int8 pwm)" `200 
f N "set_pwm5_duty" 2 442 ""
v L "value" 2 442 "int16" `204 
f B "set_pwm5_duty" 2 442 "void(int16 value)" `203 
c L "set_pwm5_duty" 2 3 3 "FUNCTION"
f N "setup_spi" 2 449 ""
v L "mode" 2 449 "int32" `209 
f B "setup_spi" 2 449 "void(int32 mode)" `208 
f N "spi_write" 2 450 ""
v L "value" 2 450 "int8" `211 
f B "spi_write" 2 450 "void(int8 value)" `210 
f N "spi_read" 2 451 ""
f B "spi_read" 2 451 "int8()" `212 
f N "spi_read" 2 452 ""
v L "value" 2 452 "int8" `214 
f B "spi_read" 2 452 "int8(int8 value)" `213 
f N "spi_data_is_in" 2 453 ""
f B "spi_data_is_in" 2 453 "int8()" `215 
f N "setup_spi2" 2 454 ""
v L "mode" 2 454 "int32" `217 
f B "setup_spi2" 2 454 "void(int32 mode)" `216 
f N "spi_write2" 2 455 ""
v L "value" 2 455 "int8" `219 
f B "spi_write2" 2 455 "void(int8 value)" `218 
f N "spi_read2" 2 456 ""
f B "spi_read2" 2 456 "int8()" `220 
f N "spi_read2" 2 457 ""
v L "value" 2 457 "int8" `222 
f B "spi_read2" 2 457 "int8(int8 value)" `221 
f N "spi_data_is_in2" 2 458 ""
f B "spi_data_is_in2" 2 458 "int8()" `223  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 2 460 "0x00"
d G "SPI_MASTER" 2 461 "0x20"
d G "SPI_SLAVE" 2 462 "0x24"
d G "SPI_SCK_IDLE_HIGH" 2 463 "0x10"
d G "SPI_SCK_IDLE_LOW" 2 464 "0x00"
d G "SPI_CLK_DIV_4" 2 465 "0x00"
d G "SPI_CLK_DIV_16" 2 466 "0x01"
d G "SPI_CLK_DIV_64" 2 467 "0x02"
d G "SPI_CLK_T2" 2 468 "0x03"
d G "SPI_SS_DISABLED" 2 469 "0x01"
d G "SPI_XMIT_L_TO_H" 2 471 "0x4000"
d G "SPI_XMIT_H_TO_L" 2 472 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 2 474 "0x0000"
d G "SPI_SAMPLE_AT_END" 2 475 "0x8000"
d G "SPI_L_TO_H" 2 478 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 2 479 "SPI_SCK_IDLE_HIGH"
c L "spi_data_is_in2" 2 3 2 "FUNCTION"
f N "setup_uart" 2 483 ""
v L "baud" 2 483 "int32" `225 
f B "setup_uart" 2 483 "void(int32 baud)" `224 
f N "setup_uart" 2 484 ""
v L "baud" 2 484 "int32" `227 
v L "stream" 2 484 "int8" `228 
f B "setup_uart" 2 484 "void(int32 baud,int8 stream)" `226 
f N "setup_uart" 2 485 ""
v L "baud" 2 485 "int32" `230 
v L "stream" 2 485 "int8" `231 
v L "clock" 2 485 "int32" `232 
f B "setup_uart" 2 485 "void(int32 baud,int8 stream,int32 clock)" `229 
f N "set_uart_speed" 2 486 ""
v L "baud" 2 486 "int32" `234 
f B "set_uart_speed" 2 486 "void(int32 baud)" `233 
f N "set_uart_speed" 2 487 ""
v L "baud" 2 487 "int32" `236 
v L "stream" 2 487 "int8" `237 
f B "set_uart_speed" 2 487 "void(int32 baud,int8 stream)" `235 
f N "set_uart_speed" 2 488 ""
v L "baud" 2 488 "int32" `239 
v L "stream" 2 488 "int8" `240 
v L "clock" 2 488 "int32" `241 
f B "set_uart_speed" 2 488 "void(int32 baud,int8 stream,int32 clock)" `238  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 2 492 "2"
d G "UART_DATA" 2 493 "4"
d G "UART_AUTODETECT" 2 494 "8"
d G "UART_AUTODETECT_NOWAIT" 2 495 "9"
d G "UART_WAKEUP_ON_RDA" 2 496 "10"
d G "UART_SEND_BREAK" 2 497 "13"
c L "set_uart_speed" 2 3 3 "FUNCTION"
f N "setup_comparator" 2 501 ""
v L "mode" 2 501 "int32" `243 
f B "setup_comparator" 2 501 "void(int32 mode)" `242  "Constants used in setup_comparator() are:"
d G "NC_NC_NC_NC" 2 504 "0x404"
d G "NC_NC" 2 505 "0x404"
d G "CP1_A0_A3" 2 508 "0x000080"
d G "CP1_A1_A3" 2 509 "0x000081"
d G "CP1_B3_A3" 2 510 "0x000082"
d G "CP1_B1_A3" 2 511 "0x000083"
d G "CP1_A0_DAC" 2 512 "0x000084"
d G "CP1_A1_DAC" 2 513 "0x000085"
d G "CP1_B3_DAC" 2 514 "0x000086"
d G "CP1_B1_DAC" 2 515 "0x000087"
d G "CP1_A0_FVR" 2 516 "0x200084"
d G "CP1_A1_FVR" 2 517 "0x200085"
d G "CP1_B3_FVR" 2 518 "0x200086"
d G "CP1_B1_FVR" 2 519 "0x200087"
d G "CP1_OUT_ON_A4" 2 521 "0x000020"
d G "CP1_INVERT" 2 522 "0x000010"
d G "CP1_FAST" 2 523 "0x000008"
d G "CP1_HYST" 2 524 "0x080000"
d G "CP1_SYNC" 2 525 "0x020000"
d G "CP2_A0_A2" 2 528 "0x008000"
d G "CP2_A1_A2" 2 529 "0x008100"
d G "CP2_B3_A2" 2 530 "0x008200"
d G "CP2_B1_A2" 2 531 "0x008300"
d G "CP2_A0_DAC" 2 532 "0x008400"
d G "CP2_A1_DAC" 2 533 "0x008500"
d G "CP2_B3_DAC" 2 534 "0x008600"
d G "CP2_B1_DAC" 2 535 "0x008700"
d G "CP2_A0_FVR" 2 536 "0x108400"
d G "CP2_A1_FVR" 2 537 "0x108500"
d G "CP2_B3_FVR" 2 538 "0x108600"
d G "CP2_B1_FVR" 2 539 "0x108700"
d G "CP2_OUT_ON_A5" 2 541 "0x002000"
d G "CP2_INVERT" 2 542 "0x001000"
d G "CP2_FAST" 2 543 "0x000800"
d G "CP2_HYST" 2 544 "0x040000"
d G "CP2_SYNC" 2 545 "0x010000"
c L "setup_comparator" 2 3 2 "FUNCTION"
f N "setup_vref" 2 552 ""
v L "mode" 2 552 "int8" `247 
f B "setup_vref" 2 552 "void(int8 mode)" `246  "Constants used in setup_vref() are:"
d G "VREF_OFF" 2 554 "0"
d G "VREF_1v024" 2 555 "0x90"
d G "VREF_2v048" 2 556 "0xA0"
d G "VREF_4v096" 2 557 "0xB0"
c L "setup_vref" 2 3 2 "FUNCTION"
f N "setup_low_volt_detect" 2 561 ""
v L "mode" 2 561 "int8" `249 
f B "setup_low_volt_detect" 2 561 "void(int8 mode)" `248  "Constants used in setup_low_volt_detect() are:"
d G "LVD_LVDIN" 2 563 "0x1F"
d G "LVD_47" 2 564 "0x1E"
d G "LVD_43" 2 565 "0x1D"
d G "LVD_41" 2 566 "0x1C"
d G "LVD_38" 2 567 "0x1B"
d G "LVD_36" 2 568 "0x1A"
d G "LVD_34" 2 569 "0x19"
d G "LVD_32" 2 570 "0x18"
d G "LVD_29" 2 571 "0x17"
d G "LVD_28" 2 572 "0x16"
d G "LVD_27" 2 573 "0x15"
d G "LVD_25" 2 574 "0x14"
d G "LVD_24" 2 575 "0x13"
d G "LVD_22" 2 576 "0x12"
d G "LVD_20" 2 577 "0x11"
d G "LVD_18" 2 578 "0x10"
d G "LVD_TRIGGER_BELOW" 2 580 "0"
d G "LVD_TRIGGER_ABOVE" 2 581 "0x80"
c L "setup_low_volt_detect" 2 3 3 "FUNCTION"
f N "setup_dac" 2 586 ""
v L "mode" 2 586 "int8" `251 
f B "setup_dac" 2 586 "void(int8 mode)" `250 
f N "dac_write" 2 587 ""
v L "value" 2 587 "int8" `253 
f B "dac_write" 2 587 "void(int8 value)" `252  "Constants used in SETUP_DAC() are:"
d G "DAC_OFF" 2 589 "0"
d G "DAC_VSS_VDD" 2 590 "0x80"
d G "DAC_VREF_VDD" 2 591 "0x81"
d G "DAC_VSS_VREF" 2 592 "0x84"
d G "DAC_VREF_VREF" 2 593 "0x85"
d G "DAC_VSS_FVR" 2 594 "0x88"
d G "DAC_VREF_FVR" 2 595 "0x89"
d G "DAC_OUTPUT" 2 597 "0x20"
d G "DAC_LVP_POS" 2 598 "0x40"
d G "DAC_LVP_NEG" 2 599 "0"
c L "dac_write" 2 3 2 "FUNCTION"
f N "setup_oscillator" 2 604 ""
v L "mode" 2 604 "int16" `255 
f B "setup_oscillator" 2 604 "int8(int16 mode)" `254 
f N "setup_oscillator" 2 605 ""
v L "mode" 2 605 "int16" `257 
v L "tune" 2 605 "sint8" `258 
f B "setup_oscillator" 2 605 "int8(int16 mode,sint8 tune)" `256  "Constants used in setup_oscillator() are:"
d G "OSC_PLL_ON" 2 607 "0x4000"
d G "OSC_PLL_OFF" 2 608 "0"
d G "OSC_31250" 2 609 "0x8000"
d G "OSC_31KHZ" 2 610 "0x00"
d G "OSC_250KHZ" 2 611 "0x10"
d G "OSC_500KHZ" 2 612 "0x20"
d G "OSC_1MHZ" 2 613 "0x30"
d G "OSC_2MHZ" 2 614 "0x40"
d G "OSC_4MHZ" 2 615 "0x50"
d G "OSC_8MHZ" 2 616 "0x60"
d G "OSC_16MHZ" 2 617 "0x70"
d G "OSC_32MHZ" 2 618 "0x4060"
d G "OSC_64MHZ" 2 619 "0x4070"
d G "OSC_TIMER1" 2 621 "1"
d G "OSC_INTRC" 2 622 "2"
d G "OSC_NORMAL" 2 623 "0"
d G "OSC_IDLE_MODE" 2 625 "0x80"
d G "OSC_STATE_STABLE" 2 629 "4"
d G "OSC_STATE_EXT_RUNNING" 2 630 "8"
c L "setup_oscillator" 2 3 4 "FUNCTION"
f N "setup_adc" 2 637 ""
v L "mode" 2 637 "int16" `260 
f B "setup_adc" 2 637 "void(int16 mode)" `259 
f N "read_adc" 2 638 ""
f B "read_adc" 2 638 "int8()" `261 
f N "read_adc" 2 639 ""
v L "mode" 2 639 "int8" `263 
f B "read_adc" 2 639 "int8(int8 mode)" `262 
f N "read_adc" 2 640 ""
f G "read_adc" 2 640 "int16()" `264 
f N "read_adc" 2 641 ""
v L "mode" 2 641 "int8" `265 
f G "read_adc" 2 641 "int16(int8 mode,int32 pins)" `264 
f N "adc_done" 2 642 ""
f B "adc_done" 2 642 "int8(int8 mode,int32 pins)" `264  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 2 644 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 2 645 "0x100"
d G "ADC_CLOCK_DIV_4" 2 646 "0x04"
d G "ADC_CLOCK_DIV_8" 2 647 "0x01"
d G "ADC_CLOCK_DIV_16" 2 648 "0x05"
d G "ADC_CLOCK_DIV_32" 2 649 "0x02"
d G "ADC_CLOCK_DIV_64" 2 650 "0x06"
d G "ADC_CLOCK_INTERNAL" 2 651 "0x07" "Internal 2-6us"
d G "ADC_TAD_MUL_0" 2 653 "0x00"
d G "ADC_TAD_MUL_2" 2 654 "0x08"
d G "ADC_TAD_MUL_4" 2 655 "0x10"
d G "ADC_TAD_MUL_6" 2 656 "0x18"
d G "ADC_TAD_MUL_8" 2 657 "0x20"
d G "ADC_TAD_MUL_12" 2 658 "0x28"
d G "ADC_TAD_MUL_16" 2 659 "0x30"
d G "ADC_TAD_MUL_20" 2 660 "0x38"
c L "adc_done" 2 3 1 "FUNCTION"
f N "setup_adc_ports" 2 663 ""
v L "pins" 2 663 "int32" `266 
f B "setup_adc_ports" 2 663 "void(int32 pins)" `265 
f N "setup_adc_ports" 2 664 ""
v L "pins" 2 664 "int32" `268 
v L "reference" 2 664 "int32" `269 
f B "setup_adc_ports" 2 664 "void(int32 pins,int32 reference)" `267 
f N "set_analog_pins" 2 665 ""
v L "pin" 2 665 "int8" `271 
f B "set_analog_pins" 2 665 "void(int8 pin,*int8 _VA_LIST)" `270 
f N "setup_adc_reference" 2 666 ""
v L "reference" 2 666 "int32" `274 
f B "setup_adc_reference" 2 666 "void(int32 reference)" `273 
f N "set_adc_channel" 2 667 ""
v L "channel" 2 667 "int8" `276 
f B "set_adc_channel" 2 667 "void(int8 channel)" `275  "Constants used in SETUP_ADC_PORTS() are:"
d G "sAN0" 2 671 "0x00800000" "| A0"
d G "sAN1" 2 672 "0x01000000" "| A1"
d G "sAN2" 2 673 "0x02000000" "| A2"
d G "sAN3" 2 674 "0x04000000" "| A3"
d G "sAN4" 2 675 "0x08000000" "| A5"
d G "sAN8" 2 676 "0x00010000" "| B2"
d G "sAN9" 2 677 "0x00020000" "| B3"
d G "sAN10" 2 678 "0x00008000" "| B1"
d G "sAN11" 2 679 "0x00040000" "| B4"
d G "sAN12" 2 680 "0x00004000" "| B0"
d G "sAN13" 2 681 "0x00080000" "| B5"
d G "sAN14" 2 682 "0x00000100" "| C2"
d G "sAN15" 2 683 "0x00000200" "| C3"
d G "sAN16" 2 684 "0x00000400" "| C4"
d G "sAN17" 2 685 "0x00000800" "| C5"
d G "sAN18" 2 686 "0x00001000" "| C6"
d G "sAN19" 2 687 "0x00002000" "| C7"
d G "NO_ANALOGS" 2 688 "0" "None"
d G "ALL_ANALOG" 2 689 "0x0F8FFF00" "A0 A1 A2 A3 A5 B2 B3 B1 B4 B0 B5 C2 C3 C4 C5 C6 C7"
d G "VSS_VDD" 2 692 "0x00000000" "| Range 0-Vdd"
d G "VSS_VREF" 2 693 "0x40000000" "| Range 0-VrefH"
d G "VSS_FVR" 2 694 "0x80000000" "| Range 0-Fvr BUF2"
d G "VREF_VDD" 2 695 "0x10000000" "| Range VrefL-Vdd"
d G "VREF_VREF" 2 696 "0x50000000" "| Range VrefL-VrefH"
d G "VREF_FVR" 2 697 "0x90000000" "| Range VrefL-Fvr BUF2"
d G "CTMU_CHANNEL" 2 701 "0x1D"
d G "DAC_CHANNEL" 2 702 "0x1E"
d G "FVR_CHANNEL" 2 703 "0x1F"
d G "ADC_START_AND_READ" 2 706 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 2 707 "1"
d G "ADC_READ_ONLY" 2 708 "6"
c L "set_adc_channel" 2 3 3 "FUNCTION"
f N "abs" 2 714 ""
v L "x" 2 714 "sint8" `278 
f B "abs" 2 714 "sint8(sint8 x)" `277 
f N "abs" 2 715 ""
v L "x" 2 715 "sint16" `280 
f B "abs" 2 715 "sint16(sint16 x)" `279 
f N "abs" 2 716 ""
v L "x" 2 716 "sint32" `282 
f B "abs" 2 716 "sint32(sint32 x)" `281 
f N "abs" 2 717 ""
v L "x" 2 717 "float" `284 
f B "abs" 2 717 "float(float x)" `283 
f N "_mul" 2 718 ""
v L "??65535" 2 718 "int8" `286 
v L "??65535" 2 718 "int8" `287 
f B "_mul" 2 718 "int16(int8 ,int8 )" `285 
f N "_mul" 2 719 ""
v L "??65535" 2 719 "sint8" `289 
v L "??65535" 2 719 "sint8" `290 
f B "_mul" 2 719 "sint16(sint8 ,sint8 )" `288 
f N "_mul" 2 720 ""
v L "??65535" 2 720 "int16" `292 
v L "??65535" 2 720 "int16" `293 
f B "_mul" 2 720 "int32(int16 ,int16 )" `291 
f N "_mul" 2 721 ""
v L "??65535" 2 721 "sint16" `295 
v L "??65535" 2 721 "sint16" `296 
f B "_mul" 2 721 "sint32(sint16 ,sint16 )" `294  "Memory Manipulation Prototypes:"
f N "read_bank" 2 724 ""
v L "bank" 2 724 "int8" `298 
v L "offset" 2 724 "int8" `299 
f B "read_bank" 2 724 "int8(int8 bank,int8 offset)" `297 
f N "write_bank" 2 725 ""
v L "bank" 2 725 "int8" `301 
v L "offset" 2 725 "int8" `302 
v L "value" 2 725 "int8" `303 
f B "write_bank" 2 725 "void(int8 bank,int8 offset,int8 value)" `300 
f N "strcpy" 2 726 ""
v L "dest" 2 726 "*int8" `305 
v L "src" 2 726 "*int8" `306 
f B "strcpy" 2 726 "void(*int8 dest,*int8 src)" `304 
f N "memset" 2 727 ""
v L "destination" 2 727 "*int8" `308 
v L "value" 2 727 "int8" `309 
v L "num" 2 727 "int16" `310 
f B "memset" 2 727 "void(*int8 destination,int8 value,int16 num)" `307 
f N "memcpy" 2 728 ""
v L "destination" 2 728 "*int8" `312 
v L "source" 2 728 "*int8" `313 
v L "num" 2 728 "int16" `314 
f B "memcpy" 2 728 "void(*int8 destination,*int8 source,int16 num)" `311  "String Prototypes:"
f N "toupper" 2 731 ""
v L "cvalue" 2 731 "int8" `316 
f B "toupper" 2 731 "int8(int8 cvalue)" `315 
f N "tolower" 2 732 ""
v L "cvalue" 2 732 "int8" `318 
f B "tolower" 2 732 "int8(int8 cvalue)" `317 
f N "sprintf" 2 733 ""
v L "string" 2 733 "*int8" `320 
v L "cstring" 2 733 "*int8" `321 
f B "sprintf" 2 733 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `319  "Data Manipulators Prototypes:"
f N "shift_left" 2 736 ""
v L "address" 2 736 "*int8" `324 
v L "bytes" 2 736 "int8" `325 
v L "value" 2 736 "int8" `326 
f B "shift_left" 2 736 "int8(*int8 address,int8 bytes,int8 value)" `323 
f N "shift_right" 2 737 ""
v L "address" 2 737 "*int8" `328 
v L "bytes" 2 737 "int8" `329 
v L "value" 2 737 "int8" `330 
f B "shift_right" 2 737 "int8(*int8 address,int8 bytes,int8 value)" `327 
f N "rotate_left" 2 738 ""
v L "address" 2 738 "*int8" `332 
v L "bytes" 2 738 "int8" `333 
f B "rotate_left" 2 738 "void(*int8 address,int8 bytes)" `331 
f N "rotate_right" 2 739 ""
v L "address" 2 739 "*int8" `335 
v L "bytes" 2 739 "int8" `336 
f B "rotate_right" 2 739 "void(*int8 address,int8 bytes)" `334 
f N "swap" 2 740 ""
v L "value" 2 740 "int8" `338 
f B "swap" 2 740 "void(int8 value)" `337 
f N "make8" 2 741 ""
v L "var" 2 741 "int16" `340 
v L "offset" 2 741 "int8" `341 
f B "make8" 2 741 "int8(int16 var,int8 offset)" `339 
f N "make8" 2 742 ""
v L "var" 2 742 "int32" `343 
v L "offset" 2 742 "int8" `344 
f B "make8" 2 742 "int8(int32 var,int8 offset)" `342 
f N "make16" 2 743 ""
v L "varhigh" 2 743 "int8" `346 
v L "varlow" 2 743 "int8" `347 
f B "make16" 2 743 "int16(int8 varhigh,int8 varlow)" `345 
f N "make32" 2 744 ""
v L "var1" 2 744 "int16" `349 
f B "make32" 2 744 "int32(int16 var1)" `348 
f N "make32" 2 745 ""
v L "var1" 2 745 "int16" `351 
v L "var2" 2 745 "int16" `352 
f B "make32" 2 745 "int32(int16 var1,int16 var2)" `350 
f N "make32" 2 746 ""
v L "var1" 2 746 "int16" `354 
v L "var2" 2 746 "int8" `355 
f B "make32" 2 746 "int32(int16 var1,int8 var2)" `353 
f N "make32" 2 747 ""
v L "var1" 2 747 "int16" `357 
v L "var2" 2 747 "int8" `358 
v L "var3" 2 747 "int8" `359 
f B "make32" 2 747 "int32(int16 var1,int8 var2,int8 var3)" `356 
f N "make32" 2 748 ""
v L "var1" 2 748 "int8" `361 
f B "make32" 2 748 "int32(int8 var1)" `360 
f N "make32" 2 749 ""
v L "var1" 2 749 "int8" `363 
v L "var2" 2 749 "int8" `364 
f B "make32" 2 749 "int32(int8 var1,int8 var2)" `362 
f N "make32" 2 750 ""
v L "var1" 2 750 "int8" `366 
v L "var2" 2 750 "int8" `367 
v L "var3" 2 750 "int8" `368 
f B "make32" 2 750 "int32(int8 var1,int8 var2,int8 var3)" `365 
f N "make32" 2 751 ""
v L "var1" 2 751 "int8" `370 
v L "var2" 2 751 "int8" `371 
v L "var3" 2 751 "int8" `372 
v L "var4" 2 751 "int8" `373 
f B "make32" 2 751 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `369 
f N "make32" 2 752 ""
v L "var1" 2 752 "int8" `375 
v L "var2" 2 752 "int16" `376 
f B "make32" 2 752 "int32(int8 var1,int16 var2)" `374 
f N "make32" 2 753 ""
v L "var1" 2 753 "int8" `378 
v L "var2" 2 753 "int16" `379 
v L "var3" 2 753 "int8" `380 
f B "make32" 2 753 "int32(int8 var1,int16 var2,int8 var3)" `377 
f N "make32" 2 754 ""
v L "var1" 2 754 "int8" `382 
v L "var2" 2 754 "int8" `383 
v L "var3" 2 754 "int16" `384 
f B "make32" 2 754 "int32(int8 var1,int8 var2,int16 var3)" `381 
f N "bit_set" 2 755 ""
v L "var" 2 755 "int8" `386 
v L "bit" 2 755 "int8" `387 
f B "bit_set" 2 755 "void(int8 var,int8 bit)" `385 
f N "bit_set" 2 756 ""
v L "var" 2 756 "int16" `389 
v L "bit" 2 756 "int8" `390 
f B "bit_set" 2 756 "void(int16 var,int8 bit)" `388 
f N "bit_set" 2 757 ""
v L "var" 2 757 "int32" `392 
v L "bit" 2 757 "int8" `393 
f B "bit_set" 2 757 "void(int32 var,int8 bit)" `391 
f N "bit_clear" 2 758 ""
v L "var" 2 758 "int8" `395 
v L "bit" 2 758 "int8" `396 
f B "bit_clear" 2 758 "void(int8 var,int8 bit)" `394 
f N "bit_clear" 2 759 ""
v L "var" 2 759 "int16" `398 
v L "bit" 2 759 "int8" `399 
f B "bit_clear" 2 759 "void(int16 var,int8 bit)" `397 
f N "bit_clear" 2 760 ""
v L "var" 2 760 "int32" `401 
v L "bit" 2 760 "int8" `402 
f B "bit_clear" 2 760 "void(int32 var,int8 bit)" `400 
f N "bit_test" 2 761 ""
v L "var" 2 761 "int8" `404 
v L "bit" 2 761 "int8" `405 
f B "bit_test" 2 761 "int8(int8 var,int8 bit)" `403 
f N "bit_test" 2 762 ""
v L "var" 2 762 "int16" `407 
v L "bit" 2 762 "int8" `408 
f B "bit_test" 2 762 "int8(int16 var,int8 bit)" `406 
f N "bit_test" 2 763 ""
v L "var" 2 763 "int32" `410 
v L "bit" 2 763 "int8" `411 
f B "bit_test" 2 763 "int8(int32 var,int8 bit)" `409  "#use delay() Prototypes:"
f N "delay_cycles" 2 766 ""
v L "count" 2 766 "int8" `413 
f B "delay_cycles" 2 766 "void(int8 count)" `412 
f N "delay_ms" 2 767 ""
v L "time" 2 767 "int16" `415 
f B "delay_ms" 2 767 "void(int16 time)" `414 
f N "delay_us" 2 768 ""
v L "time" 2 768 "int16" `417 
f B "delay_us" 2 768 "void(int16 time)" `416  "#use rs232() Prototypes:"
f N "putchar" 2 771 ""
v L "cdata" 2 771 "int8" `419 
f B "putchar" 2 771 "void(int8 cdata)" `418 
f N "putchar" 2 772 ""
v L "cdata" 2 772 "int8" `421 
v L "stream" 2 772 "int8" `422 
f B "putchar" 2 772 "void(int8 cdata,int8 stream)" `420 
f N "puts" 2 773 ""
v L "string" 2 773 "*int8" `424 
f B "puts" 2 773 "void(*int8 string)" `423 
f N "puts" 2 774 ""
v L "string" 2 774 "*int8" `426 
v L "stream" 2 774 "int8" `427 
f B "puts" 2 774 "void(*int8 string,int8 stream)" `425 
f N "getch" 2 775 ""
f B "getch" 2 775 "int8()" `428 
f N "getch" 2 776 ""
v L "stream" 2 776 "int8" `430 
f B "getch" 2 776 "int8(int8 stream)" `429 
f N "gets" 2 777 ""
v L "string" 2 777 "*int8" `432 
f B "gets" 2 777 "void(*int8 string)" `431 
f N "gets" 2 778 ""
v L "string" 2 778 "*int8" `434 
v L "stream" 2 778 "int8" `435 
f B "gets" 2 778 "void(*int8 string,int8 stream)" `433 
f N "kbhit" 2 779 ""
f B "kbhit" 2 779 "int8()" `436 
f N "kbhit" 2 780 ""
v L "stream" 2 780 "int8" `438 
f B "kbhit" 2 780 "int8(int8 stream)" `437 
f N "printf" 2 781 ""
v L "string" 2 781 "*int8" `440 
f B "printf" 2 781 "void(*int8 string,*int8 _VA_LIST)" `439 
f N "fprintf" 2 782 ""
v L "stream" 2 782 "int8" `443 
v L "string" 2 782 "*int8" `444 
f B "fprintf" 2 782 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `442 
f N "putc_send" 2 783 ""
f B "putc_send" 2 783 "void()" `446 
f N "fputc_send" 2 784 ""
v L "stream" 2 784 "int8" `448 
f B "fputc_send" 2 784 "void(int8 stream)" `447 
f N "rcv_buffer_full" 2 785 ""
f B "rcv_buffer_full" 2 785 "int8()" `449 
f N "rcv_buffer_full" 2 786 ""
v L "stream" 2 786 "int8" `451 
f B "rcv_buffer_full" 2 786 "int8(int8 stream)" `450 
f N "rcv_buffer_bytes" 2 787 ""
f B "rcv_buffer_bytes" 2 787 "int16()" `452 
f N "rcv_buffer_bytes" 2 788 ""
v L "stream" 2 788 "int8" `454 
f B "rcv_buffer_bytes" 2 788 "int16(int8 stream)" `453 
f N "tx_buffer_full" 2 789 ""
f B "tx_buffer_full" 2 789 "int8()" `455 
f N "tx_buffer_full" 2 790 ""
v L "stream" 2 790 "int8" `457 
f B "tx_buffer_full" 2 790 "int8(int8 stream)" `456 
f N "tx_buffer_bytes" 2 791 ""
f B "tx_buffer_bytes" 2 791 "int16()" `458 
f N "tx_buffer_bytes" 2 792 ""
v L "stream" 2 792 "int8" `460 
f B "tx_buffer_bytes" 2 792 "int16(int8 stream)" `459  "#use i2c() Prototypes:"
f N "i2c_read" 2 795 ""
f B "i2c_read" 2 795 "int8()" `461 
f N "i2c_read" 2 796 ""
v L "ack" 2 796 "int8" `463 
f B "i2c_read" 2 796 "int8(int8 ack)" `462 
f N "i2c_read" 2 797 ""
v L "stream" 2 797 "int8" `465 
v L "ack" 2 797 "int8" `466 
f B "i2c_read" 2 797 "int8(int8 stream,int8 ack)" `464 
f N "i2c_write" 2 798 ""
v L "data" 2 798 "int8" `468 
f B "i2c_write" 2 798 "int8(int8 data)" `467 
f N "i2c_write" 2 799 ""
v L "stream" 2 799 "int8" `470 
v L "data" 2 799 "int8" `471 
f B "i2c_write" 2 799 "int8(int8 stream,int8 data)" `469 
f N "i2c_start" 2 800 ""
f B "i2c_start" 2 800 "void()" `472 
f N "i2c_start" 2 801 ""
v L "stream" 2 801 "int8" `474 
f B "i2c_start" 2 801 "void(int8 stream)" `473 
f N "i2c_start" 2 802 ""
v L "stream" 2 802 "int8" `476 
v L "restart" 2 802 "int8" `477 
f B "i2c_start" 2 802 "void(int8 stream,int8 restart)" `475 
f N "i2c_stop" 2 803 ""
f B "i2c_stop" 2 803 "void()" `478 
f N "i2c_stop" 2 804 ""
v L "stream" 2 804 "int8" `480 
f B "i2c_stop" 2 804 "void(int8 stream)" `479 
f N "i2c_isr_state" 2 805 ""
f B "i2c_isr_state" 2 805 "int8()" `481 
f N "i2c_slaveaddr" 2 806 ""
v L "addr" 2 806 "int8" `483 
f B "i2c_slaveaddr" 2 806 "void(int8 addr)" `482 
f N "i2c_slaveaddr" 2 807 ""
v L "stream" 2 807 "int8" `485 
v L "addr" 2 807 "int8" `486 
f B "i2c_slaveaddr" 2 807 "void(int8 stream,int8 addr)" `484 
f N "i2c_poll" 2 808 ""
f B "i2c_poll" 2 808 "int8()" `487 
f N "i2c_poll" 2 809 ""
v L "stream" 2 809 "int8" `489 
f B "i2c_poll" 2 809 "int8(int8 stream)" `488 
f N "i2c_init" 2 810 ""
v L "baud" 2 810 "int32" `491 
f B "i2c_init" 2 810 "void(int32 baud)" `490 
f N "i2c_init" 2 811 ""
v L "stream" 2 811 "int8" `493 
v L "baud" 2 811 "int32" `494 
f B "i2c_init" 2 811 "void(int8 stream,int32 baud)" `492  "#use spi() Prototypes:"
f N "spi_xfer" 2 814 ""
f B "spi_xfer" 2 814 "int8()" `495 
f N "spi_xfer" 2 815 ""
f G "spi_xfer" 2 815 "int16(int8 data)" `496 
f N "spi_xfer" 2 816 ""
f G "spi_xfer" 2 816 "int32(int8 data)" `496 
f N "spi_xfer" 2 817 ""
v L "data" 2 817 "int8" `497 
f B "spi_xfer" 2 817 "int8(int8 data)" `496 
f N "spi_xfer" 2 818 ""
v L "data" 2 818 "int16" `499 
f B "spi_xfer" 2 818 "int16(int16 data)" `498 
f N "spi_xfer" 2 819 ""
v L "data" 2 819 "int32" `501 
f B "spi_xfer" 2 819 "int32(int32 data)" `500 
f N "spi_xfer" 2 820 ""
v L "stream" 2 820 "int8" `503 
v L "data" 2 820 "int8" `504 
f B "spi_xfer" 2 820 "int8(int8 stream,int8 data)" `502 
f N "spi_xfer" 2 821 ""
v L "stream" 2 821 "int8" `506 
v L "data" 2 821 "int16" `507 
f B "spi_xfer" 2 821 "int16(int8 stream,int16 data)" `505 
f N "spi_xfer" 2 822 ""
v L "stream" 2 822 "int8" `509 
v L "data" 2 822 "int32" `510 
f B "spi_xfer" 2 822 "int32(int8 stream,int32 data)" `508 
f N "spi_xfer" 2 823 ""
v L "stream" 2 823 "int8" `512 
v L "data" 2 823 "int8" `513 
v L "bits" 2 823 "int8" `514 
f B "spi_xfer" 2 823 "int8(int8 stream,int8 data,int8 bits)" `511 
f N "spi_xfer" 2 824 ""
v L "stream" 2 824 "int8" `516 
v L "data" 2 824 "int16" `517 
v L "bits" 2 824 "int8" `518 
f B "spi_xfer" 2 824 "int16(int8 stream,int16 data,int8 bits)" `515 
f N "spi_xfer" 2 825 ""
v L "stream" 2 825 "int8" `520 
v L "data" 2 825 "int32" `521 
v L "bits" 2 825 "int8" `522 
f B "spi_xfer" 2 825 "int32(int8 stream,int32 data,int8 bits)" `519 
f N "spi_init" 2 826 ""
v L "baud" 2 826 "int32" `524 
f B "spi_init" 2 826 "void(int32 baud)" `523 
f N "spi_init" 2 827 ""
v L "stream" 2 827 "int8" `526 
v L "baud" 2 827 "int32" `527 
f B "spi_init" 2 827 "void(int8 stream,int32 baud)" `525 
f N "spi_speed" 2 828 ""
v L "baud" 2 828 "int32" `529 
f B "spi_speed" 2 828 "void(int32 baud)" `528 
f N "spi_speed" 2 829 ""
v L "stream" 2 829 "int8" `531 
v L "baud" 2 829 "int32" `532 
f B "spi_speed" 2 829 "void(int8 stream,int32 baud)" `530 
f N "spi_speed" 2 830 ""
v L "stream" 2 830 "int8" `534 
v L "baud" 2 830 "int32" `535 
v L "clock" 2 830 "int32" `536 
f B "spi_speed" 2 830 "void(int8 stream,int32 baud,int32 clock)" `533 
f N "spi_prewrite" 2 831 ""
v L "data" 2 831 "int8" `538 
f B "spi_prewrite" 2 831 "void(int8 data)" `537 
f N "spi_prewrite" 2 832 ""
v L "data" 2 832 "int16" `540 
f B "spi_prewrite" 2 832 "void(int16 data)" `539 
f N "spi_prewrite" 2 833 ""
v L "data" 2 833 "int32" `542 
f B "spi_prewrite" 2 833 "void(int32 data)" `541 
f N "spi_prewrite" 2 834 ""
v L "??65535" 2 834 "int8" `544 
v L "data" 2 834 "int8" `545 
f B "spi_prewrite" 2 834 "void(int8 ,int8 data)" `543 
f N "spi_prewrite" 2 835 ""
v L "??65535" 2 835 "int8" `547 
v L "data" 2 835 "int16" `548 
f B "spi_prewrite" 2 835 "void(int8 ,int16 data)" `546 
f N "spi_prewrite" 2 836 ""
v L "??65535" 2 836 "int8" `550 
v L "data" 2 836 "int32" `551 
f B "spi_prewrite" 2 836 "void(int8 ,int32 data)" `549 
f N "spi_xfer_in" 2 837 ""
f B "spi_xfer_in" 2 837 "int8()" `552 
f N "spi_xfer_in" 2 838 ""
f G "spi_xfer_in" 2 838 "int16(int8 bits)" `553 
f N "spi_xfer_in" 2 839 ""
f G "spi_xfer_in" 2 839 "int32(int8 bits)" `553 
f N "spi_xfer_in" 2 840 ""
v L "bits" 2 840 "int8" `554 
f B "spi_xfer_in" 2 840 "int8(int8 bits)" `553 
f N "spi_xfer_in" 2 841 ""
v L "bits" 2 841 "int8" `556 
f G "spi_xfer_in" 2 841 "int16(int8 bits,int8 bits)" `555 
f N "spi_xfer_in" 2 842 ""
v L "bits" 2 842 "int8" `556 
f G "spi_xfer_in" 2 842 "int32(int8 bits,int8 bits)" `555 
f N "spi_xfer_in" 2 843 ""
v L "stream" 2 843 "int8" `556 
v L "bits" 2 843 "int8" `557 
f B "spi_xfer_in" 2 843 "int8(int8 stream,int8 bits)" `555 
f N "spi_xfer_in" 2 844 ""
v L "stream" 2 844 "int8" `556 
v L "bits" 2 844 "int8" `560 
f G "spi_xfer_in" 2 844 "int16(int8 stream,int8 bits,int8 task)" `558 
f N "spi_xfer_in" 2 845 ""
v L "stream" 2 845 "int8" `556 
v L "bits" 2 845 "int8" `560 
f G "spi_xfer_in" 2 845 "int32(int8 stream,int8 bits,int8 task)" `558  "#use rtos() Prototypes:"
f N "rtos_run" 2 848 ""
f B "rtos_run" 2 848 "void(int8 stream,int8 bits,int8 task)" `558 
f N "rtos_yield" 2 849 ""
f B "rtos_yield" 2 849 "void(int8 bits,int8 task)" `559 
f N "rtos_enable" 2 850 ""
v L "task" 2 850 "int8" `561 
f B "rtos_enable" 2 850 "void(int8 task)" `560 
f N "rtos_disable" 2 851 ""
v L "task" 2 851 "int8" `563 
f B "rtos_disable" 2 851 "void(int8 task)" `562 
f N "rtos_terminate" 2 852 ""
f B "rtos_terminate" 2 852 "void()" `564 
f N "rtos_await" 2 853 ""
v L "flag" 2 853 "int8" `566 
f B "rtos_await" 2 853 "void(int8 flag)" `565 
f N "rtos_wait" 2 854 ""
v L "sem" 2 854 "int8" `568 
f B "rtos_wait" 2 854 "void(int8 sem)" `567 
f N "rtos_signal" 2 855 ""
v L "sem" 2 855 "int8" `570 
f B "rtos_signal" 2 855 "void(int8 sem)" `569 
f N "rtos_msg_send" 2 856 ""
v L "task" 2 856 "int8" `572 
v L "msg" 2 856 "int8" `573 
f B "rtos_msg_send" 2 856 "void(int8 task,int8 msg)" `571 
f N "rtos_msg_read" 2 857 ""
f B "rtos_msg_read" 2 857 "int8()" `574 
f N "rtos_msg_poll" 2 858 ""
f B "rtos_msg_poll" 2 858 "int8()" `575 
f N "rtos_overrun" 2 859 ""
v L "task" 2 859 "int8" `577 
f B "rtos_overrun" 2 859 "int8(int8 task)" `576 
f N "rtos_stats" 2 860 ""
v L "task" 2 860 "int8" `579 
v L "stat" 2 860 "*int8" `580 
f B "rtos_stats" 2 860 "void(int8 task,*int8 stat)" `578  "#use timer() Prototypes:"
f N "get_ticks" 2 863 ""
f B "get_ticks" 2 863 "int8()" `581 
f N "get_ticks" 2 864 ""
f G "get_ticks" 2 864 "int16(int8 stream)" `582 
f N "get_ticks" 2 865 ""
f G "get_ticks" 2 865 "int32(int8 stream)" `582 
f N "get_ticks" 2 866 ""
v L "stream" 2 866 "int8" `583 
f B "get_ticks" 2 866 "int8(int8 stream)" `582 
f N "get_ticks" 2 867 ""
v L "stream" 2 867 "int8" `585 
f G "get_ticks" 2 867 "int16(int8 stream)" `584 
f N "get_ticks" 2 868 ""
v L "stream" 2 868 "int8" `585 
f G "get_ticks" 2 868 "int32(int8 stream)" `584 
f N "set_ticks" 2 869 ""
v L "value" 2 869 "int8" `585 
f B "set_ticks" 2 869 "void(int8 value)" `584 
f N "set_ticks" 2 870 ""
v L "value" 2 870 "int16" `587 
f B "set_ticks" 2 870 "void(int16 value)" `586 
f N "set_ticks" 2 871 ""
v L "value" 2 871 "int32" `589 
f B "set_ticks" 2 871 "void(int32 value)" `588 
f N "set_ticks" 2 872 ""
v L "stream" 2 872 "int8" `591 
v L "value" 2 872 "int8" `592 
f B "set_ticks" 2 872 "void(int8 stream,int8 value)" `590 
f N "set_ticks" 2 873 ""
v L "stream" 2 873 "int8" `594 
v L "value" 2 873 "int16" `595 
f B "set_ticks" 2 873 "void(int8 stream,int16 value)" `593 
f N "set_ticks" 2 874 ""
v L "stream" 2 874 "int8" `597 
v L "value" 2 874 "int32" `598 
f B "set_ticks" 2 874 "void(int8 stream,int32 value)" `596  "#use pwm() Prototypes:"
f N "pwm_on" 2 877 ""
f B "pwm_on" 2 877 "void()" `599 
f N "pwm_on" 2 878 ""
v L "stream" 2 878 "int8" `601 
f B "pwm_on" 2 878 "void(int8 stream)" `600 
f N "pwm_off" 2 879 ""
f B "pwm_off" 2 879 "void()" `602 
f N "pwm_off" 2 880 ""
v L "stream" 2 880 "int8" `604 
f B "pwm_off" 2 880 "void(int8 stream)" `603 
f N "pwm_set_duty" 2 881 ""
v L "duty" 2 881 "int16" `606 
f B "pwm_set_duty" 2 881 "void(int16 duty)" `605 
f N "pwm_set_duty" 2 882 ""
v L "stream" 2 882 "int8" `608 
v L "duty" 2 882 "int16" `609 
f B "pwm_set_duty" 2 882 "void(int8 stream,int16 duty)" `607 
f N "pwm_set_duty_percent" 2 883 ""
v L "percent" 2 883 "int16" `611 
f B "pwm_set_duty_percent" 2 883 "void(int16 percent)" `610 
f N "pwm_set_duty_percent" 2 884 ""
v L "stream" 2 884 "int8" `613 
v L "percent" 2 884 "int16" `614 
f B "pwm_set_duty_percent" 2 884 "void(int8 stream,int16 percent)" `612 
f N "pwm_set_frequency" 2 885 ""
v L "frequency" 2 885 "int32" `616 
f B "pwm_set_frequency" 2 885 "void(int32 frequency)" `615 
f N "pwm_set_frequency" 2 886 ""
v L "stream" 2 886 "int8" `618 
v L "frequency" 2 886 "int32" `619 
f B "pwm_set_frequency" 2 886 "void(int8 stream,int32 frequency)" `617  "#use capture() Prototypes:"
f N "get_capture_time" 2 889 ""
f B "get_capture_time" 2 889 "int16()" `620 
f N "get_capture_time" 2 890 ""
v L "stream" 2 890 "int8" `622 
f B "get_capture_time" 2 890 "int16(int8 stream)" `621 
f N "get_capture_event" 2 891 ""
f B "get_capture_event" 2 891 "int8()" `623 
f N "get_capture_event" 2 892 ""
v L "stream" 2 892 "int8" `625 
f B "get_capture_event" 2 892 "int8(int8 stream)" `624  "Enviroment Prototypes:"
c L "get_capture_event" 2 3 2 "FUNCTION"
f N "goto_address" 2 905 ""
v L "address" 2 905 "int16" `627 
f B "goto_address" 2 905 "void(int16 address)" `626 
f N "label_address" 2 906 ""
v L "label" 2 906 "int16" `629 
f B "label_address" 2 906 "int16(int16 label)" `628  "Program Memory Read Prototypes:"
f N "read_program_memory" 2 909 ""
v L "address" 2 909 "int16" `631 
v L "dataptr" 2 909 "*int8" `632 
v L "count" 2 909 "int16" `633 
f B "read_program_memory" 2 909 "void(int16 address,*int8 dataptr,int16 count)" `630 
f N "read_program_eeprom" 2 910 ""
v L "address" 2 910 "int16" `635 
f B "read_program_eeprom" 2 910 "int16(int16 address)" `634  "Program Memory Write Prototypes:"
f N "write_program_memory" 2 913 ""
v L "address" 2 913 "int16" `637 
v L "dataptr" 2 913 "*int8" `638 
v L "count" 2 913 "int16" `639 
f B "write_program_memory" 2 913 "void(int16 address,*int8 dataptr,int16 count)" `636 
f N "write_program_eeprom" 2 914 ""
v L "address" 2 914 "int16" `641 
v L "data" 2 914 "int16" `642 
f B "write_program_eeprom" 2 914 "void(int16 address,int16 data)" `640  "EEPROM Prototypes:"
d G "__EEADDRESS__" 2 921 "unsigned int8"
f N "read_eeprom" 2 924 ""
v L "address" 2 924 "int8" `644 
f B "read_eeprom" 2 924 "int8(int8 address)" `643 
f N "write_eeprom" 2 925 ""
v L "address" 2 925 "int8" `646 
v L "value" 2 925 "int8" `647 
f B "write_eeprom" 2 925 "void(int8 address,int8 value)" `645  "#use touchpad() Prototypes:"
f N "touchpad_state" 2 928 ""
v L "state" 2 928 "int8" `649 
f B "touchpad_state" 2 928 "void(int8 state)" `648 
f N "touchpad_getc" 2 929 ""
f B "touchpad_getc" 2 929 "int8()" `650 
f N "touchpad_hit" 2 930 ""
f B "touchpad_hit" 2 930 "int8()" `651  "INT"
c L "touchpad_hit" 2 3 4 "FUNCTION"
f N "enable_interrupts" 2 936 ""
v L "interrupt" 2 936 "int32" `653 
f B "enable_interrupts" 2 936 "void(int32 interrupt)" `652 
f N "disable_interrupts" 2 937 ""
v L "interrupt" 2 937 "int32" `655 
f B "disable_interrupts" 2 937 "void(int32 interrupt)" `654 
f N "clear_interrupt" 2 938 ""
v L "interrupt" 2 938 "int32" `657 
f B "clear_interrupt" 2 938 "void(int32 interrupt)" `656 
f N "interrupt_active" 2 939 ""
v L "interrupt" 2 939 "int32" `659 
f B "interrupt_active" 2 939 "int8(int32 interrupt)" `658 
f N "interrupt_enabled" 2 940 ""
v L "interrupt" 2 940 "int32" `661 
f B "interrupt_enabled" 2 940 "int8(int32 interrupt)" `660 
f N "ext_int_edge" 2 941 ""
v L "source" 2 941 "int8" `663 
v L "edge" 2 941 "int8" `664 
f B "ext_int_edge" 2 941 "void(int8 source,int8 edge)" `662 
f N "jump_to_isr" 2 942 ""
v L "address" 2 942 "int16" `666 
f B "jump_to_isr" 2 942 "void(int16 address)" `665  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 2 944 "0x40"
d G "H_TO_L" 2 945 "0"
d G "GLOBAL" 2 947 "0xF2C0"
d G "PERIPH" 2 948 "0xF240"
d G "INT_RTCC" 2 949 "0x00F220"
d G "INT_TIMER0" 2 950 "0x00F220"
d G "INT_TIMER1" 2 951 "0x009D01"
d G "INT_TIMER2" 2 952 "0x009D02"
d G "INT_TIMER3" 2 953 "0x00A002"
d G "INT_EXT_L2H" 2 954 "0x5000F210"
d G "INT_EXT_H2L" 2 955 "0x6000F210"
d G "INT_EXT" 2 956 "0x00F210"
d G "INT_EXT1_L2H" 2 957 "0x5001F008"
d G "INT_EXT1_H2L" 2 958 "0x6001F008"
d G "INT_EXT1" 2 959 "0x00F008"
d G "INT_EXT2_L2H" 2 960 "0x5002F010"
d G "INT_EXT2_H2L" 2 961 "0x6002F010"
d G "INT_EXT2" 2 962 "0x00F010"
d G "INT_RB" 2 963 "0x01FFF208"
d G "INT_AD" 2 964 "0x009D40"
d G "INT_RDA" 2 965 "0x009D20"
d G "INT_TBE" 2 966 "0x009D10"
d G "INT_SSP" 2 967 "0x009D08"
d G "INT_CCP1" 2 968 "0x009D04"
d G "INT_CCP2" 2 969 "0x00A001"
d G "INT_BUSCOL" 2 970 "0x00A008"
d G "INT_COMP" 2 971 "0x00A040"
d G "INT_EEPROM" 2 972 "0x00A010"
d G "INT_TBE2" 2 973 "0x00A310"
d G "INT_RDA2" 2 974 "0x00A320"
d G "INT_OSCF" 2 975 "0x00A080"
d G "INT_HLVD" 2 976 "0x00A004"
d G "INT_BUSCOL2" 2 977 "0x00A340"
d G "INT_COMP2" 2 978 "0x00A020"
d G "INT_SSP2" 2 979 "0x00A380"
d G "INT_TIMER4" 2 980 "0x007D01"
d G "INT_TIMER5" 2 981 "0x007D02"
d G "INT_TIMER6" 2 982 "0x007D04"
d G "INT_CCP3" 2 983 "0x007A01"
d G "INT_CCP4" 2 984 "0x007A02"
d G "INT_CCP5" 2 985 "0x007A04"
d G "INT_TMR1G" 2 986 "0x00A301"
d G "INT_TMR3G" 2 987 "0x00A302"
d G "INT_TMR5G" 2 988 "0x00A304"
d G "INT_CTMU" 2 989 "0x00A308"
d G "INT_RB4" 2 990 "0x110F208"
d G "INT_RB5" 2 991 "0x120F208"
d G "INT_RB6" 2 992 "0x140F208"
d G "INT_RB7" 2 993 "0x180F208"
C L "jump_to_isr" 1 7 1 "FUNCTION"
D G "_STDLIB" 3 13 ""
D G "RAND_MAX" 3 20 "32767" "The value of which is the maximum value"
D G "LONG_POINTERS" 3 26 "1"
T G "div_t" 3 34 "{sint8 quot,sint8 rem}" `678 
T G "ldiv_t" 3 39 "{sint16 quot,sint16 rem}" `682  "(C) Copyright 1996,2003 Custom Computer Services           ////"
D G "_STDDEF" 4 13 ""
D G "ptrdiff_t" 4 18 "unsigned int16"
D G "size_t" 4 24 "unsigned int16"
D G "wchar_t" 4 26 "char"
D G "NULL" 4 27 "0"
D G "offsetof" 4 29 "(s,f) (offsetofbit(s,f)/8)"
C L "jump_to_isr" 3 44 2 "FUNCTION"
C L "jump_to_isr" 3 47 1 "*"
C L "jump_to_isr" 3 47 1 "*"
F N "atoi" 3 51 ""
V L "s" 3 51 "*int8" `684 
f G "atoi" 3 51 "sint8(*int8 s)" `683  "Syntax: signed int32  atoi32(char * s)"
F N "atoi32" 3 59 ""
V L "s" 3 59 "*int8" `686 
f G "atoi32" 3 59 "sint32(*int8 s)" `685  "Syntax: char *  itoa(signed int32 num, int8 base, char * s)"
C L "atoi32" 3 47 2 "FUNCTION"
F N "itoa" 3 80 ""
V L "num" 3 80 "sint32" `688 
V L "base" 3 80 "int8" `689 
V L "s" 3 80 "*int8" `690 
f G "itoa" 3 80 "*int8(sint32 num,int8 base,*int8 s)" `687  "Standard template: signed int16  atol(char * s)"
C L "itoa" 3 82 1 "*"
C L "itoa" 3 82 1 "*"
F N "atol" 3 86 ""
V L "s" 3 86 "*int8" `692 
f G "atol" 3 86 "sint16(*int8 s)" `691  "Standard template: int16 strtoul(char * s,char *endptr,signed int base)"
C L "atol" 3 88 1 "*"
C L "atol" 3 88 1 "*"
C L "atol" 3 88 1 "*"
C L "atol" 3 88 1 "*"
F N "strtol" 3 94 ""
V L "s" 3 94 "*int8" `694 
V L "endptr" 3 94 "*int8" `695 
V L "base" 3 94 "sint8" `696 
f G "strtol" 3 94 "sint16(*int8 s,*int8 endptr,sint8 base)" `693  "Standard template: int16 strtoul(char * s,char *endptr,signed int base)"
C L "strtol" 3 96 1 "*"
C L "strtol" 3 96 1 "*"
C L "strtol" 3 96 1 "*"
C L "strtol" 3 96 1 "*"
F N "strtoul" 3 102 ""
V L "s" 3 102 "*int8" `698 
V L "endptr" 3 102 "*int8" `699 
V L "base" 3 102 "sint8" `700 
f G "strtoul" 3 102 "int16(*int8 s,*int8 endptr,sint8 base)" `697  "Standart template: float strtof(char * s,char *endptr)"
C L "strtoul" 3 96 2 "FUNCTION"
C L "strtoul" 3 104 1 "*"
C L "strtoul" 3 104 1 "*"
C L "strtoul" 3 104 1 "*"
F N "strtof" 3 111 ""
V L "s" 3 111 "*int8" `702 
V L "endptr" 3 111 "??0 *" `703 
f G "strtof" 3 111 "float(*int8 s,??0 * endptr)" `701  "provided for compatibility"
D G "strtof48" 3 117 "(s,e) strtof(s, e)"
D G "strtod" 3 118 "(s,e) strtof(s, e)"
C L "strtof" 3 104 1 "FUNCTION"
C L "strtof" 3 121 1 "*"
D G "atof" 3 125 "(s)   strtof(s, (char*)0)"
C L "strtof" 3 121 1 "FUNCTION"
C L "strtof" 3 144 1 "*"
C L "strtof" 3 144 1 "*"
C L "strtof" 3 144 1 "*"
F N "atoe" 3 150 ""
V L "s" 3 150 "*int8" `706 
f G "atoe" 3 150 "float(*int8 s)" `705  "Pseudo-random sequence generation functions"
C L "atoe" 3 144 1 "FUNCTION"
C L "atoe" 3 161 1 "*"
C L "atoe" 3 161 1 "*"
C L "atoe" 3 161 1 "*"
C L "atoe" 3 161 1 "*"
C L "atoe" 3 161 1 "*"
F N "rand" 3 170 ""
f G "rand" 3 170 "int16()" `707  "The srand function uses the argument as a seed for a new sequence of"
C L "rand" 3 172 1 "*"
C L "rand" 3 172 1 "*"
C L "rand" 3 172 1 "*"
C L "rand" 3 172 1 "*"
C L "rand" 3 172 1 "*"
C L "rand" 3 172 1 "*"
C L "rand" 3 172 1 "*"
C L "rand" 3 172 1 "*"
C L "rand" 3 172 1 "*"
C L "rand" 3 172 1 "*"
C L "rand" 3 172 1 "*"
C L "rand" 3 172 1 "*"
C L "rand" 3 172 1 "*"
C L "rand" 3 172 1 "*"
C L "rand" 3 172 1 "*"
F N "srand" 3 192 ""
V L "seed" 3 192 "int32" `709 
f G "srand" 3 192 "void(int32 seed)" `708  "Memory management functions"
C L "srand" 3 172 3 "FUNCTION"
F N "system" 3 206 ""
V L "string" 3 206 "*int8" `711 
f G "system" 3 206 "sint8(*int8 string)" `710  "Searching and sorting utilities"
C L "system" 3 172 1 "FUNCTION"
C L "system" 3 212 1 "*"
C L "system" 3 212 1 "*"
C L "system" 3 212 1 "*"
C L "system" 3 212 1 "*"
C L "system" 3 212 1 "*"
C L "system" 3 212 1 "*"
C L "system" 3 212 1 "*"
C L "system" 3 212 1 "*"
C L "system" 3 212 1 "*"
C L "system" 3 212 1 "*"
C L "system" 3 212 4 "*"
C L "system" 3 230 1 "*"
C L "system" 3 230 1 "*"
C L "system" 3 230 1 "*"
C L "system" 3 230 1 "*"
C L "system" 3 230 1 "*"
C L "system" 3 230 1 "*"
C L "system" 3 230 1 "*"
C L "system" 3 230 1 "*"
D G "labs" 3 250 "abs"
F N "div" 3 252 ""
V L "numer" 3 252 "sint8" `713 
V L "denom" 3 252 "sint8" `714 
f G "div" 3 252 "div_t(sint8 numer,sint8 denom)" `712 
F N "ldiv" 3 253 ""
V L "numer" 3 253 "sint16" `716 
V L "denom" 3 253 "sint16" `717 
f G "ldiv" 3 253 "ldiv_t(sint16 numer,sint16 denom)" `715  "Multibyte character functions"
C L "ldiv" 3 230 4 "FUNCTION"
C L "ldiv" 4 2 7 "FUNCTION"
D G "_STRING" 5 12 ""
C L "ldiv" 4 2 7 "FUNCTION"
D G "_CTYPE" 6 12 ""
D G "islower" 6 14 "(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz")"
D G "isupper" 6 15 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ")"
D G "isalnum" 6 16 "(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isalpha" 6 17 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isdigit" 6 18 "(x)  isamong(x,"0123456789")"
D G "isspace" 6 19 "(x)  ((x)==' ')"
D G "isxdigit" 6 20 "(x) isamong(x,"0123456789ABCDEFabcdef")"
D G "iscntrl" 6 21 "(x)  ((x)<' ')"
D G "isprint" 6 22 "(x)  ((x)>=' ')"
D G "isgraph" 6 23 "(x)  ((x)>' ')"
D G "ispunct" 6 24 "(x)  (((x)>' ')&&!isalnum(x))"
C L "ldiv" 5 19 10 "FUNCTION"
F N "memmove" 5 34 ""
V L "s1" 5 34 "*void" `719 
V L "s2" 5 34 "*void" `720 
V L "n" 5 34 "int16" `721 
F G "memmove" 5 35 "*int8(*void s1,*void s2,int16 n)" `718 
V L "sc1" 5 36 "*int8" `722 
V L "sc2" 5 37 "*int8" `723 
D G "strcopy" 5 54 "strcpy"
F N "strncpy" 5 61 ""
V L "s1" 5 61 "*int8" `725 
V L "s2" 5 61 "*int8" `726 
V L "n" 5 61 "int16" `727 
F G "strncpy" 5 62 "*int8(*int8 s1,*int8 s2,int16 n)" `724 
V L "s" 5 63 "*int8" `728 
F N "strcat" 5 78 ""
V L "s1" 5 78 "*int8" `730 
V L "s2" 5 78 "*int8" `731 
F G "strcat" 5 79 "*int8(*int8 s1,*int8 s2)" `729 
V L "s" 5 80 "*int8" `732 
F N "strncat" 5 96 ""
V L "s1" 5 96 "*int8" `734 
V L "s2" 5 96 "*int8" `735 
V L "n" 5 96 "int16" `736 
F G "strncat" 5 97 "*int8(*int8 s1,*int8 s2,int16 n)" `733 
V L "s" 5 98 "*int8" `737 
C L "memcmp" 5 19 3 "FUNCTION"
F N "memcmp" 5 120 ""
V L "s1" 5 120 "*void" `739 
V L "s2" 5 120 "*void" `740 
V L "n" 5 120 "int16" `741 
F G "memcmp" 5 121 "sint8(*void s1,*void s2,int16 n)" `738 
V L "su1" 5 122 "*int8" `742 
V L "su2" 5 122 "*int8" `743 
C L "strcmp" 5 19 2 "FUNCTION"
F N "strcmp" 5 134 ""
V L "s1" 5 134 "*int8" `745 
V L "s2" 5 134 "*int8" `746 
F G "strcmp" 5 135 "sint8(*int8 s1,*int8 s2)" `744 
C L "strcoll" 5 19 2 "FUNCTION"
F N "strcoll" 5 144 ""
V L "s1" 5 144 "*int8" `748 
V L "s2" 5 144 "*int8" `749 
F G "strcoll" 5 145 "sint8(*int8 s1,*int8 s2)" `747 
C L "strncmp" 5 19 4 "FUNCTION"
F N "strncmp" 5 157 ""
V L "s1" 5 157 "*int8" `751 
V L "s2" 5 157 "*int8" `752 
V L "n" 5 157 "int16" `753 
F G "strncmp" 5 158 "sint8(*int8 s1,*int8 s2,int16 n)" `750 
C L "strxfrm" 5 19 4 "FUNCTION"
F N "strxfrm" 5 170 ""
V L "s1" 5 170 "*int8" `755 
V L "s2" 5 170 "*int8" `756 
V L "n" 5 170 "int16" `757 
F G "strxfrm" 5 171 "int16(*int8 s1,*int8 s2,int16 n)" `754 
V L "c" 5 172 "int8" `758 
V L "n1" 5 173 "int8" `759 
C L "strxfrm" 5 19 1 "FUNCTION"
F N "memchr" 5 201 ""
V L "s" 5 201 "*void" `761 
V L "c" 5 201 "int8" `762 
V L "n" 5 201 "int16" `763 
F G "memchr" 5 202 "*int8(*void s,int8 c,int16 n)" `760 
V L "uc" 5 203 "int8" `764 
V L "su" 5 204 "*int8" `765 
F N "strchr" 5 215 ""
V L "s" 5 215 "*int8" `767 
V L "c" 5 215 "int8" `768 
F G "strchr" 5 216 "*int8(*int8 s,int8 c)" `766 
C L "strcspn" 5 19 4 "FUNCTION"
F N "strcspn" 5 227 ""
V L "s1" 5 227 "*int8" `770 
V L "s2" 5 227 "*int8" `771 
F G "strcspn" 5 228 "int8(*int8 s1,*int8 s2)" `769 
V L "sc1" 5 229 "*int8" `772 
V L "sc2" 5 229 "*int8" `773 
F N "strpbrk" 5 242 ""
V L "s1" 5 242 "*int8" `775 
V L "s2" 5 242 "*int8" `776 
F G "strpbrk" 5 243 "*int8(*int8 s1,*int8 s2)" `774 
V L "sc1" 5 244 "*int8" `777 
V L "sc2" 5 244 "*int8" `778 
F N "strrchr" 5 257 ""
V L "s" 5 257 "*int8" `780 
V L "c" 5 257 "int8" `781 
F G "strrchr" 5 258 "*int8(*int8 s,int8 c)" `779 
V L "p" 5 259 "*int8" `782 
C L "strspn" 5 19 2 "FUNCTION"
F N "strspn" 5 272 ""
V L "s1" 5 272 "*int8" `784 
V L "s2" 5 272 "*int8" `785 
F G "strspn" 5 273 "int8(*int8 s1,*int8 s2)" `783 
V L "sc1" 5 274 "*int8" `786 
V L "sc2" 5 274 "*int8" `787 
F N "strstr" 5 291 ""
V L "s1" 5 291 "*int8" `789 
V L "s2" 5 291 "*int8" `790 
F G "strstr" 5 292 "*int8(*int8 s1,*int8 s2)" `788 
V L "s" 5 293 "*int8" `791 
V L "t" 5 293 "*int8" `792 
C L "strlen" 5 19 2 "FUNCTION"
F N "strlen" 5 318 ""
V L "s" 5 318 "*int8" `794 
F G "strlen" 5 319 "int16(*int8 s)" `793 
V L "sc" 5 320 "*int8" `795 
F N "strtok" 5 341 ""
V L "s1" 5 341 "*int8" `797 
V L "s2" 5 341 "*int8" `798 
F G "strtok" 5 342 "*int8(*int8 s1,*int8 s2)" `796 
V L "beg" 5 343 "*int8" `799 
V L "end" 5 343 "*int8" `800 
V L "save" 5 344 "*int8" `801 
C L "stricmp" 5 19 6 "FUNCTION"
F N "stricmp" 5 392 ""
V L "s1" 5 392 "*int8" `803 
V L "s2" 5 392 "*int8" `804 
F G "stricmp" 5 393 "sint8(*int8 s1,*int8 s2)" `802 
F N "strlwr" 5 406 ""
V L "s" 5 406 "*int8" `808 
F G "strlwr" 5 407 "*int8(*int8 s)" `807 
V L "p" 5 408 "*int8" `809 
F N "strupr" 5 420 ""
V L "s" 5 420 "*int8" `811 
F G "strupr" 5 421 "*int8(*int8 s)" `810 
V L "p" 5 422 "*int8" `812 
F N "div" 3 275 ""
V L "numer" 3 275 "sint8" `713 
V L "denom" 3 275 "sint8" `815 
F G "div" 3 276 "div_t(sint8 numer,sint8 denom)" `712 
V L "val" 3 277 "div_t" `813 
F N "ldiv" 3 283 ""
V L "numer" 3 283 "sint16" `716 
V L "denom" 3 283 "sint16" `822 
F G "ldiv" 3 284 "ldiv_t(sint16 numer,sint16 denom)" `715 
V L "val" 3 285 "ldiv_t" `820 
F N "atoe" 3 362 ""
V L "s" 3 362 "*int8" `828 
F G "atoe" 3 363 "float(*int8 s)" `705 
V L "pow10" 3 364 "float" `827 
V L "result" 3 365 "float" `828 
V L "sign" 3 366 "int8" `829 
V L "expsign" 3 367 "int8" `830 
V L "c" 3 368 "int8" `831 
V L "ptr" 3 369 "int8" `832 
V L "i" 3 370 "int8" `833 
V L "exp" 3 371 "float" `834 
V L "expcnt" 3 372 "int8" `835 
C L "atoe" 3 398 1 "FUNCTION"
F N "atoi" 3 430 ""
V L "s" 3 430 "*int8" `848 
F G "atoi" 3 431 "sint8(*int8 s)" `683 
V L "result" 3 432 "sint8" `847 
V L "sign" 3 433 "int8" `848 
V L "base" 3 433 "int8" `849 
V L "index" 3 433 "int8" `850 
V L "c" 3 434 "int8" `851 
C L "atoi" 3 398 1 "FUNCTION"
C L "atoi" 3 398 1 "FUNCTION"
C L "atoi" 3 398 1 "FUNCTION"
C L "atoi" 3 398 1 "FUNCTION"
C L "atoi" 3 398 1 "FUNCTION"
C L "atoi" 3 398 1 "FUNCTION"
F N "atol" 3 499 ""
V L "s" 3 499 "*int8" `853 
F G "atol" 3 500 "sint16(*int8 s)" `691 
V L "result" 3 501 "sint16" `852 
V L "sign" 3 502 "int8" `853 
V L "base" 3 502 "int8" `854 
V L "index" 3 502 "int8" `855 
V L "c" 3 503 "int8" `856 
C L "atol" 3 398 1 "FUNCTION"
C L "atol" 3 398 1 "FUNCTION"
C L "atol" 3 398 1 "FUNCTION"
C L "atol" 3 398 1 "FUNCTION"
C L "mult_with10" 3 398 1 "FUNCTION"
F N "mult_with10" 3 566 ""
V L "num" 3 566 "int32" `858 
F G "mult_with10" 3 567 "sint32(int32 num)" `857 
F N "atoi32" 3 572 ""
V L "s" 3 572 "*int8" `860 
F G "atoi32" 3 573 "sint32(*int8 s)" `685 
V L "result" 3 574 "sint32" `859 
V L "sign" 3 575 "int8" `860 
V L "base" 3 575 "int8" `861 
V L "index" 3 575 "int8" `862 
V L "c" 3 576 "int8" `863 
C L "atoi32" 3 398 1 "FUNCTION"
C L "atoi32" 3 398 1 "FUNCTION"
C L "atoi32" 3 398 1 "FUNCTION"
C L "atoi32" 3 398 1 "FUNCTION"
C L "atoi32" 3 398 1 "FUNCTION"
F N "itoa" 3 771 ""
V L "num" 3 771 "sint32" `688 
V L "base" 3 771 "int8" `689 
V L "s" 3 771 "*int8" `867 
F G "itoa" 3 772 "*int8(sint32 num,int8 base,*int8 s)" `687 
V L "temp" 3 773 "int32" `864 
V L "i" 3 774 "int8" `865 
V L "sign" 3 774 "int8" `866 
V L "cnt" 3 774 "int8" `867 
V L "c" 3 775 "int8" `868 
C L "itoa" 3 398 1 "FUNCTION"
C L "itoa" 3 398 1 "FUNCTION"
C L "itoa" 3 398 1 "FUNCTION"
C L "itoa" 3 398 1 "FUNCTION"
C L "itoa" 3 398 1 "FUNCTION"
F N "strtof" 3 886 ""
V L "s" 3 886 "*int8" `702 
V L "endptr" 3 886 "??0 *" `877 
F G "strtof" 3 887 "float(*int8 s,??0 * endptr)" `701 
V L "pow10" 3 888 "float" `875 
V L "result" 3 889 "float" `876 
V L "skip" 3 890 "int1" `877 
V L "sign" 3 890 "int1" `878 
V L "point" 3 890 "int1" `879 
V L "c" 3 891 "int8" `880 
V L "ptr" 3 892 "int8" `881 
F N "strtoul" 3 1104 ""
V L "s" 3 1104 "*int8" `698 
V L "endptr" 3 1104 "*int8" `699 
V L "base" 3 1104 "sint8" `886 
F G "strtoul" 3 1105 "int16(*int8 s,*int8 endptr,sint8 base)" `697 
V L "sc" 3 1106 "*int8" `883 
V L "s1" 3 1106 "*int8" `884 
V L "sd" 3 1106 "*int8" `885 
V L "x" 3 1107 "int16" `886 
V L "sign" 3 1108 "int8" `887 
V L "digits" 3 1109 "int8[1]" `888 
C L "strtoul" 3 398 1 "FUNCTION"
C L "strtoul" 3 398 1 "FUNCTION"
C L "strtoul" 3 398 1 "FUNCTION"
F N "strtol" 3 1166 ""
V L "s" 3 1166 "*int8" `694 
V L "endptr" 3 1166 "*int8" `695 
V L "base" 3 1166 "sint8" `893 
F G "strtol" 3 1167 "sint16(*int8 s,*int8 endptr,sint8 base)" `693 
V L "sc" 3 1168 "*int8" `890 
V L "s1" 3 1168 "*int8" `891 
V L "sd" 3 1168 "*int8" `892 
V L "x" 3 1169 "sint16" `893 
V L "sign" 3 1170 "int8" `894 
V L "digits" 3 1171 "int8[1]" `895 
C L "strtol" 3 398 1 "FUNCTION"
C L "strtol" 3 398 1 "FUNCTION"
C L "strtol" 3 398 1 "FUNCTION"
F N "system" 3 1229 ""
V L "string" 3 1229 "*int8" `898 
F G "system" 3 1230 "sint8(*int8 string)" `710 
F N "mblen" 3 1234 ""
V L "s" 3 1234 "*int8" `898 
V L "n" 3 1234 "int16" `899 
F G "mblen" 3 1235 "int16(*int8 s,int16 n)" `897 
F N "mbtowc" 3 1239 ""
V L "pwc" 3 1239 "*int8" `901 
V L "s" 3 1239 "*int8" `902 
V L "n" 3 1239 "int16" `903 
F G "mbtowc" 3 1240 "int8(*int8 pwc,*int8 s,int16 n)" `900 
F N "wctomb" 3 1245 ""
V L "s" 3 1245 "*int8" `905 
V L "wchar" 3 1245 "int8" `906 
F G "wctomb" 3 1246 "int8(*int8 s,int8 wchar)" `904 
F N "mbstowcs" 3 1251 ""
V L "pwcs" 3 1251 "*int8" `908 
V L "s" 3 1251 "*int8" `909 
V L "n" 3 1251 "int16" `910 
F G "mbstowcs" 3 1252 "int16(*int8 pwcs,*int8 s,int16 n)" `907 
F N "wcstombs" 3 1257 ""
V L "s" 3 1257 "*int8" `912 
V L "pwcs" 3 1257 "*int8" `913 
V L "n" 3 1257 "int16" `914 
F G "wcstombs" 3 1258 "int16(*int8 s,*int8 pwcs,int16 n)" `911 
V G "_Randseed" 3 1267 "int32" `915 
F N "rand" 3 1269 ""
F G "rand" 3 1270 "int16()" `707 
F N "srand" 3 1275 ""
V L "seed" 3 1275 "int32" `920 
F G "srand" 3 1276 "void(int32 seed)" `708 
F N "*_Cmpfun" 3 1285 ""
V L "p1" 3 1285 "*int8" `920 
V L "p2" 3 1285 "*int8" `921 
T G "*_Cmpfun" 3 1285 "sint8(*int8 p1,*int8 p2)" `919 
F N "qsort" 3 1292 ""
V L "qdata" 3 1292 "*int8" `924 
V L "qitems" 3 1292 "int8" `925 
V L "qsize" 3 1292 "int8" `926 
V L "cmp" 3 1292 "_Cmpfun" `927 
F G "qsort" 3 1292 "void(*int8 qdata,int8 qitems,int8 qsize,_Cmpfun cmp)" `923 
V L "m" 3 1293 "int8" `928 
V L "j" 3 1293 "int8" `929 
V L "i" 3 1293 "int8" `930 
V L "l" 3 1293 "int8" `931 
V L "done" 3 1294 "int1" `932 
V L "t" 3 1295 "int8[16]" `933 
F N "bsearch" 3 1320 ""
V L "key" 3 1320 "*int8" `936 
V L "base" 3 1320 "*int8" `937 
V L "num" 3 1320 "int16" `938 
V L "width" 3 1320 "int16" `939 
V L "cmp" 3 1320 "_Cmpfun" `940 
F G "bsearch" 3 1321 "*int8(*int8 key,*int8 base,int16 num,int16 width,_Cmpfun cmp)" `935 
V L "p" 3 1322 "*int8" `941 
V L "q" 3 1322 "*int8" `942 
V L "n" 3 1323 "int16" `943 
V L "pivot" 3 1324 "int16" `944 
V L "val" 3 1325 "sint8" `945 
C L "bsearch" 3 398 1 "FUNCTION"
D G "SLAVE1_WRT_ADDR" 1 13 "0x2"
D G "SLAVE1_READ_ADDR" 1 14 "0x3"
D G "SLAVE2_WRT_ADDR" 1 17 "0x14"
D G "SLAVE2_READ_ADDR" 1 18 "0x15"
D G "shclk" 1 20 "PIN_B2" "74HC595 Shift clock"
D G "strclk" 1 21 "PIN_B1" "74HC595 Store clock"
D G "ser4" 1 22 "PIN_B0" "74HC595 Data pin of segment 1"
D G "ser3" 1 23 "PIN_B3" "74HC595 Data pin of segment 2"
D G "ser2" 1 24 "PIN_B4" "74HC595 Data pin of segment 3"
D G "ser1" 1 25 "PIN_B5" "74HC595 Data pin of segment 4"
D G "ser5" 1 26 "PIN_C5" "74HC595 Data pin of segment 5"
D G "snd1" 1 27 "PIN_A0" "Buzzer contact 1"
D G "snd2" 1 28 "PIN_A1" "Buzzer contact 2"
D G "led1" 1 29 "PIN_A2" "Debug led, one of 4 yellow"
D G "led2" 1 30 "PIN_A3" "Debug led, one of 4 green"
D G "led3" 1 31 "PIN_A4" "Debug led, one of 4 blue"
D G "led4" 1 32 "PIN_A5" "Debug led, one of 4"
C L "reset" 1 12 1 "FUNCTION"
F N "reset" 1 35 ""
f G "reset" 1 35 "void()" `949  "Starts calculating the digits for the 7-segments"
F N "display_loop" 1 37 ""
V L "min" 1 37 "int8" `951 
V L "sec" 1 37 "int8" `952 
V L "health" 1 37 "int8" `953 
f G "display_loop" 1 37 "void(int8 min,int8 sec,int8 health)" `950  "Seperates the numbers, ex 23 -> 2 and 3"
F N "seperateNumbers" 1 39 ""
V L "min1" 1 39 "int8" `955 
V L "min2" 1 39 "int8" `956 
V L "sec1" 1 39 "int8" `957 
V L "sec2" 1 39 "int8" `958 
V L "min" 1 39 "int8" `959 
V L "sec" 1 39 "int8" `960 
f G "seperateNumbers" 1 39 "void(int8 min1,int8 min2,int8 sec1,int8 sec2,int8 min,int8 sec)" `954  "Sets the needed 7-segment's digit"
F N "display" 1 41 ""
V L "digit" 1 41 "int8" `962 
V L "data_pin" 1 41 "int8" `963 
V L "segment" 1 41 "int8" `964 
f G "display" 1 41 "void(int8 digit,int8 data_pin,int8 segment)" `961  "Main game check if the player failed"
F N "check_fail_state" 1 43 ""
V L "min" 1 43 "int8" `966 
V L "sec" 1 43 "int8" `967 
V L "health" 1 43 "int8" `968 
f G "check_fail_state" 1 43 "int8(int8 min,int8 sec,int8 health)" `965  "Beeping sound generation"
F N "beep_sound" 1 45 ""
V L "min" 1 45 "int8" `970 
V L "sec" 1 45 "int8" `971 
f G "beep_sound" 1 45 "void(int8 min,int8 sec)" `969  "Initialize the system"
F N "init" 1 47 ""
f G "init" 1 47 "void()" `972  "Generation of the seed"
F N "seed_generation" 1 49 ""
f G "seed_generation" 1 49 "void()" `973  "Set debug leds randomly"
F N "led_series_set" 1 51 ""
V L "series" 1 51 "*int8" `975 
f G "led_series_set" 1 51 "void(*int8 series)" `974  "Sends all of the values to other modules using I2C"
F N "send_gen_values" 1 53 ""
V L "series" 1 53 "*int8" `978 
V L "health" 1 53 "int8" `979 
V L "min" 1 53 "int8" `980 
V L "sec" 1 53 "int8" `981 
f G "send_gen_values" 1 53 "void(*int8 series,int8 health,int8 min,int8 sec)" `977  "Checks if HP is reduced from modules"
F N "recieve_hp_data" 1 55 ""
V L "health" 1 55 "int8" `984 
V L "modules_left" 1 55 "int8" `985 
f G "recieve_hp_data" 1 55 "void(int8 health,int8 modules_left)" `983  "Invoke, to display the number on the 7 segment, that is in the name of var."
V G "disp0" 1 58 "int8[1]" `986 
V G "disp1" 1 59 "int8[1]" `987 
V G "disp2" 1 60 "int8[1]" `988 
V G "disp3" 1 61 "int8[1]" `989 
V G "disp4" 1 62 "int8[1]" `990 
V G "disp5" 1 63 "int8[1]" `991 
V G "disp6" 1 64 "int8[1]" `992 
V G "disp7" 1 65 "int8[1]" `993 
V G "disp8" 1 66 "int8[1]" `994 
V G "disp9" 1 67 "int8[1]" `995 
C L "recieve_hp_data" 1 12 3 "FUNCTION"
F N "MAIN" 0 3 ""
F G "MAIN" 0 3 "void()" `996  "Initialize the system"
C L "MAIN" 0 7 1 "FUNCTION"
V L "health" 0 8 "int8" `999 
C L "MAIN" 0 7 1 "FUNCTION"
V L "min" 0 11 "int8" `1000 
V L "sec" 0 12 "int8" `1001 
C L "MAIN" 0 7 1 "FUNCTION"
V L "modules_left" 0 15 "int8" `1002 
C L "MAIN" 0 7 1 "FUNCTION"
V L "series" 0 18 "int8[8]" `1003 
C L "MAIN" 0 7 1 "FUNCTION"
C L "MAIN" 0 7 1 "FUNCTION"
C L "MAIN" 0 7 1 "FUNCTION"
C L "MAIN" 0 7 1 "FUNCTION"
C L "MAIN" 0 7 1 "FUNCTION"
C L "MAIN" 0 7 1 "FUNCTION"
C L "MAIN" 0 7 1 "FUNCTION"
C L "MAIN" 0 7 1 "FUNCTION"
C L "recieve_hp_data" 0 7 1 "FUNCTION"
F N "recieve_hp_data" 0 53 ""
V L "health" 0 53 "int8" `984 
V L "modules_left" 0 53 "int8" `1006 
F G "recieve_hp_data" 0 53 "void(int8 health,int8 modules_left)" `983  "Data to be gathered from modules"
C L "recieve_hp_data" 0 7 2 "FUNCTION"
V L "incoming" 0 58 "int8" `1004 
C L "recieve_hp_data" 0 7 11 "FUNCTION"
F N "send_gen_values" 0 91 ""
V L "series" 0 91 "*int8" `978 
V L "health" 0 91 "int8" `979 
V L "min" 0 91 "int8" `980 
V L "sec" 0 91 "int8" `1009 
F G "send_gen_values" 0 91 "void(*int8 series,int8 health,int8 min,int8 sec)" `977 
V L "bin" 0 92 "int8" `1005 
V L "i" 0 93 "int8" `1006 
C L "led_series_set" 0 7 1 "FUNCTION"
F N "led_series_set" 0 118 ""
V L "series" 0 118 "*int8" `1008 
F G "led_series_set" 0 118 "void(*int8 series)" `974  "Set a random pattern to the leds"
V L "i" 0 120 "int8" `1007 
C L "led_series_set" 0 7 1 "FUNCTION"
C L "init" 0 7 1 "FUNCTION"
F N "init" 0 144 ""
F G "init" 0 144 "void()" `972  "This buzzer pins, snd2 always gnd"
C L "init" 0 7 1 "FUNCTION"
C L "init" 0 7 1 "FUNCTION"
C L "init" 0 7 1 "FUNCTION"
C L "seed_generation" 0 7 1 "FUNCTION"
F N "seed_generation" 0 163 ""
F G "seed_generation" 0 163 "void()" `973  "The seed is generated by counting how many times the system turned on"
C L "seed_generation" 0 7 2 "FUNCTION"
C L "beep_sound" 0 7 1 "FUNCTION"
F N "beep_sound" 0 177 ""
V L "min" 0 177 "int8" `970 
V L "sec" 0 177 "int8" `1010 
F G "beep_sound" 0 177 "void(int8 min,int8 sec)" `969 
C L "check_fail_state" 0 7 1 "FUNCTION"
F N "check_fail_state" 0 213 ""
V L "min" 0 213 "int8" `966 
V L "sec" 0 213 "int8" `967 
V L "health" 0 213 "int8" `1011 
F G "check_fail_state" 0 213 "int8(int8 min,int8 sec,int8 health)" `965 
C L "display" 0 7 1 "FUNCTION"
F N "display" 0 227 ""
V L "digit" 0 227 "int8" `962 
V L "data_pin" 0 227 "int8" `963 
V L "segment" 0 227 "int8" `1011 
F G "display" 0 227 "void(int8 digit,int8 data_pin,int8 segment)" `961 
V L "state" 0 228 "int8" `1008 
C L "display" 0 7 2 "FUNCTION"
C L "display" 0 7 1 "FUNCTION"
C L "seperateNumbers" 0 7 1 "FUNCTION"
F N "seperateNumbers" 0 268 ""
V L "min1" 0 268 "int8" `955 
V L "min2" 0 268 "int8" `956 
V L "sec1" 0 268 "int8" `957 
V L "sec2" 0 268 "int8" `958 
V L "min" 0 268 "int8" `959 
V L "sec" 0 268 "int8" `1015 
F G "seperateNumbers" 0 268 "void(int8 min1,int8 min2,int8 sec1,int8 sec2,int8 min,int8 sec)" `954 
C L "display_loop" 0 7 1 "FUNCTION"
F N "display_loop" 0 276 ""
V L "min" 0 276 "int8" `951 
V L "sec" 0 276 "int8" `952 
V L "health" 0 276 "int8" `1015 
F G "display_loop" 0 276 "void(int8 min,int8 sec,int8 health)" `950 
V L "min1" 0 277 "int8" `1012 
C L "display_loop" 0 7 1 "FUNCTION"
V L "min2" 0 278 "int8" `1013 
V L "sec1" 0 279 "int8" `1014 
V L "sec2" 0 280 "int8" `1015 
V L "i" 0 282 "int8" `1016 
C L "reset" 0 7 1 "FUNCTION"
F N "reset" 0 303 ""
F G "reset" 0 303 "void()" `949 
V L "i" 0 310 "int8" `1017 
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 1
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 3 0
F B "read_program_memory" 3 0
F B "read_rom_memory" 3 0
F B "erase_program_eeprom" 1 0
F B "write_configuration_memory" 2 3
F B "read_configuration_memory" 2 3
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "output_e" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "input_e" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "set_tris_e" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "get_tris_e" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "input_change_e" 0 0
F B "set_slow_slew_a" 1 0
F B "set_slow_slew_b" 1 0
F B "set_slow_slew_c" 1 0
F B "set_slow_slew_e" 1 0
F B "port_b_pullups" 1 0
F B "port_e_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "set_analog_pins" 0 255
F B "setup_adc_reference" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "get_capture" 0 1
F B "set_compare_time" 1 2
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_timer_3" 1 0
F B "set_timer3" 1 0
F B "get_timer3" 0 0
F B "setup_timer_4" 3 0
F B "get_timer4" 0 0
F B "set_timer4" 1 0
F B "setup_timer_6" 3 0
F B "get_timer6" 0 0
F B "set_timer6" 1 0
F B "setup_timer_5" 1 0
F B "get_timer5" 0 0
F B "set_timer5" 1 0
F B "setup_ccp1" 1 2
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 2
F B "set_pwm2_duty" 1 0
F B "setup_ccp3" 1 2
F B "set_pwm3_duty" 1 0
F B "setup_ccp4" 1 0
F B "set_pwm4_duty" 1 0
F B "setup_ccp5" 1 0
F B "set_pwm5_duty" 1 0
F B "setup_low_volt_detect" 1 0
F B "setup_oscillator" 0 2
F B "pll_locked" 0 0
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 2
F B "spi_data_is_in2" 0 0
F B "setup_dac" 1 0
F B "dac_write" 1 0
F B "brownout_enable" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
F B "i2c_read" 0 2
F B "i2c_write" 1 2
F B "i2c_start" 0 2
F B "i2c_stop" 0 1
F B "i2c_isr_state" 0 1
F B "i2c_init" 1 2
F B "i2c_poll" 0 1
F B "i2c_speed" 1 2
