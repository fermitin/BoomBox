D G "__PCH__" 0 67 ""5.074""
D G "__DEVICE__" 0 67 "1450"
D G "__DATE__" 0 67 ""21-Sau-19""
D G "__TIME__" 0 67 ""20:39:35""
D G "_UNICODE" 0 67 ""?""
D G "__EVAL" 0 67 ""?"" "Standard Header file for the PIC18F14K22 device ////////////////"
c L "set_tris_a" 2 3 6 "FUNCTION"
f N "set_tris_a" 2 44 ""
v L "value" 2 44 "int8" `55 
f B "set_tris_a" 2 44 "void(int8 value)" `54 
f N "set_tris_b" 2 45 ""
v L "value" 2 45 "int8" `57 
f B "set_tris_b" 2 45 "void(int8 value)" `56 
f N "set_tris_c" 2 46 ""
v L "value" 2 46 "int8" `59 
f B "set_tris_c" 2 46 "void(int8 value)" `58 
f N "get_tris_a" 2 47 ""
f B "get_tris_a" 2 47 "int8()" `60 
f N "get_tris_b" 2 48 ""
f B "get_tris_b" 2 48 "int8()" `61 
f N "get_tris_c" 2 49 ""
f B "get_tris_c" 2 49 "int8()" `62 
f N "output_a" 2 50 ""
v L "value" 2 50 "int8" `64 
f B "output_a" 2 50 "void(int8 value)" `63 
f N "output_b" 2 51 ""
v L "value" 2 51 "int8" `66 
f B "output_b" 2 51 "void(int8 value)" `65 
f N "output_c" 2 52 ""
v L "value" 2 52 "int8" `68 
f B "output_c" 2 52 "void(int8 value)" `67 
f N "input_a" 2 53 ""
f B "input_a" 2 53 "int8()" `69 
f N "input_b" 2 54 ""
f B "input_b" 2 54 "int8()" `70 
f N "input_c" 2 55 ""
f B "input_c" 2 55 "int8()" `71 
f N "input_change_a" 2 56 ""
f B "input_change_a" 2 56 "int8()" `72 
f N "input_change_b" 2 57 ""
f B "input_change_b" 2 57 "int8()" `73 
f N "input_change_c" 2 58 ""
f B "input_change_c" 2 58 "int8()" `74 
f N "port_a_pullups" 2 59 ""
v L "upmask" 2 59 "int8" `76 
f B "port_a_pullups" 2 59 "void(int8 upmask)" `75 
f N "port_b_pullups" 2 60 ""
v L "upmask" 2 60 "int8" `78 
f B "port_b_pullups" 2 60 "void(int8 upmask)" `77 
f N "input" 2 61 ""
v L "pin" 2 61 "int16" `80 
f B "input" 2 61 "int8(int16 pin)" `79 
f N "input_state" 2 62 ""
v L "pin" 2 62 "int16" `82 
f B "input_state" 2 62 "int8(int16 pin)" `81 
f N "output_low" 2 63 ""
v L "pin" 2 63 "int16" `84 
f B "output_low" 2 63 "void(int16 pin)" `83 
f N "output_high" 2 64 ""
v L "pin" 2 64 "int16" `86 
f B "output_high" 2 64 "void(int16 pin)" `85 
f N "output_toggle" 2 65 ""
v L "pin" 2 65 "int16" `88 
f B "output_toggle" 2 65 "void(int16 pin)" `87 
f N "output_bit" 2 66 ""
v L "pin" 2 66 "int16" `90 
v L "level" 2 66 "int8" `91 
f B "output_bit" 2 66 "void(int16 pin,int8 level)" `89 
f N "output_float" 2 67 ""
v L "pin" 2 67 "int16" `93 
f B "output_float" 2 67 "void(int16 pin)" `92 
f N "output_drive" 2 68 ""
v L "pin" 2 68 "int16" `95 
f B "output_drive" 2 68 "void(int16 pin)" `94  "Constants used to identify pins in the above are:"
d G "PIN_A0" 2 72 "31744"
d G "PIN_A1" 2 73 "31745"
d G "PIN_A2" 2 74 "31746"
d G "PIN_A3" 2 75 "31747"
d G "PIN_A4" 2 76 "31748"
d G "PIN_A5" 2 77 "31749"
d G "PIN_B4" 2 79 "31756"
d G "PIN_B5" 2 80 "31757"
d G "PIN_B6" 2 81 "31758"
d G "PIN_B7" 2 82 "31759"
d G "PIN_C0" 2 84 "31760"
d G "PIN_C1" 2 85 "31761"
d G "PIN_C2" 2 86 "31762"
d G "PIN_C3" 2 87 "31763"
d G "PIN_C4" 2 88 "31764"
d G "PIN_C5" 2 89 "31765"
d G "PIN_C6" 2 90 "31766"
d G "PIN_C7" 2 91 "31767"
d G "FALSE" 2 94 "0"
d G "TRUE" 2 95 "1"
d G "BYTE" 2 97 "int8"
d G "BOOLEAN" 2 98 "int1"
d G "getc" 2 100 "getch"
d G "fgetc" 2 101 "getch"
d G "getchar" 2 102 "getch"
d G "putc" 2 103 "putchar"
d G "fputc" 2 104 "putchar"
d G "fgets" 2 105 "gets"
d G "fputs" 2 106 "puts"
c L "output_drive" 2 3 3 "FUNCTION"
f N "restart_cause" 2 111 ""
f B "restart_cause" 2 111 "int8()" `96 
f N "reset_cpu" 2 112 ""
f B "reset_cpu" 2 112 "void()" `97 
f N "sleep" 2 113 ""
f B "sleep" 2 113 "void()" `98 
f N "sleep" 2 114 ""
v L "type" 2 114 "int8" `100 
f B "sleep" 2 114 "void(int8 type)" `99  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_TIMEOUT" 2 116 "7"
d G "MCLR_FROM_SLEEP" 2 117 "11"
d G "MCLR_FROM_RUN" 2 118 "15"
d G "NORMAL_POWER_UP" 2 119 "12"
d G "BROWNOUT_RESTART" 2 120 "14"
d G "WDT_FROM_SLEEP" 2 121 "3"
d G "RESET_INSTRUCTION" 2 122 "0"
d G "SLEEP_FULL" 2 125 "0" "Default"
d G "SLEEP_IDLE" 2 126 "1" "Clock and peripherals don't stop"
c L "sleep" 2 3 5 "FUNCTION"
f N "setup_timer_0" 2 133 ""
v L "mode" 2 133 "int8" `102 
f B "setup_timer_0" 2 133 "void(int8 mode)" `101 
f N "set_timer0" 2 134 ""
v L "value" 2 134 "int16" `104 
f B "set_timer0" 2 134 "void(int16 value)" `103 
f N "get_timer0" 2 135 ""
f B "get_timer0" 2 135 "int16()" `105 
f N "setup_counters" 2 136 ""
v L "mode" 2 136 "int8" `107 
v L "prescaler" 2 136 "int8" `108 
f B "setup_counters" 2 136 "void(int8 mode,int8 prescaler)" `106 
f N "set_rtcc" 2 137 ""
v L "value" 2 137 "int16" `110 
f B "set_rtcc" 2 137 "void(int16 value)" `109 
f N "get_rtcc" 2 138 ""
f B "get_rtcc" 2 138 "int16()" `111  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 2 140 "0"
d G "T0_EXT_L_TO_H" 2 141 "32"
d G "T0_EXT_H_TO_L" 2 142 "48"
d G "T0_DIV_1" 2 144 "8"
d G "T0_DIV_2" 2 145 "0"
d G "T0_DIV_4" 2 146 "1"
d G "T0_DIV_8" 2 147 "2"
d G "T0_DIV_16" 2 148 "3"
d G "T0_DIV_32" 2 149 "4"
d G "T0_DIV_64" 2 150 "5"
d G "T0_DIV_128" 2 151 "6"
d G "T0_DIV_256" 2 152 "7"
d G "T0_OFF" 2 154 "0x80"
d G "T0_8_BIT" 2 156 "0x40"
d G "RTCC_INTERNAL" 2 160 "0"
d G "RTCC_EXT_L_TO_H" 2 161 "32"
d G "RTCC_EXT_H_TO_L" 2 162 "48"
d G "RTCC_DIV_1" 2 163 "8"
d G "RTCC_DIV_2" 2 164 "0"
d G "RTCC_DIV_4" 2 165 "1"
d G "RTCC_DIV_8" 2 166 "2"
d G "RTCC_DIV_16" 2 167 "3"
d G "RTCC_DIV_32" 2 168 "4"
d G "RTCC_DIV_64" 2 169 "5"
d G "RTCC_DIV_128" 2 170 "6"
d G "RTCC_DIV_256" 2 171 "7"
d G "RTCC_OFF" 2 172 "0x80"
d G "RTCC_8_BIT" 2 173 "0x40"
c L "get_rtcc" 2 3 8 "FUNCTION"
f N "setup_wdt" 2 184 ""
v L "mode" 2 184 "int16" `113 
f B "setup_wdt" 2 184 "void(int16 mode)" `112 
f N "restart_wdt" 2 185 ""
f B "restart_wdt" 2 185 "void()" `114  "Constants used for SETUP_WDT() are:"
d G "WDT_ON" 2 187 "0x100"
d G "WDT_OFF" 2 188 "0"
d G "WDT_4MS" 2 190 "0x300"
d G "WDT_8MS" 2 191 "0x500"
d G "WDT_16MS" 2 192 "0x700"
d G "WDT_32MS" 2 193 "0x900"
d G "WDT_64MS" 2 194 "0xB00"
d G "WDT_128MS" 2 195 "0xD00"
d G "WDT_256MS" 2 196 "0xF00"
d G "WDT_512MS" 2 197 "0x1100"
d G "WDT_1S" 2 198 "0x1300"
d G "WDT_2S" 2 199 "0x1500"
d G "WDT_4S" 2 200 "0x1700"
d G "WDT_8S" 2 201 "0x1900"
d G "WDT_16" 2 202 "0x1B00"
d G "WDT_32S" 2 203 "0x1D00"
d G "WDT_64S" 2 204 "0x1F00"
d G "WDT_128S" 2 205 "0x2100"
c L "restart_wdt" 2 3 3 "FUNCTION"
f N "setup_timer_1" 2 210 ""
v L "mode" 2 210 "int16" `116 
f B "setup_timer_1" 2 210 "void(int16 mode)" `115 
f N "get_timer1" 2 211 ""
f B "get_timer1" 2 211 "int16()" `117 
f N "set_timer1" 2 212 ""
v L "value" 2 212 "int16" `119 
f B "set_timer1" 2 212 "void(int16 value)" `118  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 2 215 "0"
d G "T1_INTERNAL" 2 216 "0x85"
d G "T1_EXTERNAL" 2 217 "0x87"
d G "T1_EXTERNAL_SYNC" 2 218 "0x83"
d G "T1_CLK_OUT" 2 220 "8"
d G "T1_DIV_BY_1" 2 222 "0"
d G "T1_DIV_BY_2" 2 223 "0x10"
d G "T1_DIV_BY_4" 2 224 "0x20"
d G "T1_DIV_BY_8" 2 225 "0x30"
c L "set_timer1" 2 3 3 "FUNCTION"
f N "setup_timer_2" 2 230 ""
v L "mode" 2 230 "int8" `121 
v L "period" 2 230 "int8" `122 
v L "postscale" 2 230 "int8" `123 
f B "setup_timer_2" 2 230 "void(int8 mode,int8 period,int8 postscale)" `120 
f N "get_timer2" 2 231 ""
f B "get_timer2" 2 231 "int8()" `124 
f N "set_timer2" 2 232 ""
v L "value" 2 232 "int8" `126 
f B "set_timer2" 2 232 "void(int8 value)" `125  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 2 234 "0"
d G "T2_DIV_BY_1" 2 235 "4"
d G "T2_DIV_BY_4" 2 236 "5"
d G "T2_DIV_BY_16" 2 237 "6"
c L "set_timer2" 2 3 3 "FUNCTION"
f N "setup_timer_3" 2 242 ""
v L "mode" 2 242 "int16" `128 
f B "setup_timer_3" 2 242 "void(int16 mode)" `127 
f N "get_timer3" 2 243 ""
f B "get_timer3" 2 243 "int16()" `129 
f N "set_timer3" 2 244 ""
v L "value" 2 244 "int16" `131 
f B "set_timer3" 2 244 "void(int16 value)" `130  "Constants used for SETUP_TIMER_3() are:"
d G "T3_DISABLED" 2 247 "0"
d G "T3_INTERNAL" 2 248 "0x85"
d G "T3_EXTERNAL" 2 249 "0x87"
d G "T3_EXTERNAL_SYNC" 2 250 "0x83"
d G "T3_DIV_BY_1" 2 252 "0"
d G "T3_DIV_BY_2" 2 253 "0x10"
d G "T3_DIV_BY_4" 2 254 "0x20"
d G "T3_DIV_BY_8" 2 255 "0x30"
d G "T3_CCP2" 2 258 "0x8"
c L "set_timer3" 2 3 4 "FUNCTION"
f N "setup_ccp1" 2 264 ""
v L "mode" 2 264 "int32" `133 
f B "setup_ccp1" 2 264 "void(int32 mode)" `132 
f N "setup_ccp1" 2 265 ""
v L "mode" 2 265 "int32" `135 
v L "pwm" 2 265 "int8" `136 
f B "setup_ccp1" 2 265 "void(int32 mode,int8 pwm)" `134 
f N "set_pwm1_duty" 2 266 ""
v L "value" 2 266 "int16" `138 
f B "set_pwm1_duty" 2 266 "void(int16 value)" `137  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 2 268 "0"
d G "CCP_CAPTURE_FE" 2 269 "0x04"
d G "CCP_CAPTURE_RE" 2 270 "0x05"
d G "CCP_CAPTURE_DIV_4" 2 271 "0x06"
d G "CCP_CAPTURE_DIV_16" 2 272 "0x07"
d G "CCP_COMPARE_SET_ON_MATCH" 2 273 "0x08"
d G "CCP_COMPARE_CLR_ON_MATCH" 2 274 "0x09"
d G "CCP_COMPARE_INT" 2 275 "0x0A"
d G "CCP_COMPARE_INT_AND_TOGGLE" 2 276 "0x02"
d G "CCP_COMPARE_RESET_TIMER" 2 277 "0x0B"
d G "CCP_PWM" 2 278 "0x0C"
d G "CCP_PWM_PLUS_1" 2 279 "0x1c"
d G "CCP_PWM_PLUS_2" 2 280 "0x2c"
d G "CCP_PWM_PLUS_3" 2 281 "0x3c"
c L "set_pwm1_duty" 2 3 1 "FUNCTION"
d G "CCP_PWM_H_H" 2 288 "0x0c"
d G "CCP_PWM_H_L" 2 289 "0x0d"
d G "CCP_PWM_L_H" 2 290 "0x0e"
d G "CCP_PWM_L_L" 2 291 "0x0f"
d G "CCP_PWM_FULL_BRIDGE" 2 293 "0x40"
d G "CCP_PWM_FULL_BRIDGE_REV" 2 294 "0xC0"
d G "CCP_PWM_HALF_BRIDGE" 2 295 "0x80"
d G "CCP_SHUTDOWN_ON_COMP1" 2 297 "0x100000"
d G "CCP_SHUTDOWN_ON_COMP2" 2 298 "0x200000"
d G "CCP_SHUTDOWN_ON_COMP" 2 299 "0x300000"
d G "CCP_SHUTDOWN_ON_INT0" 2 300 "0x400000"
d G "CCP_SHUTDOWN_ON_COMP1_INT0" 2 301 "0x500000"
d G "CCP_SHUTDOWN_ON_COMP2_INT0" 2 302 "0x600000"
d G "CCP_SHUTDOWN_ON_COMP_INT0" 2 303 "0x700000"
d G "CCP_SHUTDOWN_AC_L" 2 305 "0x000000"
d G "CCP_SHUTDOWN_AC_H" 2 306 "0x040000"
d G "CCP_SHUTDOWN_AC_F" 2 307 "0x080000"
d G "CCP_SHUTDOWN_BD_L" 2 309 "0x000000"
d G "CCP_SHUTDOWN_BD_H" 2 310 "0x010000"
d G "CCP_SHUTDOWN_BD_F" 2 311 "0x020000"
d G "CCP_SHUTDOWN_RESTART" 2 313 "0x80000000"
d G "CCP_PULSE_STEERING_A" 2 315 "0x01000000"
d G "CCP_PULSE_STEERING_B" 2 316 "0x02000000"
d G "CCP_PULSE_STEERING_C" 2 317 "0x04000000"
d G "CCP_PULSE_STEERING_D" 2 318 "0x08000000"
d G "CCP_PULSE_STEERING_SYNC" 2 319 "0x10000000"
c L "set_pwm1_duty" 2 3 1 "FUNCTION"
f N "setup_ccp2" 2 323 ""
v L "mode" 2 323 "int32" `143 
f B "setup_ccp2" 2 323 "void(int32 mode)" `142 
f N "setup_ccp2" 2 324 ""
v L "mode" 2 324 "int32" `145 
v L "pwm" 2 324 "int8" `146 
f B "setup_ccp2" 2 324 "void(int32 mode,int8 pwm)" `144 
f N "set_pwm2_duty" 2 325 ""
v L "value" 2 325 "int16" `148 
f B "set_pwm2_duty" 2 325 "void(int16 value)" `147 
c L "set_pwm2_duty" 2 3 1 "FUNCTION"
f N "setup_ccp3" 2 331 ""
v L "mode" 2 331 "int32" `153 
f B "setup_ccp3" 2 331 "void(int32 mode)" `152 
f N "setup_ccp3" 2 332 ""
v L "mode" 2 332 "int32" `155 
v L "pwm" 2 332 "int8" `156 
f B "setup_ccp3" 2 332 "void(int32 mode,int8 pwm)" `154 
f N "set_pwm3_duty" 2 333 ""
v L "value" 2 333 "int16" `158 
f B "set_pwm3_duty" 2 333 "void(int16 value)" `157 
c L "set_pwm3_duty" 2 3 1 "FUNCTION"
f N "setup_ccp4" 2 339 ""
v L "mode" 2 339 "int32" `163 
f B "setup_ccp4" 2 339 "void(int32 mode)" `162 
f N "setup_ccp4" 2 340 ""
v L "mode" 2 340 "int32" `165 
v L "pwm" 2 340 "int8" `166 
f B "setup_ccp4" 2 340 "void(int32 mode,int8 pwm)" `164 
f N "set_pwm4_duty" 2 341 ""
v L "value" 2 341 "int16" `168 
f B "set_pwm4_duty" 2 341 "void(int16 value)" `167 
c L "set_pwm4_duty" 2 3 3 "FUNCTION"
f N "setup_spi" 2 348 ""
v L "mode" 2 348 "int32" `173 
f B "setup_spi" 2 348 "void(int32 mode)" `172 
f N "spi_write" 2 349 ""
v L "value" 2 349 "int8" `175 
f B "spi_write" 2 349 "void(int8 value)" `174 
f N "spi_read" 2 350 ""
f B "spi_read" 2 350 "int8()" `176 
f N "spi_read" 2 351 ""
v L "value" 2 351 "int8" `178 
f B "spi_read" 2 351 "int8(int8 value)" `177 
f N "spi_data_is_in" 2 352 ""
f B "spi_data_is_in" 2 352 "int8()" `179  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 2 354 "0x00"
d G "SPI_MASTER" 2 355 "0x20"
d G "SPI_SLAVE" 2 356 "0x24"
d G "SPI_SCK_IDLE_HIGH" 2 357 "0x10"
d G "SPI_SCK_IDLE_LOW" 2 358 "0x00"
d G "SPI_CLK_DIV_4" 2 359 "0x00"
d G "SPI_CLK_DIV_16" 2 360 "0x01"
d G "SPI_CLK_DIV_64" 2 361 "0x02"
d G "SPI_CLK_T2" 2 362 "0x03"
d G "SPI_SS_DISABLED" 2 363 "0x01"
d G "SPI_XMIT_L_TO_H" 2 365 "0x4000"
d G "SPI_XMIT_H_TO_L" 2 366 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 2 368 "0x0000"
d G "SPI_SAMPLE_AT_END" 2 369 "0x8000"
d G "SPI_L_TO_H" 2 372 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 2 373 "SPI_SCK_IDLE_HIGH"
c L "spi_data_is_in" 2 3 2 "FUNCTION"
f N "setup_uart" 2 377 ""
v L "baud" 2 377 "int32" `181 
f B "setup_uart" 2 377 "void(int32 baud)" `180 
f N "setup_uart" 2 378 ""
v L "baud" 2 378 "int32" `183 
v L "stream" 2 378 "int8" `184 
f B "setup_uart" 2 378 "void(int32 baud,int8 stream)" `182 
f N "setup_uart" 2 379 ""
v L "baud" 2 379 "int32" `186 
v L "stream" 2 379 "int8" `187 
v L "clock" 2 379 "int32" `188 
f B "setup_uart" 2 379 "void(int32 baud,int8 stream,int32 clock)" `185 
f N "set_uart_speed" 2 380 ""
v L "baud" 2 380 "int32" `190 
f B "set_uart_speed" 2 380 "void(int32 baud)" `189 
f N "set_uart_speed" 2 381 ""
v L "baud" 2 381 "int32" `192 
v L "stream" 2 381 "int8" `193 
f B "set_uart_speed" 2 381 "void(int32 baud,int8 stream)" `191 
f N "set_uart_speed" 2 382 ""
v L "baud" 2 382 "int32" `195 
v L "stream" 2 382 "int8" `196 
v L "clock" 2 382 "int32" `197 
f B "set_uart_speed" 2 382 "void(int32 baud,int8 stream,int32 clock)" `194  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 2 386 "2"
d G "UART_DATA" 2 387 "4"
d G "UART_AUTODETECT" 2 388 "8"
d G "UART_AUTODETECT_NOWAIT" 2 389 "9"
d G "UART_WAKEUP_ON_RDA" 2 390 "10"
d G "UART_SEND_BREAK" 2 391 "13"
c L "set_uart_speed" 2 3 3 "FUNCTION"
f N "setup_comparator" 2 395 ""
v L "mode" 2 395 "int32" `199 
f B "setup_comparator" 2 395 "void(int32 mode)" `198  "Constants used in setup_comparator() are:"
d G "NC_NC_NC_NC" 2 398 "0x404"
d G "NC_NC" 2 399 "0x404"
d G "CP1_A1_A0" 2 402 "0x00000080"
d G "CP1_C1_A0" 2 403 "0x00000081"
d G "CP1_C2_A0" 2 404 "0x00000082"
d G "CP1_C3_A0" 2 405 "0x00000083"
d G "CP1_A1_DAC" 2 406 "0x00000084"
d G "CP1_C1_DAC" 2 407 "0x00000085"
d G "CP1_C2_DAC" 2 408 "0x00000086"
d G "CP1_C3_DAC" 2 409 "0x00000087"
d G "CP1_A1_FVR" 2 410 "0x00200084"
d G "CP1_C1_FVR" 2 411 "0x00200085"
d G "CP1_C2_FVR" 2 412 "0x00200086"
d G "CP1_C3_FVR" 2 413 "0x00200087"
d G "CP1_OUT_ON_A2" 2 415 "0x00000020"
d G "CP1_INVERT" 2 416 "0x00000010"
d G "CP1_FAST" 2 417 "0x00000008"
d G "CP1_HYST" 2 418 "0x00080000"
d G "CP1_SYNC" 2 419 "0x00020000"
d G "CP2_A1_C0" 2 422 "0x00008000"
d G "CP2_C1_C0" 2 423 "0x00008100"
d G "CP2_C2_C0" 2 424 "0x00008200"
d G "CP2_C3_C0" 2 425 "0x00008300"
d G "CP2_A1_VREF" 2 426 "0x00008400"
d G "CP2_C1_VREF" 2 427 "0x00008500"
d G "CP2_C2_VREF" 2 428 "0x00008600"
d G "CP2_C3_VREF" 2 429 "0x00008700"
d G "CP2_A1_FVR" 2 430 "0x00100084"
d G "CP2_C1_FVR" 2 431 "0x00100085"
d G "CP2_C2_FVR" 2 432 "0x00100086"
d G "CP2_C3_FVR" 2 433 "0x00100087"
d G "CP2_OUT_ON_C4" 2 435 "0x00002000"
d G "CP2_INVERT" 2 436 "0x00001000"
d G "CP2_FAST" 2 437 "0x00000800"
d G "CP2_HYST" 2 438 "0x00040000"
d G "CP2_SYNC" 2 439 "0x00010000"
c L "setup_comparator" 2 3 2 "FUNCTION"
f N "setup_vref" 2 446 ""
v L "mode" 2 446 "int8" `203 
f B "setup_vref" 2 446 "void(int8 mode)" `202  "Constants used in setup_vref() are:"
d G "VREF_OFF" 2 448 "0"
d G "VREF_1v024" 2 449 "0x90"
d G "VREF_2v048" 2 450 "0xA0"
d G "VREF_4v096" 2 451 "0xB0"
c L "setup_vref" 2 3 2 "FUNCTION"
f N "setup_low_volt_detect" 2 455 ""
v L "mode" 2 455 "int8" `205 
f B "setup_low_volt_detect" 2 455 "void(int8 mode)" `204  "Constants used in setup_low_volt_detect() are:"
d G "LVD_LVDIN" 2 457 "0x1F"
d G "LVD_45" 2 458 "0x1E"
d G "LVD_42" 2 459 "0x1D"
d G "LVD_40" 2 460 "0x1C"
d G "LVD_38" 2 461 "0x1B"
d G "LVD_36" 2 462 "0x1A"
d G "LVD_35" 2 463 "0x19"
d G "LVD_33" 2 464 "0x18"
d G "LVD_30" 2 465 "0x17"
d G "LVD_28" 2 466 "0x16"
d G "LVD_27" 2 467 "0x15"
d G "LVD_25" 2 468 "0x14"
d G "LVD_24" 2 469 "0x13"
d G "LVD_23" 2 470 "0x12"
d G "LVD_22" 2 471 "0x11"
d G "LVD_21" 2 472 "0x10"
c L "setup_low_volt_detect" 2 3 3 "FUNCTION"
f N "setup_dac" 2 477 ""
v L "mode" 2 477 "int8" `207 
f B "setup_dac" 2 477 "void(int8 mode)" `206 
f N "dac_write" 2 478 ""
v L "value" 2 478 "int8" `209 
f B "dac_write" 2 478 "void(int8 value)" `208  "Constants used in SETUP_DAC() are:"
d G "DAC_OFF" 2 480 "0"
d G "DAC_VSS_VDD" 2 481 "0x80"
d G "DAC_VREF_VDD" 2 482 "0x81"
d G "DAC_VSS_VREF" 2 483 "0x84"
d G "DAC_VREF_VREF" 2 484 "0x85"
d G "DAC_VSS_FVR" 2 485 "0x88"
d G "DAC_VREF_FVR" 2 486 "0x89"
d G "DAC_OUTPUT" 2 488 "0x20"
d G "DAC_LVP_POS" 2 489 "0x40"
d G "DAC_LVP_NEG" 2 490 "0"
c L "dac_write" 2 3 2 "FUNCTION"
f N "setup_oscillator" 2 495 ""
v L "mode" 2 495 "int16" `211 
f B "setup_oscillator" 2 495 "int8(int16 mode)" `210 
f N "setup_oscillator" 2 496 ""
v L "mode" 2 496 "int16" `213 
v L "tune" 2 496 "sint8" `214 
f B "setup_oscillator" 2 496 "int8(int16 mode,sint8 tune)" `212  "Constants used in setup_oscillator() are:"
d G "OSC_PLL_ON" 2 498 "0x4000"
d G "OSC_PLL_OFF" 2 499 "0"
d G "OSC_31250" 2 500 "0x8000"
d G "OSC_31KHZ" 2 501 "0x00"
d G "OSC_250KHZ" 2 502 "0x10"
d G "OSC_500KHZ" 2 503 "0x20"
d G "OSC_1MHZ" 2 504 "0x30"
d G "OSC_2MHZ" 2 505 "0x40"
d G "OSC_4MHZ" 2 506 "0x50"
d G "OSC_8MHZ" 2 507 "0x60"
d G "OSC_16MHZ" 2 508 "0x70"
d G "OSC_32MHZ" 2 509 "0x4060"
d G "OSC_64MHZ" 2 510 "0x4070"
d G "OSC_TIMER1" 2 512 "1"
d G "OSC_INTRC" 2 513 "2"
d G "OSC_NORMAL" 2 514 "0"
d G "OSC_IDLE_MODE" 2 516 "0x80"
d G "OSC_STATE_STABLE" 2 520 "4"
d G "OSC_STATE_EXT_RUNNING" 2 521 "8"
c L "setup_oscillator" 2 3 4 "FUNCTION"
f N "setup_adc" 2 528 ""
v L "mode" 2 528 "int16" `216 
f B "setup_adc" 2 528 "void(int16 mode)" `215 
f N "read_adc" 2 529 ""
f B "read_adc" 2 529 "int8()" `217 
f N "read_adc" 2 530 ""
v L "mode" 2 530 "int8" `219 
f B "read_adc" 2 530 "int8(int8 mode)" `218 
f N "read_adc" 2 531 ""
f G "read_adc" 2 531 "int16()" `220 
f N "read_adc" 2 532 ""
v L "mode" 2 532 "int8" `221 
f G "read_adc" 2 532 "int16(int8 mode,int32 pins)" `220 
f N "adc_done" 2 533 ""
f B "adc_done" 2 533 "int8(int8 mode,int32 pins)" `220  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 2 535 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 2 536 "0x100"
d G "ADC_CLOCK_DIV_4" 2 537 "0x04"
d G "ADC_CLOCK_DIV_8" 2 538 "0x01"
d G "ADC_CLOCK_DIV_16" 2 539 "0x05"
d G "ADC_CLOCK_DIV_32" 2 540 "0x02"
d G "ADC_CLOCK_DIV_64" 2 541 "0x06"
d G "ADC_CLOCK_INTERNAL" 2 542 "0x07" "Internal 2-6us"
d G "ADC_TAD_MUL_0" 2 544 "0x00"
d G "ADC_TAD_MUL_2" 2 545 "0x08"
d G "ADC_TAD_MUL_4" 2 546 "0x10"
d G "ADC_TAD_MUL_6" 2 547 "0x18"
d G "ADC_TAD_MUL_8" 2 548 "0x20"
d G "ADC_TAD_MUL_12" 2 549 "0x28"
d G "ADC_TAD_MUL_16" 2 550 "0x30"
d G "ADC_TAD_MUL_20" 2 551 "0x38"
c L "adc_done" 2 3 1 "FUNCTION"
f N "setup_adc_ports" 2 554 ""
v L "pins" 2 554 "int32" `222 
f B "setup_adc_ports" 2 554 "void(int32 pins)" `221 
f N "setup_adc_ports" 2 555 ""
v L "pins" 2 555 "int32" `224 
v L "reference" 2 555 "int32" `225 
f B "setup_adc_ports" 2 555 "void(int32 pins,int32 reference)" `223 
f N "set_analog_pins" 2 556 ""
v L "pins" 2 556 "int32" `227 
f B "set_analog_pins" 2 556 "void(int32 pins)" `226 
f N "set_analog_pins" 2 557 ""
v L "pins" 2 557 "int32" `229 
v L "reference" 2 557 "int32" `230 
f B "set_analog_pins" 2 557 "void(int32 pins,int32 reference)" `228 
f N "set_adc_channel" 2 558 ""
v L "channel" 2 558 "int8" `232 
f B "set_adc_channel" 2 558 "void(int8 channel)" `231  "Constants used in SETUP_ADC_PORTS() and SET_ANALOG_PINS() are:"
d G "sAN0" 2 562 "0x10000" "| A0"
d G "sAN1" 2 563 "0x20000" "| A1"
d G "sAN2" 2 564 "0x40000" "| A2"
d G "sAN3" 2 565 "0x80000" "| A4"
d G "sAN4" 2 566 "0x100000" "| C0"
d G "sAN5" 2 567 "0x200000" "| C1"
d G "sAN6" 2 568 "0x400000" "| C2"
d G "sAN7" 2 569 "0x800000" "| C3"
d G "sAN8" 2 570 "0x1" "| C6"
d G "sAN9" 2 571 "0x2" "| C7"
d G "sAN10" 2 572 "0x4" "| B4"
d G "sAN11" 2 573 "0x8" "| B5"
d G "NO_ANALOGS" 2 574 "0" "None"
d G "ALL_ANALOG" 2 575 "0xF00FF" "A0 A1 A2 A4 C0 C1 C2 C3 C6 C7 B4 B5"
d G "VSS_VDD" 2 578 "0x000" "| Range 0-Vdd"
d G "VSS_FVR" 2 579 "0x800" "| Range 0-FVR"
d G "VREF_VREF" 2 580 "0x500" "| Range VrefL-VrefH"
d G "VSS_VREF" 2 581 "0x400" "| Range 0-VrefH"
d G "VREF_VDD" 2 582 "0x100" "| Range VrefL-Vdd"
d G "DAC_CHANNEL" 2 586 "14"
d G "FVR_CHANNEL" 2 587 "15"
d G "ADC_START_AND_READ" 2 590 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 2 591 "1"
d G "ADC_READ_ONLY" 2 592 "6"
c L "set_adc_channel" 2 3 3 "FUNCTION"
f N "abs" 2 598 ""
v L "x" 2 598 "sint8" `234 
f B "abs" 2 598 "sint8(sint8 x)" `233 
f N "abs" 2 599 ""
v L "x" 2 599 "sint16" `236 
f B "abs" 2 599 "sint16(sint16 x)" `235 
f N "abs" 2 600 ""
v L "x" 2 600 "sint32" `238 
f B "abs" 2 600 "sint32(sint32 x)" `237 
f N "abs" 2 601 ""
v L "x" 2 601 "float" `240 
f B "abs" 2 601 "float(float x)" `239 
f N "_mul" 2 602 ""
v L "??65535" 2 602 "int8" `242 
v L "??65535" 2 602 "int8" `243 
f B "_mul" 2 602 "int16(int8 ,int8 )" `241 
f N "_mul" 2 603 ""
v L "??65535" 2 603 "sint8" `245 
v L "??65535" 2 603 "sint8" `246 
f B "_mul" 2 603 "sint16(sint8 ,sint8 )" `244 
f N "_mul" 2 604 ""
v L "??65535" 2 604 "int16" `248 
v L "??65535" 2 604 "int16" `249 
f B "_mul" 2 604 "int32(int16 ,int16 )" `247 
f N "_mul" 2 605 ""
v L "??65535" 2 605 "sint16" `251 
v L "??65535" 2 605 "sint16" `252 
f B "_mul" 2 605 "sint32(sint16 ,sint16 )" `250  "Memory Manipulation Prototypes:"
f N "read_bank" 2 608 ""
v L "bank" 2 608 "int8" `254 
v L "offset" 2 608 "int8" `255 
f B "read_bank" 2 608 "int8(int8 bank,int8 offset)" `253 
f N "write_bank" 2 609 ""
v L "bank" 2 609 "int8" `257 
v L "offset" 2 609 "int8" `258 
v L "value" 2 609 "int8" `259 
f B "write_bank" 2 609 "void(int8 bank,int8 offset,int8 value)" `256 
f N "strcpy" 2 610 ""
v L "dest" 2 610 "*int8" `261 
v L "src" 2 610 "*int8" `262 
f B "strcpy" 2 610 "void(*int8 dest,*int8 src)" `260 
f N "memset" 2 611 ""
v L "destination" 2 611 "*int8" `264 
v L "value" 2 611 "int8" `265 
v L "num" 2 611 "int16" `266 
f B "memset" 2 611 "void(*int8 destination,int8 value,int16 num)" `263 
f N "memcpy" 2 612 ""
v L "destination" 2 612 "*int8" `268 
v L "source" 2 612 "*int8" `269 
v L "num" 2 612 "int16" `270 
f B "memcpy" 2 612 "void(*int8 destination,*int8 source,int16 num)" `267  "String Prototypes:"
f N "toupper" 2 615 ""
v L "cvalue" 2 615 "int8" `272 
f B "toupper" 2 615 "int8(int8 cvalue)" `271 
f N "tolower" 2 616 ""
v L "cvalue" 2 616 "int8" `274 
f B "tolower" 2 616 "int8(int8 cvalue)" `273 
f N "sprintf" 2 617 ""
v L "string" 2 617 "*int8" `276 
v L "cstring" 2 617 "*int8" `277 
f B "sprintf" 2 617 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `275  "Data Manipulators Prototypes:"
f N "shift_left" 2 620 ""
v L "address" 2 620 "*int8" `280 
v L "bytes" 2 620 "int8" `281 
v L "value" 2 620 "int8" `282 
f B "shift_left" 2 620 "int8(*int8 address,int8 bytes,int8 value)" `279 
f N "shift_right" 2 621 ""
v L "address" 2 621 "*int8" `284 
v L "bytes" 2 621 "int8" `285 
v L "value" 2 621 "int8" `286 
f B "shift_right" 2 621 "int8(*int8 address,int8 bytes,int8 value)" `283 
f N "rotate_left" 2 622 ""
v L "address" 2 622 "*int8" `288 
v L "bytes" 2 622 "int8" `289 
f B "rotate_left" 2 622 "void(*int8 address,int8 bytes)" `287 
f N "rotate_right" 2 623 ""
v L "address" 2 623 "*int8" `291 
v L "bytes" 2 623 "int8" `292 
f B "rotate_right" 2 623 "void(*int8 address,int8 bytes)" `290 
f N "swap" 2 624 ""
v L "value" 2 624 "int8" `294 
f B "swap" 2 624 "void(int8 value)" `293 
f N "make8" 2 625 ""
v L "var" 2 625 "int16" `296 
v L "offset" 2 625 "int8" `297 
f B "make8" 2 625 "int8(int16 var,int8 offset)" `295 
f N "make8" 2 626 ""
v L "var" 2 626 "int32" `299 
v L "offset" 2 626 "int8" `300 
f B "make8" 2 626 "int8(int32 var,int8 offset)" `298 
f N "make16" 2 627 ""
v L "varhigh" 2 627 "int8" `302 
v L "varlow" 2 627 "int8" `303 
f B "make16" 2 627 "int16(int8 varhigh,int8 varlow)" `301 
f N "make32" 2 628 ""
v L "var1" 2 628 "int16" `305 
f B "make32" 2 628 "int32(int16 var1)" `304 
f N "make32" 2 629 ""
v L "var1" 2 629 "int16" `307 
v L "var2" 2 629 "int16" `308 
f B "make32" 2 629 "int32(int16 var1,int16 var2)" `306 
f N "make32" 2 630 ""
v L "var1" 2 630 "int16" `310 
v L "var2" 2 630 "int8" `311 
f B "make32" 2 630 "int32(int16 var1,int8 var2)" `309 
f N "make32" 2 631 ""
v L "var1" 2 631 "int16" `313 
v L "var2" 2 631 "int8" `314 
v L "var3" 2 631 "int8" `315 
f B "make32" 2 631 "int32(int16 var1,int8 var2,int8 var3)" `312 
f N "make32" 2 632 ""
v L "var1" 2 632 "int8" `317 
f B "make32" 2 632 "int32(int8 var1)" `316 
f N "make32" 2 633 ""
v L "var1" 2 633 "int8" `319 
v L "var2" 2 633 "int8" `320 
f B "make32" 2 633 "int32(int8 var1,int8 var2)" `318 
f N "make32" 2 634 ""
v L "var1" 2 634 "int8" `322 
v L "var2" 2 634 "int8" `323 
v L "var3" 2 634 "int8" `324 
f B "make32" 2 634 "int32(int8 var1,int8 var2,int8 var3)" `321 
f N "make32" 2 635 ""
v L "var1" 2 635 "int8" `326 
v L "var2" 2 635 "int8" `327 
v L "var3" 2 635 "int8" `328 
v L "var4" 2 635 "int8" `329 
f B "make32" 2 635 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `325 
f N "make32" 2 636 ""
v L "var1" 2 636 "int8" `331 
v L "var2" 2 636 "int16" `332 
f B "make32" 2 636 "int32(int8 var1,int16 var2)" `330 
f N "make32" 2 637 ""
v L "var1" 2 637 "int8" `334 
v L "var2" 2 637 "int16" `335 
v L "var3" 2 637 "int8" `336 
f B "make32" 2 637 "int32(int8 var1,int16 var2,int8 var3)" `333 
f N "make32" 2 638 ""
v L "var1" 2 638 "int8" `338 
v L "var2" 2 638 "int8" `339 
v L "var3" 2 638 "int16" `340 
f B "make32" 2 638 "int32(int8 var1,int8 var2,int16 var3)" `337 
f N "bit_set" 2 639 ""
v L "var" 2 639 "int8" `342 
v L "bit" 2 639 "int8" `343 
f B "bit_set" 2 639 "void(int8 var,int8 bit)" `341 
f N "bit_set" 2 640 ""
v L "var" 2 640 "int16" `345 
v L "bit" 2 640 "int8" `346 
f B "bit_set" 2 640 "void(int16 var,int8 bit)" `344 
f N "bit_set" 2 641 ""
v L "var" 2 641 "int32" `348 
v L "bit" 2 641 "int8" `349 
f B "bit_set" 2 641 "void(int32 var,int8 bit)" `347 
f N "bit_clear" 2 642 ""
v L "var" 2 642 "int8" `351 
v L "bit" 2 642 "int8" `352 
f B "bit_clear" 2 642 "void(int8 var,int8 bit)" `350 
f N "bit_clear" 2 643 ""
v L "var" 2 643 "int16" `354 
v L "bit" 2 643 "int8" `355 
f B "bit_clear" 2 643 "void(int16 var,int8 bit)" `353 
f N "bit_clear" 2 644 ""
v L "var" 2 644 "int32" `357 
v L "bit" 2 644 "int8" `358 
f B "bit_clear" 2 644 "void(int32 var,int8 bit)" `356 
f N "bit_test" 2 645 ""
v L "var" 2 645 "int8" `360 
v L "bit" 2 645 "int8" `361 
f B "bit_test" 2 645 "int8(int8 var,int8 bit)" `359 
f N "bit_test" 2 646 ""
v L "var" 2 646 "int16" `363 
v L "bit" 2 646 "int8" `364 
f B "bit_test" 2 646 "int8(int16 var,int8 bit)" `362 
f N "bit_test" 2 647 ""
v L "var" 2 647 "int32" `366 
v L "bit" 2 647 "int8" `367 
f B "bit_test" 2 647 "int8(int32 var,int8 bit)" `365  "#use delay() Prototypes:"
f N "delay_cycles" 2 650 ""
v L "count" 2 650 "int8" `369 
f B "delay_cycles" 2 650 "void(int8 count)" `368 
f N "delay_ms" 2 651 ""
v L "time" 2 651 "int16" `371 
f B "delay_ms" 2 651 "void(int16 time)" `370 
f N "delay_us" 2 652 ""
v L "time" 2 652 "int16" `373 
f B "delay_us" 2 652 "void(int16 time)" `372  "#use rs232() Prototypes:"
f N "putchar" 2 655 ""
v L "cdata" 2 655 "int8" `375 
f B "putchar" 2 655 "void(int8 cdata)" `374 
f N "putchar" 2 656 ""
v L "cdata" 2 656 "int8" `377 
v L "stream" 2 656 "int8" `378 
f B "putchar" 2 656 "void(int8 cdata,int8 stream)" `376 
f N "puts" 2 657 ""
v L "string" 2 657 "*int8" `380 
f B "puts" 2 657 "void(*int8 string)" `379 
f N "puts" 2 658 ""
v L "string" 2 658 "*int8" `382 
v L "stream" 2 658 "int8" `383 
f B "puts" 2 658 "void(*int8 string,int8 stream)" `381 
f N "getch" 2 659 ""
f B "getch" 2 659 "int8()" `384 
f N "getch" 2 660 ""
v L "stream" 2 660 "int8" `386 
f B "getch" 2 660 "int8(int8 stream)" `385 
f N "gets" 2 661 ""
v L "string" 2 661 "*int8" `388 
f B "gets" 2 661 "void(*int8 string)" `387 
f N "gets" 2 662 ""
v L "string" 2 662 "*int8" `390 
v L "stream" 2 662 "int8" `391 
f B "gets" 2 662 "void(*int8 string,int8 stream)" `389 
f N "kbhit" 2 663 ""
f B "kbhit" 2 663 "int8()" `392 
f N "kbhit" 2 664 ""
v L "stream" 2 664 "int8" `394 
f B "kbhit" 2 664 "int8(int8 stream)" `393 
f N "printf" 2 665 ""
v L "string" 2 665 "*int8" `396 
f B "printf" 2 665 "void(*int8 string,*int8 _VA_LIST)" `395 
f N "fprintf" 2 666 ""
v L "stream" 2 666 "int8" `399 
v L "string" 2 666 "*int8" `400 
f B "fprintf" 2 666 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `398 
f N "putc_send" 2 667 ""
f B "putc_send" 2 667 "void()" `402 
f N "fputc_send" 2 668 ""
v L "stream" 2 668 "int8" `404 
f B "fputc_send" 2 668 "void(int8 stream)" `403 
f N "rcv_buffer_full" 2 669 ""
f B "rcv_buffer_full" 2 669 "int8()" `405 
f N "rcv_buffer_full" 2 670 ""
v L "stream" 2 670 "int8" `407 
f B "rcv_buffer_full" 2 670 "int8(int8 stream)" `406 
f N "rcv_buffer_bytes" 2 671 ""
f B "rcv_buffer_bytes" 2 671 "int16()" `408 
f N "rcv_buffer_bytes" 2 672 ""
v L "stream" 2 672 "int8" `410 
f B "rcv_buffer_bytes" 2 672 "int16(int8 stream)" `409 
f N "tx_buffer_full" 2 673 ""
f B "tx_buffer_full" 2 673 "int8()" `411 
f N "tx_buffer_full" 2 674 ""
v L "stream" 2 674 "int8" `413 
f B "tx_buffer_full" 2 674 "int8(int8 stream)" `412 
f N "tx_buffer_bytes" 2 675 ""
f B "tx_buffer_bytes" 2 675 "int16()" `414 
f N "tx_buffer_bytes" 2 676 ""
v L "stream" 2 676 "int8" `416 
f B "tx_buffer_bytes" 2 676 "int16(int8 stream)" `415  "#use i2c() Prototypes:"
f N "i2c_read" 2 679 ""
f B "i2c_read" 2 679 "int8()" `417 
f N "i2c_read" 2 680 ""
v L "ack" 2 680 "int8" `419 
f B "i2c_read" 2 680 "int8(int8 ack)" `418 
f N "i2c_read" 2 681 ""
v L "stream" 2 681 "int8" `421 
v L "ack" 2 681 "int8" `422 
f B "i2c_read" 2 681 "int8(int8 stream,int8 ack)" `420 
f N "i2c_write" 2 682 ""
v L "data" 2 682 "int8" `424 
f B "i2c_write" 2 682 "int8(int8 data)" `423 
f N "i2c_write" 2 683 ""
v L "stream" 2 683 "int8" `426 
v L "data" 2 683 "int8" `427 
f B "i2c_write" 2 683 "int8(int8 stream,int8 data)" `425 
f N "i2c_start" 2 684 ""
f B "i2c_start" 2 684 "void()" `428 
f N "i2c_start" 2 685 ""
v L "stream" 2 685 "int8" `430 
f B "i2c_start" 2 685 "void(int8 stream)" `429 
f N "i2c_start" 2 686 ""
v L "stream" 2 686 "int8" `432 
v L "restart" 2 686 "int8" `433 
f B "i2c_start" 2 686 "void(int8 stream,int8 restart)" `431 
f N "i2c_stop" 2 687 ""
f B "i2c_stop" 2 687 "void()" `434 
f N "i2c_stop" 2 688 ""
v L "stream" 2 688 "int8" `436 
f B "i2c_stop" 2 688 "void(int8 stream)" `435 
f N "i2c_isr_state" 2 689 ""
f B "i2c_isr_state" 2 689 "int8()" `437 
f N "i2c_slaveaddr" 2 690 ""
v L "addr" 2 690 "int8" `439 
f B "i2c_slaveaddr" 2 690 "void(int8 addr)" `438 
f N "i2c_slaveaddr" 2 691 ""
v L "stream" 2 691 "int8" `441 
v L "addr" 2 691 "int8" `442 
f B "i2c_slaveaddr" 2 691 "void(int8 stream,int8 addr)" `440 
f N "i2c_poll" 2 692 ""
f B "i2c_poll" 2 692 "int8()" `443 
f N "i2c_poll" 2 693 ""
v L "stream" 2 693 "int8" `445 
f B "i2c_poll" 2 693 "int8(int8 stream)" `444 
f N "i2c_init" 2 694 ""
v L "baud" 2 694 "int32" `447 
f B "i2c_init" 2 694 "void(int32 baud)" `446 
f N "i2c_init" 2 695 ""
v L "stream" 2 695 "int8" `449 
v L "baud" 2 695 "int32" `450 
f B "i2c_init" 2 695 "void(int8 stream,int32 baud)" `448  "#use spi() Prototypes:"
f N "spi_xfer" 2 698 ""
f B "spi_xfer" 2 698 "int8()" `451 
f N "spi_xfer" 2 699 ""
f G "spi_xfer" 2 699 "int16(int8 data)" `452 
f N "spi_xfer" 2 700 ""
f G "spi_xfer" 2 700 "int32(int8 data)" `452 
f N "spi_xfer" 2 701 ""
v L "data" 2 701 "int8" `453 
f B "spi_xfer" 2 701 "int8(int8 data)" `452 
f N "spi_xfer" 2 702 ""
v L "data" 2 702 "int16" `455 
f B "spi_xfer" 2 702 "int16(int16 data)" `454 
f N "spi_xfer" 2 703 ""
v L "data" 2 703 "int32" `457 
f B "spi_xfer" 2 703 "int32(int32 data)" `456 
f N "spi_xfer" 2 704 ""
v L "stream" 2 704 "int8" `459 
v L "data" 2 704 "int8" `460 
f B "spi_xfer" 2 704 "int8(int8 stream,int8 data)" `458 
f N "spi_xfer" 2 705 ""
v L "stream" 2 705 "int8" `462 
v L "data" 2 705 "int16" `463 
f B "spi_xfer" 2 705 "int16(int8 stream,int16 data)" `461 
f N "spi_xfer" 2 706 ""
v L "stream" 2 706 "int8" `465 
v L "data" 2 706 "int32" `466 
f B "spi_xfer" 2 706 "int32(int8 stream,int32 data)" `464 
f N "spi_xfer" 2 707 ""
v L "stream" 2 707 "int8" `468 
v L "data" 2 707 "int8" `469 
v L "bits" 2 707 "int8" `470 
f B "spi_xfer" 2 707 "int8(int8 stream,int8 data,int8 bits)" `467 
f N "spi_xfer" 2 708 ""
v L "stream" 2 708 "int8" `472 
v L "data" 2 708 "int16" `473 
v L "bits" 2 708 "int8" `474 
f B "spi_xfer" 2 708 "int16(int8 stream,int16 data,int8 bits)" `471 
f N "spi_xfer" 2 709 ""
v L "stream" 2 709 "int8" `476 
v L "data" 2 709 "int32" `477 
v L "bits" 2 709 "int8" `478 
f B "spi_xfer" 2 709 "int32(int8 stream,int32 data,int8 bits)" `475 
f N "spi_init" 2 710 ""
v L "baud" 2 710 "int32" `480 
f B "spi_init" 2 710 "void(int32 baud)" `479 
f N "spi_init" 2 711 ""
v L "stream" 2 711 "int8" `482 
v L "baud" 2 711 "int32" `483 
f B "spi_init" 2 711 "void(int8 stream,int32 baud)" `481 
f N "spi_speed" 2 712 ""
v L "baud" 2 712 "int32" `485 
f B "spi_speed" 2 712 "void(int32 baud)" `484 
f N "spi_speed" 2 713 ""
v L "stream" 2 713 "int8" `487 
v L "baud" 2 713 "int32" `488 
f B "spi_speed" 2 713 "void(int8 stream,int32 baud)" `486 
f N "spi_speed" 2 714 ""
v L "stream" 2 714 "int8" `490 
v L "baud" 2 714 "int32" `491 
v L "clock" 2 714 "int32" `492 
f B "spi_speed" 2 714 "void(int8 stream,int32 baud,int32 clock)" `489 
f N "spi_prewrite" 2 715 ""
v L "data" 2 715 "int8" `494 
f B "spi_prewrite" 2 715 "void(int8 data)" `493 
f N "spi_prewrite" 2 716 ""
v L "data" 2 716 "int16" `496 
f B "spi_prewrite" 2 716 "void(int16 data)" `495 
f N "spi_prewrite" 2 717 ""
v L "data" 2 717 "int32" `498 
f B "spi_prewrite" 2 717 "void(int32 data)" `497 
f N "spi_prewrite" 2 718 ""
v L "??65535" 2 718 "int8" `500 
v L "data" 2 718 "int8" `501 
f B "spi_prewrite" 2 718 "void(int8 ,int8 data)" `499 
f N "spi_prewrite" 2 719 ""
v L "??65535" 2 719 "int8" `503 
v L "data" 2 719 "int16" `504 
f B "spi_prewrite" 2 719 "void(int8 ,int16 data)" `502 
f N "spi_prewrite" 2 720 ""
v L "??65535" 2 720 "int8" `506 
v L "data" 2 720 "int32" `507 
f B "spi_prewrite" 2 720 "void(int8 ,int32 data)" `505 
f N "spi_xfer_in" 2 721 ""
f B "spi_xfer_in" 2 721 "int8()" `508 
f N "spi_xfer_in" 2 722 ""
f G "spi_xfer_in" 2 722 "int16(int8 bits)" `509 
f N "spi_xfer_in" 2 723 ""
f G "spi_xfer_in" 2 723 "int32(int8 bits)" `509 
f N "spi_xfer_in" 2 724 ""
v L "bits" 2 724 "int8" `510 
f B "spi_xfer_in" 2 724 "int8(int8 bits)" `509 
f N "spi_xfer_in" 2 725 ""
v L "bits" 2 725 "int8" `512 
f G "spi_xfer_in" 2 725 "int16(int8 bits,int8 bits)" `511 
f N "spi_xfer_in" 2 726 ""
v L "bits" 2 726 "int8" `512 
f G "spi_xfer_in" 2 726 "int32(int8 bits,int8 bits)" `511 
f N "spi_xfer_in" 2 727 ""
v L "stream" 2 727 "int8" `512 
v L "bits" 2 727 "int8" `513 
f B "spi_xfer_in" 2 727 "int8(int8 stream,int8 bits)" `511 
f N "spi_xfer_in" 2 728 ""
v L "stream" 2 728 "int8" `512 
v L "bits" 2 728 "int8" `516 
f G "spi_xfer_in" 2 728 "int16(int8 stream,int8 bits,int8 task)" `514 
f N "spi_xfer_in" 2 729 ""
v L "stream" 2 729 "int8" `512 
v L "bits" 2 729 "int8" `516 
f G "spi_xfer_in" 2 729 "int32(int8 stream,int8 bits,int8 task)" `514  "#use rtos() Prototypes:"
f N "rtos_run" 2 732 ""
f B "rtos_run" 2 732 "void(int8 stream,int8 bits,int8 task)" `514 
f N "rtos_yield" 2 733 ""
f B "rtos_yield" 2 733 "void(int8 bits,int8 task)" `515 
f N "rtos_enable" 2 734 ""
v L "task" 2 734 "int8" `517 
f B "rtos_enable" 2 734 "void(int8 task)" `516 
f N "rtos_disable" 2 735 ""
v L "task" 2 735 "int8" `519 
f B "rtos_disable" 2 735 "void(int8 task)" `518 
f N "rtos_terminate" 2 736 ""
f B "rtos_terminate" 2 736 "void()" `520 
f N "rtos_await" 2 737 ""
v L "flag" 2 737 "int8" `522 
f B "rtos_await" 2 737 "void(int8 flag)" `521 
f N "rtos_wait" 2 738 ""
v L "sem" 2 738 "int8" `524 
f B "rtos_wait" 2 738 "void(int8 sem)" `523 
f N "rtos_signal" 2 739 ""
v L "sem" 2 739 "int8" `526 
f B "rtos_signal" 2 739 "void(int8 sem)" `525 
f N "rtos_msg_send" 2 740 ""
v L "task" 2 740 "int8" `528 
v L "msg" 2 740 "int8" `529 
f B "rtos_msg_send" 2 740 "void(int8 task,int8 msg)" `527 
f N "rtos_msg_read" 2 741 ""
f B "rtos_msg_read" 2 741 "int8()" `530 
f N "rtos_msg_poll" 2 742 ""
f B "rtos_msg_poll" 2 742 "int8()" `531 
f N "rtos_overrun" 2 743 ""
v L "task" 2 743 "int8" `533 
f B "rtos_overrun" 2 743 "int8(int8 task)" `532 
f N "rtos_stats" 2 744 ""
v L "task" 2 744 "int8" `535 
v L "stat" 2 744 "*int8" `536 
f B "rtos_stats" 2 744 "void(int8 task,*int8 stat)" `534  "#use timer() Prototypes:"
f N "get_ticks" 2 747 ""
f B "get_ticks" 2 747 "int8()" `537 
f N "get_ticks" 2 748 ""
f G "get_ticks" 2 748 "int16(int8 stream)" `538 
f N "get_ticks" 2 749 ""
f G "get_ticks" 2 749 "int32(int8 stream)" `538 
f N "get_ticks" 2 750 ""
v L "stream" 2 750 "int8" `539 
f B "get_ticks" 2 750 "int8(int8 stream)" `538 
f N "get_ticks" 2 751 ""
v L "stream" 2 751 "int8" `541 
f G "get_ticks" 2 751 "int16(int8 stream)" `540 
f N "get_ticks" 2 752 ""
v L "stream" 2 752 "int8" `541 
f G "get_ticks" 2 752 "int32(int8 stream)" `540 
f N "set_ticks" 2 753 ""
v L "value" 2 753 "int8" `541 
f B "set_ticks" 2 753 "void(int8 value)" `540 
f N "set_ticks" 2 754 ""
v L "value" 2 754 "int16" `543 
f B "set_ticks" 2 754 "void(int16 value)" `542 
f N "set_ticks" 2 755 ""
v L "value" 2 755 "int32" `545 
f B "set_ticks" 2 755 "void(int32 value)" `544 
f N "set_ticks" 2 756 ""
v L "stream" 2 756 "int8" `547 
v L "value" 2 756 "int8" `548 
f B "set_ticks" 2 756 "void(int8 stream,int8 value)" `546 
f N "set_ticks" 2 757 ""
v L "stream" 2 757 "int8" `550 
v L "value" 2 757 "int16" `551 
f B "set_ticks" 2 757 "void(int8 stream,int16 value)" `549 
f N "set_ticks" 2 758 ""
v L "stream" 2 758 "int8" `553 
v L "value" 2 758 "int32" `554 
f B "set_ticks" 2 758 "void(int8 stream,int32 value)" `552  "#use pwm() Prototypes:"
f N "pwm_on" 2 761 ""
f B "pwm_on" 2 761 "void()" `555 
f N "pwm_on" 2 762 ""
v L "stream" 2 762 "int8" `557 
f B "pwm_on" 2 762 "void(int8 stream)" `556 
f N "pwm_off" 2 763 ""
f B "pwm_off" 2 763 "void()" `558 
f N "pwm_off" 2 764 ""
v L "stream" 2 764 "int8" `560 
f B "pwm_off" 2 764 "void(int8 stream)" `559 
f N "pwm_set_duty" 2 765 ""
v L "duty" 2 765 "int16" `562 
f B "pwm_set_duty" 2 765 "void(int16 duty)" `561 
f N "pwm_set_duty" 2 766 ""
v L "stream" 2 766 "int8" `564 
v L "duty" 2 766 "int16" `565 
f B "pwm_set_duty" 2 766 "void(int8 stream,int16 duty)" `563 
f N "pwm_set_duty_percent" 2 767 ""
v L "percent" 2 767 "int16" `567 
f B "pwm_set_duty_percent" 2 767 "void(int16 percent)" `566 
f N "pwm_set_duty_percent" 2 768 ""
v L "stream" 2 768 "int8" `569 
v L "percent" 2 768 "int16" `570 
f B "pwm_set_duty_percent" 2 768 "void(int8 stream,int16 percent)" `568 
f N "pwm_set_frequency" 2 769 ""
v L "frequency" 2 769 "int32" `572 
f B "pwm_set_frequency" 2 769 "void(int32 frequency)" `571 
f N "pwm_set_frequency" 2 770 ""
v L "stream" 2 770 "int8" `574 
v L "frequency" 2 770 "int32" `575 
f B "pwm_set_frequency" 2 770 "void(int8 stream,int32 frequency)" `573  "#use capture() Prototypes:"
f N "get_capture_time" 2 773 ""
f B "get_capture_time" 2 773 "int16()" `576 
f N "get_capture_time" 2 774 ""
v L "stream" 2 774 "int8" `578 
f B "get_capture_time" 2 774 "int16(int8 stream)" `577 
f N "get_capture_event" 2 775 ""
f B "get_capture_event" 2 775 "int8()" `579 
f N "get_capture_event" 2 776 ""
v L "stream" 2 776 "int8" `581 
f B "get_capture_event" 2 776 "int8(int8 stream)" `580  "Enviroment Prototypes:"
c L "get_capture_event" 2 3 2 "FUNCTION"
f N "goto_address" 2 789 ""
v L "address" 2 789 "int16" `583 
f B "goto_address" 2 789 "void(int16 address)" `582 
f N "label_address" 2 790 ""
v L "label" 2 790 "int16" `585 
f B "label_address" 2 790 "int16(int16 label)" `584  "Program Memory Read Prototypes:"
f N "read_program_memory" 2 793 ""
v L "address" 2 793 "int16" `587 
v L "dataptr" 2 793 "*int8" `588 
v L "count" 2 793 "int16" `589 
f B "read_program_memory" 2 793 "void(int16 address,*int8 dataptr,int16 count)" `586 
f N "read_program_eeprom" 2 794 ""
v L "address" 2 794 "int16" `591 
f B "read_program_eeprom" 2 794 "int16(int16 address)" `590  "Program Memory Write Prototypes:"
f N "erase_program_eeprom" 2 797 ""
v L "address" 2 797 "int16" `593 
f B "erase_program_eeprom" 2 797 "void(int16 address)" `592 
f N "write_program_memory" 2 798 ""
v L "address" 2 798 "int16" `595 
v L "dataptr" 2 798 "*int8" `596 
v L "count" 2 798 "int16" `597 
f B "write_program_memory" 2 798 "void(int16 address,*int8 dataptr,int16 count)" `594 
f N "write_program_eeprom" 2 799 ""
v L "address" 2 799 "int16" `599 
v L "data" 2 799 "int16" `600 
f B "write_program_eeprom" 2 799 "void(int16 address,int16 data)" `598  "EEPROM Prototypes:"
d G "__EEADDRESS__" 2 806 "unsigned int8"
f N "read_eeprom" 2 809 ""
v L "address" 2 809 "int8" `602 
f B "read_eeprom" 2 809 "int8(int8 address)" `601 
f N "write_eeprom" 2 810 ""
v L "address" 2 810 "int8" `604 
v L "value" 2 810 "int8" `605 
f B "write_eeprom" 2 810 "void(int8 address,int8 value)" `603  "#use touchpad() Prototypes:"
f N "touchpad_state" 2 813 ""
v L "state" 2 813 "int8" `607 
f B "touchpad_state" 2 813 "void(int8 state)" `606 
f N "touchpad_getc" 2 814 ""
f B "touchpad_getc" 2 814 "int8()" `608 
f N "touchpad_hit" 2 815 ""
f B "touchpad_hit" 2 815 "int8()" `609  "INT"
c L "touchpad_hit" 2 3 4 "FUNCTION"
f N "enable_interrupts" 2 821 ""
v L "interrupt" 2 821 "int32" `611 
f B "enable_interrupts" 2 821 "void(int32 interrupt)" `610 
f N "disable_interrupts" 2 822 ""
v L "interrupt" 2 822 "int32" `613 
f B "disable_interrupts" 2 822 "void(int32 interrupt)" `612 
f N "clear_interrupt" 2 823 ""
v L "interrupt" 2 823 "int32" `615 
f B "clear_interrupt" 2 823 "void(int32 interrupt)" `614 
f N "interrupt_active" 2 824 ""
v L "interrupt" 2 824 "int32" `617 
f B "interrupt_active" 2 824 "int8(int32 interrupt)" `616 
f N "interrupt_enabled" 2 825 ""
v L "interrupt" 2 825 "int32" `619 
f B "interrupt_enabled" 2 825 "int8(int32 interrupt)" `618 
f N "ext_int_edge" 2 826 ""
v L "source" 2 826 "int8" `621 
v L "edge" 2 826 "int8" `622 
f B "ext_int_edge" 2 826 "void(int8 source,int8 edge)" `620 
f N "jump_to_isr" 2 827 ""
v L "address" 2 827 "int16" `624 
f B "jump_to_isr" 2 827 "void(int16 address)" `623  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 2 829 "0x40"
d G "H_TO_L" 2 830 "0"
d G "GLOBAL" 2 832 "0xF2C0"
d G "PERIPH" 2 833 "0xF240"
d G "INT_RTCC" 2 834 "0x00F220"
d G "INT_TIMER0" 2 835 "0x00F220"
d G "INT_TIMER1" 2 836 "0x009D01"
d G "INT_TIMER2" 2 837 "0x009D02"
d G "INT_TIMER3" 2 838 "0x00A002"
d G "INT_EXT_L2H" 2 839 "0x5000F210"
d G "INT_EXT_H2L" 2 840 "0x6000F210"
d G "INT_EXT" 2 841 "0x00F210"
d G "INT_EXT1_L2H" 2 842 "0x5001F008"
d G "INT_EXT1_H2L" 2 843 "0x6001F008"
d G "INT_EXT1" 2 844 "0x00F008"
d G "INT_EXT2_L2H" 2 845 "0x5002F010"
d G "INT_EXT2_H2L" 2 846 "0x6002F010"
d G "INT_EXT2" 2 847 "0x00F010"
d G "INT_AD" 2 848 "0x009D40"
d G "INT_RDA" 2 849 "0x009D20"
d G "INT_TBE" 2 850 "0x009D10"
d G "INT_SSP" 2 851 "0x009D08"
d G "INT_CCP1" 2 852 "0x009D04"
d G "INT_BUSCOL" 2 853 "0x00A008"
d G "INT_COMP" 2 854 "0x00A040"
d G "INT_EEPROM" 2 855 "0x00A010"
d G "INT_OSCF" 2 856 "0x00A080"
d G "INT_COMP2" 2 857 "0x00A020"
d G "INT_RA" 2 858 "0x00FFF208"
d G "INT_RB" 2 859 "0x21FFF208"
d G "INT_RAB" 2 860 "0x02FFF208"
d G "INT_RA0" 2 861 "0x001F208"
d G "INT_RA1" 2 862 "0x002F208"
d G "INT_RA2" 2 863 "0x004F208"
d G "INT_RA3" 2 864 "0x008F208"
d G "INT_RA4" 2 865 "0x010F208"
d G "INT_RA5" 2 866 "0x020F208"
d G "INT_RB4" 2 867 "0x110F208"
d G "INT_RB5" 2 868 "0x120F208"
d G "INT_RB6" 2 869 "0x140F208"
d G "INT_RB7" 2 870 "0x180F208"
D G "green_led" 1 9 "PIN_A4"
F N "get_led_status" 1 11 ""
V L "incoming" 1 11 "int8" `632 
f G "get_led_status" 1 11 "void(int8 incoming)" `631 
V G "data" 0 3 "int8" `633 
C L "get_led_status" 0 3 1 "FUNCTION"
V G "incoming" 0 5 "int8" `634 
V G "state" 0 5 "int8" `635  "incoming is the data from the i2c channel state is direction of data coming or going"
V G "hp" 0 7 "int8" `636 
C L "get_led_status" 0 3 1 "FUNCTION"
V G "min" 0 8 "int8" `637 
C L "get_led_status" 0 3 1 "FUNCTION"
V G "sec" 0 9 "int8" `638 
C L "get_led_status" 0 3 1 "FUNCTION"
V G "series" 0 10 "int8[8]" `639 
C L "get_led_status" 0 3 2 "FUNCTION"
F N "i2c_interupt" 0 14 ""
F G "i2c_interupt" 0 14 "void()" `640 
C L "i2c_interupt" 0 3 1 "FUNCTION"
C L "i2c_interupt" 0 3 1 "FUNCTION"
C L "i2c_interupt" 0 3 1 "FUNCTION"
F N "MAIN" 0 39 ""
F G "MAIN" 0 39 "void()" `642  "I2C init interrupts"
F N "get_led_status" 0 54 ""
V L "incoming" 0 54 "int8" `646 
F G "get_led_status" 0 54 "void(int8 incoming)" `631 
V L "c" 0 55 "int8" `645 
V L "k" 0 55 "int8" `646 
V L "bin" 0 56 "int8" `647 
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 1
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 3 0
F B "read_program_memory" 3 0
F B "read_rom_memory" 3 0
F B "erase_program_eeprom" 1 0
F B "write_configuration_memory" 2 3
F B "read_configuration_memory" 2 3
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "set_slow_slew_a" 1 0
F B "set_slow_slew_b" 1 0
F B "set_slow_slew_c" 1 0
F B "port_a_pullups" 1 0
F B "port_b_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "set_analog_pins" 1 2
F B "get_capture" 0 1
F B "set_compare_time" 1 2
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_timer_3" 1 0
F B "set_timer3" 1 0
F B "get_timer3" 0 0
F B "setup_ccp1" 1 2
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 0
F B "set_pwm2_duty" 1 0
F B "setup_ccp3" 1 0
F B "set_pwm3_duty" 1 0
F B "setup_ccp4" 1 0
F B "set_pwm4_duty" 1 0
F B "setup_low_volt_detect" 1 0
F B "setup_oscillator" 0 2
F B "pll_locked" 0 0
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 2
F B "spi_data_is_in2" 0 0
F B "setup_dac" 1 0
F B "dac_write" 1 0
F B "brownout_enable" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
F B "i2c_read" 0 2
F B "i2c_write" 1 2
F B "i2c_start" 0 2
F B "i2c_stop" 0 1
F B "i2c_isr_state" 0 1
F B "i2c_slaveaddr" 1 2
F B "i2c_init" 1 2
F B "i2c_poll" 0 1
