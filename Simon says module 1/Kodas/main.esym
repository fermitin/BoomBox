D G "__PCH__" 0 271 ""5.074""
D G "__DEVICE__" 0 271 "2455"
D G "__DATE__" 0 271 ""26-Sau-19""
D G "__TIME__" 0 271 ""22:44:53""
D G "_UNICODE" 0 271 ""?""
D G "__EVAL" 0 271 ""?"" "Standard Header file for the PIC18F2455 device ////////////////"
c L "set_tris_a" 2 3 6 "FUNCTION"
f N "set_tris_a" 2 45 ""
v L "value" 2 45 "int8" `55 
f B "set_tris_a" 2 45 "void(int8 value)" `54 
f N "set_tris_b" 2 46 ""
v L "value" 2 46 "int8" `57 
f B "set_tris_b" 2 46 "void(int8 value)" `56 
f N "set_tris_c" 2 47 ""
v L "value" 2 47 "int8" `59 
f B "set_tris_c" 2 47 "void(int8 value)" `58 
f N "set_tris_e" 2 48 ""
v L "value" 2 48 "int8" `61 
f B "set_tris_e" 2 48 "void(int8 value)" `60 
f N "get_tris_a" 2 49 ""
f B "get_tris_a" 2 49 "int8()" `62 
f N "get_tris_b" 2 50 ""
f B "get_tris_b" 2 50 "int8()" `63 
f N "get_tris_c" 2 51 ""
f B "get_tris_c" 2 51 "int8()" `64 
f N "get_tris_e" 2 52 ""
f B "get_tris_e" 2 52 "int8()" `65 
f N "output_a" 2 53 ""
v L "value" 2 53 "int8" `67 
f B "output_a" 2 53 "void(int8 value)" `66 
f N "output_b" 2 54 ""
v L "value" 2 54 "int8" `69 
f B "output_b" 2 54 "void(int8 value)" `68 
f N "output_c" 2 55 ""
v L "value" 2 55 "int8" `71 
f B "output_c" 2 55 "void(int8 value)" `70 
f N "output_e" 2 56 ""
v L "value" 2 56 "int8" `73 
f B "output_e" 2 56 "void(int8 value)" `72 
f N "input_a" 2 57 ""
f B "input_a" 2 57 "int8()" `74 
f N "input_b" 2 58 ""
f B "input_b" 2 58 "int8()" `75 
f N "input_c" 2 59 ""
f B "input_c" 2 59 "int8()" `76 
f N "input_e" 2 60 ""
f B "input_e" 2 60 "int8()" `77 
f N "input_change_a" 2 61 ""
f B "input_change_a" 2 61 "int8()" `78 
f N "input_change_b" 2 62 ""
f B "input_change_b" 2 62 "int8()" `79 
f N "input_change_c" 2 63 ""
f B "input_change_c" 2 63 "int8()" `80 
f N "input_change_e" 2 64 ""
f B "input_change_e" 2 64 "int8()" `81 
f N "port_b_pullups" 2 65 ""
v L "value" 2 65 "int8" `83 
f B "port_b_pullups" 2 65 "void(int8 value)" `82 
f N "input" 2 66 ""
v L "pin" 2 66 "int16" `85 
f B "input" 2 66 "int8(int16 pin)" `84 
f N "input_state" 2 67 ""
v L "pin" 2 67 "int16" `87 
f B "input_state" 2 67 "int8(int16 pin)" `86 
f N "output_low" 2 68 ""
v L "pin" 2 68 "int16" `89 
f B "output_low" 2 68 "void(int16 pin)" `88 
f N "output_high" 2 69 ""
v L "pin" 2 69 "int16" `91 
f B "output_high" 2 69 "void(int16 pin)" `90 
f N "output_toggle" 2 70 ""
v L "pin" 2 70 "int16" `93 
f B "output_toggle" 2 70 "void(int16 pin)" `92 
f N "output_bit" 2 71 ""
v L "pin" 2 71 "int16" `95 
v L "level" 2 71 "int8" `96 
f B "output_bit" 2 71 "void(int16 pin,int8 level)" `94 
f N "output_float" 2 72 ""
v L "pin" 2 72 "int16" `98 
f B "output_float" 2 72 "void(int16 pin)" `97 
f N "output_drive" 2 73 ""
v L "pin" 2 73 "int16" `100 
f B "output_drive" 2 73 "void(int16 pin)" `99  "Constants used to identify pins in the above are:"
d G "PIN_A0" 2 77 "31744"
d G "PIN_A1" 2 78 "31745"
d G "PIN_A2" 2 79 "31746"
d G "PIN_A3" 2 80 "31747"
d G "PIN_A4" 2 81 "31748"
d G "PIN_A5" 2 82 "31749"
d G "PIN_A6" 2 83 "31750"
d G "PIN_B0" 2 85 "31752"
d G "PIN_B1" 2 86 "31753"
d G "PIN_B2" 2 87 "31754"
d G "PIN_B3" 2 88 "31755"
d G "PIN_B4" 2 89 "31756"
d G "PIN_B5" 2 90 "31757"
d G "PIN_B6" 2 91 "31758"
d G "PIN_B7" 2 92 "31759"
d G "PIN_C0" 2 94 "31760"
d G "PIN_C1" 2 95 "31761"
d G "PIN_C2" 2 96 "31762"
d G "PIN_C4" 2 97 "31764"
d G "PIN_C5" 2 98 "31765"
d G "PIN_C6" 2 99 "31766"
d G "PIN_C7" 2 100 "31767"
d G "PIN_E3" 2 102 "31779"
d G "FALSE" 2 105 "0"
d G "TRUE" 2 106 "1"
d G "BYTE" 2 108 "int8"
d G "BOOLEAN" 2 109 "int1"
d G "getc" 2 111 "getch"
d G "fgetc" 2 112 "getch"
d G "getchar" 2 113 "getch"
d G "putc" 2 114 "putchar"
d G "fputc" 2 115 "putchar"
d G "fgets" 2 116 "gets"
d G "fputs" 2 117 "puts"
c L "output_drive" 2 3 3 "FUNCTION"
f N "restart_cause" 2 122 ""
f B "restart_cause" 2 122 "int8()" `101 
f N "reset_cpu" 2 123 ""
f B "reset_cpu" 2 123 "void()" `102 
f N "sleep" 2 124 ""
f B "sleep" 2 124 "void()" `103 
f N "sleep" 2 125 ""
v L "type" 2 125 "int8" `105 
f B "sleep" 2 125 "void(int8 type)" `104  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_TIMEOUT" 2 127 "7"
d G "MCLR_FROM_SLEEP" 2 128 "11"
d G "MCLR_FROM_RUN" 2 129 "15"
d G "NORMAL_POWER_UP" 2 130 "12"
d G "BROWNOUT_RESTART" 2 131 "14"
d G "WDT_FROM_SLEEP" 2 132 "3"
d G "RESET_INSTRUCTION" 2 133 "0"
d G "SLEEP_FULL" 2 136 "0" "Default"
d G "SLEEP_IDLE" 2 137 "1" "Clock and peripherals don't stop"
c L "sleep" 2 3 5 "FUNCTION"
f N "setup_timer_0" 2 144 ""
v L "mode" 2 144 "int8" `107 
f B "setup_timer_0" 2 144 "void(int8 mode)" `106 
f N "set_timer0" 2 145 ""
v L "value" 2 145 "int16" `109 
f B "set_timer0" 2 145 "void(int16 value)" `108 
f N "get_timer0" 2 146 ""
f B "get_timer0" 2 146 "int16()" `110 
f N "setup_counters" 2 147 ""
v L "mode" 2 147 "int8" `112 
v L "prescaler" 2 147 "int8" `113 
f B "setup_counters" 2 147 "void(int8 mode,int8 prescaler)" `111 
f N "set_rtcc" 2 148 ""
v L "value" 2 148 "int16" `115 
f B "set_rtcc" 2 148 "void(int16 value)" `114 
f N "get_rtcc" 2 149 ""
f B "get_rtcc" 2 149 "int16()" `116  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 2 151 "0"
d G "T0_EXT_L_TO_H" 2 152 "32"
d G "T0_EXT_H_TO_L" 2 153 "48"
d G "T0_DIV_1" 2 155 "8"
d G "T0_DIV_2" 2 156 "0"
d G "T0_DIV_4" 2 157 "1"
d G "T0_DIV_8" 2 158 "2"
d G "T0_DIV_16" 2 159 "3"
d G "T0_DIV_32" 2 160 "4"
d G "T0_DIV_64" 2 161 "5"
d G "T0_DIV_128" 2 162 "6"
d G "T0_DIV_256" 2 163 "7"
d G "T0_OFF" 2 165 "0x80"
d G "T0_8_BIT" 2 167 "0x40"
d G "RTCC_INTERNAL" 2 171 "0"
d G "RTCC_EXT_L_TO_H" 2 172 "32"
d G "RTCC_EXT_H_TO_L" 2 173 "48"
d G "RTCC_DIV_1" 2 174 "8"
d G "RTCC_DIV_2" 2 175 "0"
d G "RTCC_DIV_4" 2 176 "1"
d G "RTCC_DIV_8" 2 177 "2"
d G "RTCC_DIV_16" 2 178 "3"
d G "RTCC_DIV_32" 2 179 "4"
d G "RTCC_DIV_64" 2 180 "5"
d G "RTCC_DIV_128" 2 181 "6"
d G "RTCC_DIV_256" 2 182 "7"
d G "RTCC_OFF" 2 183 "0x80"
d G "RTCC_8_BIT" 2 184 "0x40"
c L "get_rtcc" 2 3 8 "FUNCTION"
f N "setup_wdt" 2 195 ""
v L "mode" 2 195 "int16" `118 
f B "setup_wdt" 2 195 "void(int16 mode)" `117 
f N "restart_wdt" 2 196 ""
f B "restart_wdt" 2 196 "void()" `119  "Constants used for SETUP_WDT() are:"
d G "WDT_ON" 2 198 "0x100"
d G "WDT_OFF" 2 199 "0"
d G "WDT_4MS" 2 201 "0x300"
d G "WDT_8MS" 2 202 "0x500"
d G "WDT_16MS" 2 203 "0x700"
d G "WDT_32MS" 2 204 "0x900"
d G "WDT_64MS" 2 205 "0xB00"
d G "WDT_128MS" 2 206 "0xD00"
d G "WDT_256MS" 2 207 "0xF00"
d G "WDT_512MS" 2 208 "0x1100"
d G "WDT_1S" 2 209 "0x1300"
d G "WDT_2S" 2 210 "0x1500"
d G "WDT_4S" 2 211 "0x1700"
d G "WDT_8S" 2 212 "0x1900"
d G "WDT_16" 2 213 "0x1B00"
d G "WDT_32S" 2 214 "0x1D00"
d G "WDT_64S" 2 215 "0x1F00"
d G "WDT_128S" 2 216 "0x2100"
c L "restart_wdt" 2 3 3 "FUNCTION"
f N "setup_timer_1" 2 221 ""
v L "mode" 2 221 "int16" `121 
f B "setup_timer_1" 2 221 "void(int16 mode)" `120 
f N "get_timer1" 2 222 ""
f B "get_timer1" 2 222 "int16()" `122 
f N "set_timer1" 2 223 ""
v L "value" 2 223 "int16" `124 
f B "set_timer1" 2 223 "void(int16 value)" `123  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 2 226 "0"
d G "T1_INTERNAL" 2 227 "0x85"
d G "T1_EXTERNAL" 2 228 "0x87"
d G "T1_EXTERNAL_SYNC" 2 229 "0x83"
d G "T1_CLK_OUT" 2 231 "8"
d G "T1_DIV_BY_1" 2 233 "0"
d G "T1_DIV_BY_2" 2 234 "0x10"
d G "T1_DIV_BY_4" 2 235 "0x20"
d G "T1_DIV_BY_8" 2 236 "0x30"
c L "set_timer1" 2 3 3 "FUNCTION"
f N "setup_timer_2" 2 241 ""
v L "mode" 2 241 "int8" `126 
v L "period" 2 241 "int8" `127 
v L "postscale" 2 241 "int8" `128 
f B "setup_timer_2" 2 241 "void(int8 mode,int8 period,int8 postscale)" `125 
f N "get_timer2" 2 242 ""
f B "get_timer2" 2 242 "int8()" `129 
f N "set_timer2" 2 243 ""
v L "value" 2 243 "int8" `131 
f B "set_timer2" 2 243 "void(int8 value)" `130  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 2 245 "0"
d G "T2_DIV_BY_1" 2 246 "4"
d G "T2_DIV_BY_4" 2 247 "5"
d G "T2_DIV_BY_16" 2 248 "6"
c L "set_timer2" 2 3 3 "FUNCTION"
f N "setup_timer_3" 2 253 ""
v L "mode" 2 253 "int16" `133 
f B "setup_timer_3" 2 253 "void(int16 mode)" `132 
f N "get_timer3" 2 254 ""
f B "get_timer3" 2 254 "int16()" `134 
f N "set_timer3" 2 255 ""
v L "value" 2 255 "int16" `136 
f B "set_timer3" 2 255 "void(int16 value)" `135  "Constants used for SETUP_TIMER_3() are:"
d G "T3_DISABLED" 2 258 "0"
d G "T3_INTERNAL" 2 259 "0x85"
d G "T3_EXTERNAL" 2 260 "0x87"
d G "T3_EXTERNAL_SYNC" 2 261 "0x83"
d G "T3_DIV_BY_1" 2 263 "0"
d G "T3_DIV_BY_2" 2 264 "0x10"
d G "T3_DIV_BY_4" 2 265 "0x20"
d G "T3_DIV_BY_8" 2 266 "0x30"
d G "T3_CCP1_TO_2" 2 269 "0x48"
d G "T3_CCP2" 2 270 "0x8"
c L "set_timer3" 2 3 4 "FUNCTION"
f N "setup_ccp1" 2 276 ""
v L "mode" 2 276 "int32" `138 
f B "setup_ccp1" 2 276 "void(int32 mode)" `137 
f N "setup_ccp1" 2 277 ""
v L "mode" 2 277 "int32" `140 
v L "pwm" 2 277 "int8" `141 
f B "setup_ccp1" 2 277 "void(int32 mode,int8 pwm)" `139 
f N "set_pwm1_duty" 2 278 ""
v L "value" 2 278 "int16" `143 
f B "set_pwm1_duty" 2 278 "void(int16 value)" `142  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 2 280 "0"
d G "CCP_CAPTURE_FE" 2 281 "0x04"
d G "CCP_CAPTURE_RE" 2 282 "0x05"
d G "CCP_CAPTURE_DIV_4" 2 283 "0x06"
d G "CCP_CAPTURE_DIV_16" 2 284 "0x07"
d G "CCP_COMPARE_SET_ON_MATCH" 2 285 "0x08"
d G "CCP_COMPARE_CLR_ON_MATCH" 2 286 "0x09"
d G "CCP_COMPARE_INT" 2 287 "0x0A"
d G "CCP_COMPARE_INT_AND_TOGGLE" 2 288 "0x02"
d G "CCP_COMPARE_RESET_TIMER" 2 289 "0x0B"
d G "CCP_PWM" 2 290 "0x0C"
d G "CCP_PWM_PLUS_1" 2 291 "0x1c"
d G "CCP_PWM_PLUS_2" 2 292 "0x2c"
d G "CCP_PWM_PLUS_3" 2 293 "0x3c"
c L "set_pwm1_duty" 2 3 1 "FUNCTION"
c L "set_pwm1_duty" 2 3 1 "FUNCTION"
f N "setup_ccp2" 2 301 ""
v L "mode" 2 301 "int32" `148 
f B "setup_ccp2" 2 301 "void(int32 mode)" `147 
f N "setup_ccp2" 2 302 ""
v L "mode" 2 302 "int32" `150 
v L "pwm" 2 302 "int8" `151 
f B "setup_ccp2" 2 302 "void(int32 mode,int8 pwm)" `149 
f N "set_pwm2_duty" 2 303 ""
v L "value" 2 303 "int16" `153 
f B "set_pwm2_duty" 2 303 "void(int16 value)" `152 
c L "set_pwm2_duty" 2 3 3 "FUNCTION"
f N "setup_spi" 2 310 ""
v L "mode" 2 310 "int32" `158 
f B "setup_spi" 2 310 "void(int32 mode)" `157 
f N "spi_write" 2 311 ""
v L "value" 2 311 "int8" `160 
f B "spi_write" 2 311 "void(int8 value)" `159 
f N "spi_read" 2 312 ""
f B "spi_read" 2 312 "int8()" `161 
f N "spi_read" 2 313 ""
v L "value" 2 313 "int8" `163 
f B "spi_read" 2 313 "int8(int8 value)" `162 
f N "spi_data_is_in" 2 314 ""
f B "spi_data_is_in" 2 314 "int8()" `164 
f N "setup_spi2" 2 315 ""
v L "mode" 2 315 "int32" `166 
f B "setup_spi2" 2 315 "void(int32 mode)" `165 
f N "spi_write2" 2 316 ""
v L "value" 2 316 "int8" `168 
f B "spi_write2" 2 316 "void(int8 value)" `167 
f N "spi_read2" 2 317 ""
f B "spi_read2" 2 317 "int8()" `169 
f N "spi_read2" 2 318 ""
v L "value" 2 318 "int8" `171 
f B "spi_read2" 2 318 "int8(int8 value)" `170 
f N "spi_data_is_in2" 2 319 ""
f B "spi_data_is_in2" 2 319 "int8()" `172  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 2 321 "0x00"
d G "SPI_MASTER" 2 322 "0x20"
d G "SPI_SLAVE" 2 323 "0x24"
d G "SPI_SCK_IDLE_HIGH" 2 324 "0x10"
d G "SPI_SCK_IDLE_LOW" 2 325 "0x00"
d G "SPI_CLK_DIV_4" 2 326 "0x00"
d G "SPI_CLK_DIV_16" 2 327 "0x01"
d G "SPI_CLK_DIV_64" 2 328 "0x02"
d G "SPI_CLK_T2" 2 329 "0x03"
d G "SPI_SS_DISABLED" 2 330 "0x01"
d G "SPI_XMIT_L_TO_H" 2 332 "0x4000"
d G "SPI_XMIT_H_TO_L" 2 333 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 2 335 "0x0000"
d G "SPI_SAMPLE_AT_END" 2 336 "0x8000"
d G "SPI_L_TO_H" 2 339 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 2 340 "SPI_SCK_IDLE_HIGH"
c L "spi_data_is_in2" 2 3 2 "FUNCTION"
f N "setup_uart" 2 344 ""
v L "baud" 2 344 "int32" `174 
f B "setup_uart" 2 344 "void(int32 baud)" `173 
f N "setup_uart" 2 345 ""
v L "baud" 2 345 "int32" `176 
v L "stream" 2 345 "int8" `177 
f B "setup_uart" 2 345 "void(int32 baud,int8 stream)" `175 
f N "setup_uart" 2 346 ""
v L "baud" 2 346 "int32" `179 
v L "stream" 2 346 "int8" `180 
v L "clock" 2 346 "int32" `181 
f B "setup_uart" 2 346 "void(int32 baud,int8 stream,int32 clock)" `178 
f N "set_uart_speed" 2 347 ""
v L "baud" 2 347 "int32" `183 
f B "set_uart_speed" 2 347 "void(int32 baud)" `182 
f N "set_uart_speed" 2 348 ""
v L "baud" 2 348 "int32" `185 
v L "stream" 2 348 "int8" `186 
f B "set_uart_speed" 2 348 "void(int32 baud,int8 stream)" `184 
f N "set_uart_speed" 2 349 ""
v L "baud" 2 349 "int32" `188 
v L "stream" 2 349 "int8" `189 
v L "clock" 2 349 "int32" `190 
f B "set_uart_speed" 2 349 "void(int32 baud,int8 stream,int32 clock)" `187  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 2 353 "2"
d G "UART_DATA" 2 354 "4"
d G "UART_AUTODETECT" 2 355 "8"
d G "UART_AUTODETECT_NOWAIT" 2 356 "9"
d G "UART_WAKEUP_ON_RDA" 2 357 "10"
d G "UART_SEND_BREAK" 2 358 "13"
c L "set_uart_speed" 2 3 3 "FUNCTION"
f N "setup_comparator" 2 362 ""
v L "mode" 2 362 "int32" `192 
f B "setup_comparator" 2 362 "void(int32 mode)" `191  "Constants used in setup_comparator() are:"
d G "A0_A3_A1_A3" 2 364 "0xfff04"
d G "A0_A3_A1_A2_OUT_ON_A4_A5" 2 365 "0xfcf03"
d G "A0_A3_A1_A3_OUT_ON_A4_A5" 2 366 "0xbcf05"
d G "NC_NC_NC_NC" 2 367 "0x0ff07"
d G "A0_A3_A1_A2" 2 368 "0xfff02"
d G "A0_A3_NC_NC_OUT_ON_A4" 2 369 "0x9ef01"
d G "A0_VR_A1_VR" 2 370 "0x3ff06"
d G "A3_VR_A2_VR" 2 371 "0xcff0e"
d G "CP1_INVERT" 2 372 "0x0000010"
d G "CP2_INVERT" 2 373 "0x0000020"
c L "setup_comparator" 2 3 2 "FUNCTION"
f N "setup_vref" 2 380 ""
v L "mode" 2 380 "int8" `196 
f B "setup_vref" 2 380 "void(int8 mode)" `195  "Constants used in setup_vref() are:"
d G "VREF_LOW" 2 382 "0xa0"
d G "VREF_HIGH" 2 383 "0x80"
d G "VREF_F5" 2 385 "0x40"
d G "VREF_COMP" 2 386 "0x10"
c L "setup_vref" 2 3 2 "FUNCTION"
f N "setup_low_volt_detect" 2 390 ""
v L "mode" 2 390 "int8" `198 
f B "setup_low_volt_detect" 2 390 "void(int8 mode)" `197  "Constants used in setup_low_volt_detect() are:"
d G "LVD_LVDIN" 2 392 "0x1F"
d G "LVD_45" 2 393 "0x1E"
d G "LVD_42" 2 394 "0x1D"
d G "LVD_40" 2 395 "0x1C"
d G "LVD_38" 2 396 "0x1B"
d G "LVD_36" 2 397 "0x1A"
d G "LVD_35" 2 398 "0x19"
d G "LVD_33" 2 399 "0x18"
d G "LVD_30" 2 400 "0x17"
d G "LVD_28" 2 401 "0x16"
d G "LVD_27" 2 402 "0x15"
d G "LVD_25" 2 403 "0x14"
d G "LVD_24" 2 404 "0x13"
d G "LVD_23" 2 405 "0x12"
d G "LVD_22" 2 406 "0x11"
d G "LVD_21" 2 407 "0x10"
d G "LVD_TRIGGER_BELOW" 2 409 "0"
d G "LVD_TRIGGER_ABOVE" 2 410 "0x80"
c L "setup_low_volt_detect" 2 3 2 "FUNCTION"
f N "setup_oscillator" 2 415 ""
v L "mode" 2 415 "int16" `200 
f B "setup_oscillator" 2 415 "int8(int16 mode)" `199 
f N "setup_oscillator" 2 416 ""
v L "mode" 2 416 "int16" `202 
v L "tune" 2 416 "sint8" `203 
f B "setup_oscillator" 2 416 "int8(int16 mode,sint8 tune)" `201  "Constants used in setup_oscillator() are:"
d G "OSC_31KHZ" 2 419 "0"
d G "OSC_125KHZ" 2 420 "0x10"
d G "OSC_250KHZ" 2 421 "0x20"
d G "OSC_500KHZ" 2 422 "0x30"
d G "OSC_1MHZ" 2 423 "0x40"
d G "OSC_2MHZ" 2 424 "0x50"
d G "OSC_4MHZ" 2 425 "0x60"
d G "OSC_8MHZ" 2 426 "0x70"
d G "OSC_TIMER1" 2 428 "1"
d G "OSC_INTRC" 2 429 "2"
d G "OSC_NORMAL" 2 430 "0"
d G "OSC_IDLE_MODE" 2 432 "0x80"
d G "OSC_31250" 2 433 "0x8000"
d G "OSC_STATE_STABLE" 2 437 "4"
d G "OSC_STATE_EXT_RUNNING" 2 438 "8"
c L "setup_oscillator" 2 3 4 "FUNCTION"
f N "setup_adc" 2 445 ""
v L "mode" 2 445 "int16" `205 
f B "setup_adc" 2 445 "void(int16 mode)" `204 
f N "read_adc" 2 446 ""
f B "read_adc" 2 446 "int8()" `206 
f N "read_adc" 2 447 ""
v L "mode" 2 447 "int8" `208 
f B "read_adc" 2 447 "int8(int8 mode)" `207 
f N "read_adc" 2 448 ""
f G "read_adc" 2 448 "int16()" `209 
f N "read_adc" 2 449 ""
v L "mode" 2 449 "int8" `210 
f G "read_adc" 2 449 "int16(int8 mode,int8 pins)" `209 
f N "adc_done" 2 450 ""
f B "adc_done" 2 450 "int8(int8 mode,int8 pins)" `209  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 2 452 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 2 453 "0x100"
d G "ADC_CLOCK_DIV_4" 2 454 "0x04"
d G "ADC_CLOCK_DIV_8" 2 455 "0x01"
d G "ADC_CLOCK_DIV_16" 2 456 "0x05"
d G "ADC_CLOCK_DIV_32" 2 457 "0x02"
d G "ADC_CLOCK_DIV_64" 2 458 "0x06"
d G "ADC_CLOCK_INTERNAL" 2 459 "0x07" "Internal 2-6us"
d G "ADC_TAD_MUL_0" 2 461 "0x00"
d G "ADC_TAD_MUL_2" 2 462 "0x08"
d G "ADC_TAD_MUL_4" 2 463 "0x10"
d G "ADC_TAD_MUL_6" 2 464 "0x18"
d G "ADC_TAD_MUL_8" 2 465 "0x20"
d G "ADC_TAD_MUL_12" 2 466 "0x28"
d G "ADC_TAD_MUL_16" 2 467 "0x30"
d G "ADC_TAD_MUL_20" 2 468 "0x38"
c L "adc_done" 2 3 1 "FUNCTION"
f N "setup_adc_ports" 2 471 ""
v L "pins" 2 471 "int8" `211 
f B "setup_adc_ports" 2 471 "void(int8 pins)" `210 
f N "setup_adc_ports" 2 472 ""
v L "pins" 2 472 "int8" `213 
v L "reference" 2 472 "int8" `214 
f B "setup_adc_ports" 2 472 "void(int8 pins,int8 reference)" `212 
f N "set_analog_pins" 2 473 ""
v L "pins" 2 473 "int8" `216 
f B "set_analog_pins" 2 473 "void(int8 pins)" `215 
f N "set_analog_pins" 2 474 ""
v L "pins" 2 474 "int8" `218 
v L "reference" 2 474 "int8" `219 
f B "set_analog_pins" 2 474 "void(int8 pins,int8 reference)" `217 
f N "set_adc_channel" 2 475 ""
v L "channel" 2 475 "int8" `221 
f B "set_adc_channel" 2 475 "void(int8 channel)" `220  "Constants used in SETUP_ADC_PORTS() and SET_ANALOG_PINS() are:"
d G "NO_ANALOGS" 2 478 "0x0F" "None"
d G "ALL_ANALOG" 2 479 "0x00" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3 B1 B4 B0"
d G "AN0_TO_AN11" 2 480 "0x03" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3 B1 B4"
d G "AN0_TO_AN10" 2 481 "0x04" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3 B1"
d G "AN0_TO_AN9" 2 482 "0x05" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3"
d G "AN0_TO_AN8" 2 483 "0x06" "A0 A1 A2 A3 A5 E0 E1 E2 B2"
d G "AN0_TO_AN7" 2 484 "0x07" "A0 A1 A2 A3 A5 E0 E1 E2"
d G "AN0_TO_AN6" 2 485 "0x08" "A0 A1 A2 A3 A5 E0 E1"
d G "AN0_TO_AN5" 2 486 "0x09" "A0 A1 A2 A3 A5 E0"
d G "AN0_TO_AN4" 2 487 "0x0A" "A0 A1 A2 A3 A5"
d G "AN0_TO_AN3" 2 488 "0x0B" "A0 A1 A2 A3"
d G "AN0_TO_AN2" 2 489 "0x0C" "A0 A1 A2"
d G "AN0_TO_AN1" 2 490 "0x0D" "A0 A1"
d G "AN0" 2 491 "0x0E" "A0"
d G "AN0_TO_AN11_ANALOG" 2 492 "0x03" "!old only provided for compatibility"
d G "AN0_TO_AN10_ANALOG" 2 493 "0x04" "!old only provided for compatibility"
d G "AN0_TO_AN9_ANALOG" 2 494 "0x05" "!old only provided for compatibility"
d G "AN0_TO_AN8_ANALOG" 2 495 "0x06" "!old only provided for compatibility"
d G "AN0_TO_AN7_ANALOG" 2 496 "0x07" "!old only provided for compatibility"
d G "AN0_TO_AN6_ANALOG" 2 497 "0x08" "!old only provided for compatibility"
d G "AN0_TO_AN5_ANALOG" 2 498 "0x09" "!old only provided for compatibility"
d G "AN0_TO_AN4_ANALOG" 2 499 "0x0A" "!old only provided for compatibility"
d G "AN0_TO_AN3_ANALOG" 2 500 "0x0B" "!old only provided for compatibility"
d G "AN0_TO_AN2_ANALOG" 2 501 "0x0C" "!old only provided for compatibility"
d G "AN0_TO_AN1_ANALOG" 2 502 "0x0D" "!old only provided for compatibility"
d G "AN0_ANALOG" 2 503 "0x0E" "!old only provided for compatibility"
d G "VSS_VDD" 2 506 "0x00" "Range 0-Vdd"
d G "VREF_VREF" 2 507 "0x30" "Range VrefL-VrefH"
d G "VREF_VDD" 2 508 "0x20" "Range VrefL-Vdd"
d G "VSS_VREF" 2 509 "0x10" "Range 0-VrefH"
d G "ADC_START_AND_READ" 2 512 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 2 513 "1"
d G "ADC_READ_ONLY" 2 514 "6"
c L "set_adc_channel" 2 3 3 "FUNCTION"
f N "abs" 2 520 ""
v L "x" 2 520 "sint8" `223 
f B "abs" 2 520 "sint8(sint8 x)" `222 
f N "abs" 2 521 ""
v L "x" 2 521 "sint16" `225 
f B "abs" 2 521 "sint16(sint16 x)" `224 
f N "abs" 2 522 ""
v L "x" 2 522 "sint32" `227 
f B "abs" 2 522 "sint32(sint32 x)" `226 
f N "abs" 2 523 ""
v L "x" 2 523 "float" `229 
f B "abs" 2 523 "float(float x)" `228 
f N "_mul" 2 524 ""
v L "??65535" 2 524 "int8" `231 
v L "??65535" 2 524 "int8" `232 
f B "_mul" 2 524 "int16(int8 ,int8 )" `230 
f N "_mul" 2 525 ""
v L "??65535" 2 525 "sint8" `234 
v L "??65535" 2 525 "sint8" `235 
f B "_mul" 2 525 "sint16(sint8 ,sint8 )" `233 
f N "_mul" 2 526 ""
v L "??65535" 2 526 "int16" `237 
v L "??65535" 2 526 "int16" `238 
f B "_mul" 2 526 "int32(int16 ,int16 )" `236 
f N "_mul" 2 527 ""
v L "??65535" 2 527 "sint16" `240 
v L "??65535" 2 527 "sint16" `241 
f B "_mul" 2 527 "sint32(sint16 ,sint16 )" `239  "Memory Manipulation Prototypes:"
f N "read_bank" 2 530 ""
v L "bank" 2 530 "int8" `243 
v L "offset" 2 530 "int8" `244 
f B "read_bank" 2 530 "int8(int8 bank,int8 offset)" `242 
f N "write_bank" 2 531 ""
v L "bank" 2 531 "int8" `246 
v L "offset" 2 531 "int8" `247 
v L "value" 2 531 "int8" `248 
f B "write_bank" 2 531 "void(int8 bank,int8 offset,int8 value)" `245 
f N "strcpy" 2 532 ""
v L "dest" 2 532 "*int8" `250 
v L "src" 2 532 "*int8" `251 
f B "strcpy" 2 532 "void(*int8 dest,*int8 src)" `249 
f N "memset" 2 533 ""
v L "destination" 2 533 "*int8" `253 
v L "value" 2 533 "int8" `254 
v L "num" 2 533 "int16" `255 
f B "memset" 2 533 "void(*int8 destination,int8 value,int16 num)" `252 
f N "memcpy" 2 534 ""
v L "destination" 2 534 "*int8" `257 
v L "source" 2 534 "*int8" `258 
v L "num" 2 534 "int16" `259 
f B "memcpy" 2 534 "void(*int8 destination,*int8 source,int16 num)" `256  "String Prototypes:"
f N "toupper" 2 537 ""
v L "cvalue" 2 537 "int8" `261 
f B "toupper" 2 537 "int8(int8 cvalue)" `260 
f N "tolower" 2 538 ""
v L "cvalue" 2 538 "int8" `263 
f B "tolower" 2 538 "int8(int8 cvalue)" `262 
f N "sprintf" 2 539 ""
v L "string" 2 539 "*int8" `265 
v L "cstring" 2 539 "*int8" `266 
f B "sprintf" 2 539 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `264  "Data Manipulators Prototypes:"
f N "shift_left" 2 542 ""
v L "address" 2 542 "*int8" `269 
v L "bytes" 2 542 "int8" `270 
v L "value" 2 542 "int8" `271 
f B "shift_left" 2 542 "int8(*int8 address,int8 bytes,int8 value)" `268 
f N "shift_right" 2 543 ""
v L "address" 2 543 "*int8" `273 
v L "bytes" 2 543 "int8" `274 
v L "value" 2 543 "int8" `275 
f B "shift_right" 2 543 "int8(*int8 address,int8 bytes,int8 value)" `272 
f N "rotate_left" 2 544 ""
v L "address" 2 544 "*int8" `277 
v L "bytes" 2 544 "int8" `278 
f B "rotate_left" 2 544 "void(*int8 address,int8 bytes)" `276 
f N "rotate_right" 2 545 ""
v L "address" 2 545 "*int8" `280 
v L "bytes" 2 545 "int8" `281 
f B "rotate_right" 2 545 "void(*int8 address,int8 bytes)" `279 
f N "swap" 2 546 ""
v L "value" 2 546 "int8" `283 
f B "swap" 2 546 "void(int8 value)" `282 
f N "make8" 2 547 ""
v L "var" 2 547 "int16" `285 
v L "offset" 2 547 "int8" `286 
f B "make8" 2 547 "int8(int16 var,int8 offset)" `284 
f N "make8" 2 548 ""
v L "var" 2 548 "int32" `288 
v L "offset" 2 548 "int8" `289 
f B "make8" 2 548 "int8(int32 var,int8 offset)" `287 
f N "make16" 2 549 ""
v L "varhigh" 2 549 "int8" `291 
v L "varlow" 2 549 "int8" `292 
f B "make16" 2 549 "int16(int8 varhigh,int8 varlow)" `290 
f N "make32" 2 550 ""
v L "var1" 2 550 "int16" `294 
f B "make32" 2 550 "int32(int16 var1)" `293 
f N "make32" 2 551 ""
v L "var1" 2 551 "int16" `296 
v L "var2" 2 551 "int16" `297 
f B "make32" 2 551 "int32(int16 var1,int16 var2)" `295 
f N "make32" 2 552 ""
v L "var1" 2 552 "int16" `299 
v L "var2" 2 552 "int8" `300 
f B "make32" 2 552 "int32(int16 var1,int8 var2)" `298 
f N "make32" 2 553 ""
v L "var1" 2 553 "int16" `302 
v L "var2" 2 553 "int8" `303 
v L "var3" 2 553 "int8" `304 
f B "make32" 2 553 "int32(int16 var1,int8 var2,int8 var3)" `301 
f N "make32" 2 554 ""
v L "var1" 2 554 "int8" `306 
f B "make32" 2 554 "int32(int8 var1)" `305 
f N "make32" 2 555 ""
v L "var1" 2 555 "int8" `308 
v L "var2" 2 555 "int8" `309 
f B "make32" 2 555 "int32(int8 var1,int8 var2)" `307 
f N "make32" 2 556 ""
v L "var1" 2 556 "int8" `311 
v L "var2" 2 556 "int8" `312 
v L "var3" 2 556 "int8" `313 
f B "make32" 2 556 "int32(int8 var1,int8 var2,int8 var3)" `310 
f N "make32" 2 557 ""
v L "var1" 2 557 "int8" `315 
v L "var2" 2 557 "int8" `316 
v L "var3" 2 557 "int8" `317 
v L "var4" 2 557 "int8" `318 
f B "make32" 2 557 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `314 
f N "make32" 2 558 ""
v L "var1" 2 558 "int8" `320 
v L "var2" 2 558 "int16" `321 
f B "make32" 2 558 "int32(int8 var1,int16 var2)" `319 
f N "make32" 2 559 ""
v L "var1" 2 559 "int8" `323 
v L "var2" 2 559 "int16" `324 
v L "var3" 2 559 "int8" `325 
f B "make32" 2 559 "int32(int8 var1,int16 var2,int8 var3)" `322 
f N "make32" 2 560 ""
v L "var1" 2 560 "int8" `327 
v L "var2" 2 560 "int8" `328 
v L "var3" 2 560 "int16" `329 
f B "make32" 2 560 "int32(int8 var1,int8 var2,int16 var3)" `326 
f N "bit_set" 2 561 ""
v L "var" 2 561 "int8" `331 
v L "bit" 2 561 "int8" `332 
f B "bit_set" 2 561 "void(int8 var,int8 bit)" `330 
f N "bit_set" 2 562 ""
v L "var" 2 562 "int16" `334 
v L "bit" 2 562 "int8" `335 
f B "bit_set" 2 562 "void(int16 var,int8 bit)" `333 
f N "bit_set" 2 563 ""
v L "var" 2 563 "int32" `337 
v L "bit" 2 563 "int8" `338 
f B "bit_set" 2 563 "void(int32 var,int8 bit)" `336 
f N "bit_clear" 2 564 ""
v L "var" 2 564 "int8" `340 
v L "bit" 2 564 "int8" `341 
f B "bit_clear" 2 564 "void(int8 var,int8 bit)" `339 
f N "bit_clear" 2 565 ""
v L "var" 2 565 "int16" `343 
v L "bit" 2 565 "int8" `344 
f B "bit_clear" 2 565 "void(int16 var,int8 bit)" `342 
f N "bit_clear" 2 566 ""
v L "var" 2 566 "int32" `346 
v L "bit" 2 566 "int8" `347 
f B "bit_clear" 2 566 "void(int32 var,int8 bit)" `345 
f N "bit_test" 2 567 ""
v L "var" 2 567 "int8" `349 
v L "bit" 2 567 "int8" `350 
f B "bit_test" 2 567 "int8(int8 var,int8 bit)" `348 
f N "bit_test" 2 568 ""
v L "var" 2 568 "int16" `352 
v L "bit" 2 568 "int8" `353 
f B "bit_test" 2 568 "int8(int16 var,int8 bit)" `351 
f N "bit_test" 2 569 ""
v L "var" 2 569 "int32" `355 
v L "bit" 2 569 "int8" `356 
f B "bit_test" 2 569 "int8(int32 var,int8 bit)" `354  "#use delay() Prototypes:"
f N "delay_cycles" 2 572 ""
v L "count" 2 572 "int8" `358 
f B "delay_cycles" 2 572 "void(int8 count)" `357 
f N "delay_ms" 2 573 ""
v L "time" 2 573 "int16" `360 
f B "delay_ms" 2 573 "void(int16 time)" `359 
f N "delay_us" 2 574 ""
v L "time" 2 574 "int16" `362 
f B "delay_us" 2 574 "void(int16 time)" `361  "#use rs232() Prototypes:"
f N "putchar" 2 577 ""
v L "cdata" 2 577 "int8" `364 
f B "putchar" 2 577 "void(int8 cdata)" `363 
f N "putchar" 2 578 ""
v L "cdata" 2 578 "int8" `366 
v L "stream" 2 578 "int8" `367 
f B "putchar" 2 578 "void(int8 cdata,int8 stream)" `365 
f N "puts" 2 579 ""
v L "string" 2 579 "*int8" `369 
f B "puts" 2 579 "void(*int8 string)" `368 
f N "puts" 2 580 ""
v L "string" 2 580 "*int8" `371 
v L "stream" 2 580 "int8" `372 
f B "puts" 2 580 "void(*int8 string,int8 stream)" `370 
f N "getch" 2 581 ""
f B "getch" 2 581 "int8()" `373 
f N "getch" 2 582 ""
v L "stream" 2 582 "int8" `375 
f B "getch" 2 582 "int8(int8 stream)" `374 
f N "gets" 2 583 ""
v L "string" 2 583 "*int8" `377 
f B "gets" 2 583 "void(*int8 string)" `376 
f N "gets" 2 584 ""
v L "string" 2 584 "*int8" `379 
v L "stream" 2 584 "int8" `380 
f B "gets" 2 584 "void(*int8 string,int8 stream)" `378 
f N "kbhit" 2 585 ""
f B "kbhit" 2 585 "int8()" `381 
f N "kbhit" 2 586 ""
v L "stream" 2 586 "int8" `383 
f B "kbhit" 2 586 "int8(int8 stream)" `382 
f N "printf" 2 587 ""
v L "string" 2 587 "*int8" `385 
f B "printf" 2 587 "void(*int8 string,*int8 _VA_LIST)" `384 
f N "fprintf" 2 588 ""
v L "stream" 2 588 "int8" `388 
v L "string" 2 588 "*int8" `389 
f B "fprintf" 2 588 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `387 
f N "putc_send" 2 589 ""
f B "putc_send" 2 589 "void()" `391 
f N "fputc_send" 2 590 ""
v L "stream" 2 590 "int8" `393 
f B "fputc_send" 2 590 "void(int8 stream)" `392 
f N "rcv_buffer_full" 2 591 ""
f B "rcv_buffer_full" 2 591 "int8()" `394 
f N "rcv_buffer_full" 2 592 ""
v L "stream" 2 592 "int8" `396 
f B "rcv_buffer_full" 2 592 "int8(int8 stream)" `395 
f N "rcv_buffer_bytes" 2 593 ""
f B "rcv_buffer_bytes" 2 593 "int16()" `397 
f N "rcv_buffer_bytes" 2 594 ""
v L "stream" 2 594 "int8" `399 
f B "rcv_buffer_bytes" 2 594 "int16(int8 stream)" `398 
f N "tx_buffer_full" 2 595 ""
f B "tx_buffer_full" 2 595 "int8()" `400 
f N "tx_buffer_full" 2 596 ""
v L "stream" 2 596 "int8" `402 
f B "tx_buffer_full" 2 596 "int8(int8 stream)" `401 
f N "tx_buffer_bytes" 2 597 ""
f B "tx_buffer_bytes" 2 597 "int16()" `403 
f N "tx_buffer_bytes" 2 598 ""
v L "stream" 2 598 "int8" `405 
f B "tx_buffer_bytes" 2 598 "int16(int8 stream)" `404  "#use i2c() Prototypes:"
f N "i2c_read" 2 601 ""
f B "i2c_read" 2 601 "int8()" `406 
f N "i2c_read" 2 602 ""
v L "ack" 2 602 "int8" `408 
f B "i2c_read" 2 602 "int8(int8 ack)" `407 
f N "i2c_read" 2 603 ""
v L "stream" 2 603 "int8" `410 
v L "ack" 2 603 "int8" `411 
f B "i2c_read" 2 603 "int8(int8 stream,int8 ack)" `409 
f N "i2c_write" 2 604 ""
v L "data" 2 604 "int8" `413 
f B "i2c_write" 2 604 "int8(int8 data)" `412 
f N "i2c_write" 2 605 ""
v L "stream" 2 605 "int8" `415 
v L "data" 2 605 "int8" `416 
f B "i2c_write" 2 605 "int8(int8 stream,int8 data)" `414 
f N "i2c_start" 2 606 ""
f B "i2c_start" 2 606 "void()" `417 
f N "i2c_start" 2 607 ""
v L "stream" 2 607 "int8" `419 
f B "i2c_start" 2 607 "void(int8 stream)" `418 
f N "i2c_start" 2 608 ""
v L "stream" 2 608 "int8" `421 
v L "restart" 2 608 "int8" `422 
f B "i2c_start" 2 608 "void(int8 stream,int8 restart)" `420 
f N "i2c_stop" 2 609 ""
f B "i2c_stop" 2 609 "void()" `423 
f N "i2c_stop" 2 610 ""
v L "stream" 2 610 "int8" `425 
f B "i2c_stop" 2 610 "void(int8 stream)" `424 
f N "i2c_isr_state" 2 611 ""
f B "i2c_isr_state" 2 611 "int8()" `426 
f N "i2c_slaveaddr" 2 612 ""
v L "addr" 2 612 "int8" `428 
f B "i2c_slaveaddr" 2 612 "void(int8 addr)" `427 
f N "i2c_slaveaddr" 2 613 ""
v L "stream" 2 613 "int8" `430 
v L "addr" 2 613 "int8" `431 
f B "i2c_slaveaddr" 2 613 "void(int8 stream,int8 addr)" `429 
f N "i2c_poll" 2 614 ""
f B "i2c_poll" 2 614 "int8()" `432 
f N "i2c_poll" 2 615 ""
v L "stream" 2 615 "int8" `434 
f B "i2c_poll" 2 615 "int8(int8 stream)" `433 
f N "i2c_init" 2 616 ""
v L "baud" 2 616 "int32" `436 
f B "i2c_init" 2 616 "void(int32 baud)" `435 
f N "i2c_init" 2 617 ""
v L "stream" 2 617 "int8" `438 
v L "baud" 2 617 "int32" `439 
f B "i2c_init" 2 617 "void(int8 stream,int32 baud)" `437  "#use spi() Prototypes:"
f N "spi_xfer" 2 620 ""
f B "spi_xfer" 2 620 "int8()" `440 
f N "spi_xfer" 2 621 ""
f G "spi_xfer" 2 621 "int16(int8 data)" `441 
f N "spi_xfer" 2 622 ""
f G "spi_xfer" 2 622 "int32(int8 data)" `441 
f N "spi_xfer" 2 623 ""
v L "data" 2 623 "int8" `442 
f B "spi_xfer" 2 623 "int8(int8 data)" `441 
f N "spi_xfer" 2 624 ""
v L "data" 2 624 "int16" `444 
f B "spi_xfer" 2 624 "int16(int16 data)" `443 
f N "spi_xfer" 2 625 ""
v L "data" 2 625 "int32" `446 
f B "spi_xfer" 2 625 "int32(int32 data)" `445 
f N "spi_xfer" 2 626 ""
v L "stream" 2 626 "int8" `448 
v L "data" 2 626 "int8" `449 
f B "spi_xfer" 2 626 "int8(int8 stream,int8 data)" `447 
f N "spi_xfer" 2 627 ""
v L "stream" 2 627 "int8" `451 
v L "data" 2 627 "int16" `452 
f B "spi_xfer" 2 627 "int16(int8 stream,int16 data)" `450 
f N "spi_xfer" 2 628 ""
v L "stream" 2 628 "int8" `454 
v L "data" 2 628 "int32" `455 
f B "spi_xfer" 2 628 "int32(int8 stream,int32 data)" `453 
f N "spi_xfer" 2 629 ""
v L "stream" 2 629 "int8" `457 
v L "data" 2 629 "int8" `458 
v L "bits" 2 629 "int8" `459 
f B "spi_xfer" 2 629 "int8(int8 stream,int8 data,int8 bits)" `456 
f N "spi_xfer" 2 630 ""
v L "stream" 2 630 "int8" `461 
v L "data" 2 630 "int16" `462 
v L "bits" 2 630 "int8" `463 
f B "spi_xfer" 2 630 "int16(int8 stream,int16 data,int8 bits)" `460 
f N "spi_xfer" 2 631 ""
v L "stream" 2 631 "int8" `465 
v L "data" 2 631 "int32" `466 
v L "bits" 2 631 "int8" `467 
f B "spi_xfer" 2 631 "int32(int8 stream,int32 data,int8 bits)" `464 
f N "spi_init" 2 632 ""
v L "baud" 2 632 "int32" `469 
f B "spi_init" 2 632 "void(int32 baud)" `468 
f N "spi_init" 2 633 ""
v L "stream" 2 633 "int8" `471 
v L "baud" 2 633 "int32" `472 
f B "spi_init" 2 633 "void(int8 stream,int32 baud)" `470 
f N "spi_speed" 2 634 ""
v L "baud" 2 634 "int32" `474 
f B "spi_speed" 2 634 "void(int32 baud)" `473 
f N "spi_speed" 2 635 ""
v L "stream" 2 635 "int8" `476 
v L "baud" 2 635 "int32" `477 
f B "spi_speed" 2 635 "void(int8 stream,int32 baud)" `475 
f N "spi_speed" 2 636 ""
v L "stream" 2 636 "int8" `479 
v L "baud" 2 636 "int32" `480 
v L "clock" 2 636 "int32" `481 
f B "spi_speed" 2 636 "void(int8 stream,int32 baud,int32 clock)" `478 
f N "spi_prewrite" 2 637 ""
v L "data" 2 637 "int8" `483 
f B "spi_prewrite" 2 637 "void(int8 data)" `482 
f N "spi_prewrite" 2 638 ""
v L "data" 2 638 "int16" `485 
f B "spi_prewrite" 2 638 "void(int16 data)" `484 
f N "spi_prewrite" 2 639 ""
v L "data" 2 639 "int32" `487 
f B "spi_prewrite" 2 639 "void(int32 data)" `486 
f N "spi_prewrite" 2 640 ""
v L "??65535" 2 640 "int8" `489 
v L "data" 2 640 "int8" `490 
f B "spi_prewrite" 2 640 "void(int8 ,int8 data)" `488 
f N "spi_prewrite" 2 641 ""
v L "??65535" 2 641 "int8" `492 
v L "data" 2 641 "int16" `493 
f B "spi_prewrite" 2 641 "void(int8 ,int16 data)" `491 
f N "spi_prewrite" 2 642 ""
v L "??65535" 2 642 "int8" `495 
v L "data" 2 642 "int32" `496 
f B "spi_prewrite" 2 642 "void(int8 ,int32 data)" `494 
f N "spi_xfer_in" 2 643 ""
f B "spi_xfer_in" 2 643 "int8()" `497 
f N "spi_xfer_in" 2 644 ""
f G "spi_xfer_in" 2 644 "int16(int8 bits)" `498 
f N "spi_xfer_in" 2 645 ""
f G "spi_xfer_in" 2 645 "int32(int8 bits)" `498 
f N "spi_xfer_in" 2 646 ""
v L "bits" 2 646 "int8" `499 
f B "spi_xfer_in" 2 646 "int8(int8 bits)" `498 
f N "spi_xfer_in" 2 647 ""
v L "bits" 2 647 "int8" `501 
f G "spi_xfer_in" 2 647 "int16(int8 bits,int8 bits)" `500 
f N "spi_xfer_in" 2 648 ""
v L "bits" 2 648 "int8" `501 
f G "spi_xfer_in" 2 648 "int32(int8 bits,int8 bits)" `500 
f N "spi_xfer_in" 2 649 ""
v L "stream" 2 649 "int8" `501 
v L "bits" 2 649 "int8" `502 
f B "spi_xfer_in" 2 649 "int8(int8 stream,int8 bits)" `500 
f N "spi_xfer_in" 2 650 ""
v L "stream" 2 650 "int8" `501 
v L "bits" 2 650 "int8" `505 
f G "spi_xfer_in" 2 650 "int16(int8 stream,int8 bits,int8 task)" `503 
f N "spi_xfer_in" 2 651 ""
v L "stream" 2 651 "int8" `501 
v L "bits" 2 651 "int8" `505 
f G "spi_xfer_in" 2 651 "int32(int8 stream,int8 bits,int8 task)" `503  "#use rtos() Prototypes:"
f N "rtos_run" 2 654 ""
f B "rtos_run" 2 654 "void(int8 stream,int8 bits,int8 task)" `503 
f N "rtos_yield" 2 655 ""
f B "rtos_yield" 2 655 "void(int8 bits,int8 task)" `504 
f N "rtos_enable" 2 656 ""
v L "task" 2 656 "int8" `506 
f B "rtos_enable" 2 656 "void(int8 task)" `505 
f N "rtos_disable" 2 657 ""
v L "task" 2 657 "int8" `508 
f B "rtos_disable" 2 657 "void(int8 task)" `507 
f N "rtos_terminate" 2 658 ""
f B "rtos_terminate" 2 658 "void()" `509 
f N "rtos_await" 2 659 ""
v L "flag" 2 659 "int8" `511 
f B "rtos_await" 2 659 "void(int8 flag)" `510 
f N "rtos_wait" 2 660 ""
v L "sem" 2 660 "int8" `513 
f B "rtos_wait" 2 660 "void(int8 sem)" `512 
f N "rtos_signal" 2 661 ""
v L "sem" 2 661 "int8" `515 
f B "rtos_signal" 2 661 "void(int8 sem)" `514 
f N "rtos_msg_send" 2 662 ""
v L "task" 2 662 "int8" `517 
v L "msg" 2 662 "int8" `518 
f B "rtos_msg_send" 2 662 "void(int8 task,int8 msg)" `516 
f N "rtos_msg_read" 2 663 ""
f B "rtos_msg_read" 2 663 "int8()" `519 
f N "rtos_msg_poll" 2 664 ""
f B "rtos_msg_poll" 2 664 "int8()" `520 
f N "rtos_overrun" 2 665 ""
v L "task" 2 665 "int8" `522 
f B "rtos_overrun" 2 665 "int8(int8 task)" `521 
f N "rtos_stats" 2 666 ""
v L "task" 2 666 "int8" `524 
v L "stat" 2 666 "*int8" `525 
f B "rtos_stats" 2 666 "void(int8 task,*int8 stat)" `523  "#use timer() Prototypes:"
f N "get_ticks" 2 669 ""
f B "get_ticks" 2 669 "int8()" `526 
f N "get_ticks" 2 670 ""
f G "get_ticks" 2 670 "int16(int8 stream)" `527 
f N "get_ticks" 2 671 ""
f G "get_ticks" 2 671 "int32(int8 stream)" `527 
f N "get_ticks" 2 672 ""
v L "stream" 2 672 "int8" `528 
f B "get_ticks" 2 672 "int8(int8 stream)" `527 
f N "get_ticks" 2 673 ""
v L "stream" 2 673 "int8" `530 
f G "get_ticks" 2 673 "int16(int8 stream)" `529 
f N "get_ticks" 2 674 ""
v L "stream" 2 674 "int8" `530 
f G "get_ticks" 2 674 "int32(int8 stream)" `529 
f N "set_ticks" 2 675 ""
v L "value" 2 675 "int8" `530 
f B "set_ticks" 2 675 "void(int8 value)" `529 
f N "set_ticks" 2 676 ""
v L "value" 2 676 "int16" `532 
f B "set_ticks" 2 676 "void(int16 value)" `531 
f N "set_ticks" 2 677 ""
v L "value" 2 677 "int32" `534 
f B "set_ticks" 2 677 "void(int32 value)" `533 
f N "set_ticks" 2 678 ""
v L "stream" 2 678 "int8" `536 
v L "value" 2 678 "int8" `537 
f B "set_ticks" 2 678 "void(int8 stream,int8 value)" `535 
f N "set_ticks" 2 679 ""
v L "stream" 2 679 "int8" `539 
v L "value" 2 679 "int16" `540 
f B "set_ticks" 2 679 "void(int8 stream,int16 value)" `538 
f N "set_ticks" 2 680 ""
v L "stream" 2 680 "int8" `542 
v L "value" 2 680 "int32" `543 
f B "set_ticks" 2 680 "void(int8 stream,int32 value)" `541  "#use pwm() Prototypes:"
f N "pwm_on" 2 683 ""
f B "pwm_on" 2 683 "void()" `544 
f N "pwm_on" 2 684 ""
v L "stream" 2 684 "int8" `546 
f B "pwm_on" 2 684 "void(int8 stream)" `545 
f N "pwm_off" 2 685 ""
f B "pwm_off" 2 685 "void()" `547 
f N "pwm_off" 2 686 ""
v L "stream" 2 686 "int8" `549 
f B "pwm_off" 2 686 "void(int8 stream)" `548 
f N "pwm_set_duty" 2 687 ""
v L "duty" 2 687 "int16" `551 
f B "pwm_set_duty" 2 687 "void(int16 duty)" `550 
f N "pwm_set_duty" 2 688 ""
v L "stream" 2 688 "int8" `553 
v L "duty" 2 688 "int16" `554 
f B "pwm_set_duty" 2 688 "void(int8 stream,int16 duty)" `552 
f N "pwm_set_duty_percent" 2 689 ""
v L "percent" 2 689 "int16" `556 
f B "pwm_set_duty_percent" 2 689 "void(int16 percent)" `555 
f N "pwm_set_duty_percent" 2 690 ""
v L "stream" 2 690 "int8" `558 
v L "percent" 2 690 "int16" `559 
f B "pwm_set_duty_percent" 2 690 "void(int8 stream,int16 percent)" `557 
f N "pwm_set_frequency" 2 691 ""
v L "frequency" 2 691 "int32" `561 
f B "pwm_set_frequency" 2 691 "void(int32 frequency)" `560 
f N "pwm_set_frequency" 2 692 ""
v L "stream" 2 692 "int8" `563 
v L "frequency" 2 692 "int32" `564 
f B "pwm_set_frequency" 2 692 "void(int8 stream,int32 frequency)" `562  "#use capture() Prototypes:"
f N "get_capture_time" 2 695 ""
f B "get_capture_time" 2 695 "int16()" `565 
f N "get_capture_time" 2 696 ""
v L "stream" 2 696 "int8" `567 
f B "get_capture_time" 2 696 "int16(int8 stream)" `566 
f N "get_capture_event" 2 697 ""
f B "get_capture_event" 2 697 "int8()" `568 
f N "get_capture_event" 2 698 ""
v L "stream" 2 698 "int8" `570 
f B "get_capture_event" 2 698 "int8(int8 stream)" `569  "Enviroment Prototypes:"
c L "get_capture_event" 2 3 2 "FUNCTION"
f N "goto_address" 2 711 ""
v L "address" 2 711 "int16" `572 
f B "goto_address" 2 711 "void(int16 address)" `571 
f N "label_address" 2 712 ""
v L "label" 2 712 "int16" `574 
f B "label_address" 2 712 "int16(int16 label)" `573  "Program Memory Read Prototypes:"
f N "read_program_memory" 2 715 ""
v L "address" 2 715 "int16" `576 
v L "dataptr" 2 715 "*int8" `577 
v L "count" 2 715 "int16" `578 
f B "read_program_memory" 2 715 "void(int16 address,*int8 dataptr,int16 count)" `575 
f N "read_program_eeprom" 2 716 ""
v L "address" 2 716 "int16" `580 
f B "read_program_eeprom" 2 716 "int16(int16 address)" `579  "Program Memory Write Prototypes:"
f N "erase_program_eeprom" 2 719 ""
v L "address" 2 719 "int16" `582 
f B "erase_program_eeprom" 2 719 "void(int16 address)" `581 
f N "write_program_memory" 2 720 ""
v L "address" 2 720 "int16" `584 
v L "dataptr" 2 720 "*int8" `585 
v L "count" 2 720 "int16" `586 
f B "write_program_memory" 2 720 "void(int16 address,*int8 dataptr,int16 count)" `583 
f N "write_program_eeprom" 2 721 ""
v L "address" 2 721 "int16" `588 
v L "data" 2 721 "int16" `589 
f B "write_program_eeprom" 2 721 "void(int16 address,int16 data)" `587  "EEPROM Prototypes:"
d G "__EEADDRESS__" 2 728 "unsigned int8"
f N "read_eeprom" 2 731 ""
v L "address" 2 731 "int8" `591 
f B "read_eeprom" 2 731 "int8(int8 address)" `590 
f N "write_eeprom" 2 732 ""
v L "address" 2 732 "int8" `593 
v L "value" 2 732 "int8" `594 
f B "write_eeprom" 2 732 "void(int8 address,int8 value)" `592  "INT"
c L "write_eeprom" 2 3 4 "FUNCTION"
f N "enable_interrupts" 2 739 ""
v L "interrupt" 2 739 "int32" `596 
f B "enable_interrupts" 2 739 "void(int32 interrupt)" `595 
f N "disable_interrupts" 2 740 ""
v L "interrupt" 2 740 "int32" `598 
f B "disable_interrupts" 2 740 "void(int32 interrupt)" `597 
f N "clear_interrupt" 2 741 ""
v L "interrupt" 2 741 "int32" `600 
f B "clear_interrupt" 2 741 "void(int32 interrupt)" `599 
f N "interrupt_active" 2 742 ""
v L "interrupt" 2 742 "int32" `602 
f B "interrupt_active" 2 742 "int8(int32 interrupt)" `601 
f N "interrupt_enabled" 2 743 ""
v L "interrupt" 2 743 "int32" `604 
f B "interrupt_enabled" 2 743 "int8(int32 interrupt)" `603 
f N "ext_int_edge" 2 744 ""
v L "source" 2 744 "int8" `606 
v L "edge" 2 744 "int8" `607 
f B "ext_int_edge" 2 744 "void(int8 source,int8 edge)" `605 
f N "jump_to_isr" 2 745 ""
v L "address" 2 745 "int16" `609 
f B "jump_to_isr" 2 745 "void(int16 address)" `608  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 2 747 "0x40"
d G "H_TO_L" 2 748 "0"
d G "GLOBAL" 2 750 "0xF2C0"
d G "PERIPH" 2 751 "0xF240"
d G "INT_RTCC" 2 752 "0x00F220"
d G "INT_TIMER0" 2 753 "0x00F220"
d G "INT_TIMER1" 2 754 "0x009D01"
d G "INT_TIMER2" 2 755 "0x009D02"
d G "INT_TIMER3" 2 756 "0x00A002"
d G "INT_EXT_L2H" 2 757 "0x5000F210"
d G "INT_EXT_H2L" 2 758 "0x6000F210"
d G "INT_EXT" 2 759 "0x00F210"
d G "INT_EXT1_L2H" 2 760 "0x5001F008"
d G "INT_EXT1_H2L" 2 761 "0x6001F008"
d G "INT_EXT1" 2 762 "0x00F008"
d G "INT_EXT2_L2H" 2 763 "0x5002F010"
d G "INT_EXT2_H2L" 2 764 "0x6002F010"
d G "INT_EXT2" 2 765 "0x00F010"
d G "INT_RB" 2 766 "0x00FFF208"
d G "INT_AD" 2 767 "0x009D40"
d G "INT_RDA" 2 768 "0x009D20"
d G "INT_TBE" 2 769 "0x009D10"
d G "INT_SSP" 2 770 "0x009D08"
d G "INT_CCP1" 2 771 "0x009D04"
d G "INT_CCP2" 2 772 "0x00A001"
d G "INT_BUSCOL" 2 773 "0x00A008"
d G "INT_LOWVOLT" 2 774 "0x00A004"
d G "INT_COMP" 2 775 "0x00A040"
d G "INT_EEPROM" 2 776 "0x00A010"
d G "INT_OSCF" 2 777 "0x00A080"
d G "INT_USB" 2 778 "0x00A020"
C L "jump_to_isr" 1 7 1 "FUNCTION"
D G "_STDLIB" 3 13 ""
D G "RAND_MAX" 3 20 "32767" "The value of which is the maximum value"
D G "LONG_POINTERS" 3 26 "1"
T G "div_t" 3 34 "{sint8 quot,sint8 rem}" `619 
T G "ldiv_t" 3 39 "{sint16 quot,sint16 rem}" `623  "(C) Copyright 1996,2003 Custom Computer Services           ////"
D G "_STDDEF" 4 13 ""
D G "ptrdiff_t" 4 18 "unsigned int16"
D G "size_t" 4 24 "unsigned int16"
D G "wchar_t" 4 26 "char"
D G "NULL" 4 27 "0"
D G "offsetof" 4 29 "(s,f) (offsetofbit(s,f)/8)"
C L "jump_to_isr" 3 44 2 "FUNCTION"
C L "jump_to_isr" 3 47 1 "*"
C L "jump_to_isr" 3 47 1 "*"
F N "atoi" 3 51 ""
V L "s" 3 51 "*int8" `625 
f G "atoi" 3 51 "sint8(*int8 s)" `624  "Syntax: signed int32  atoi32(char * s)"
F N "atoi32" 3 59 ""
V L "s" 3 59 "*int8" `627 
f G "atoi32" 3 59 "sint32(*int8 s)" `626  "Syntax: char *  itoa(signed int32 num, int8 base, char * s)"
C L "atoi32" 3 47 2 "FUNCTION"
F N "itoa" 3 80 ""
V L "num" 3 80 "sint32" `629 
V L "base" 3 80 "int8" `630 
V L "s" 3 80 "*int8" `631 
f G "itoa" 3 80 "*int8(sint32 num,int8 base,*int8 s)" `628  "Standard template: signed int16  atol(char * s)"
C L "itoa" 3 82 1 "*"
C L "itoa" 3 82 1 "*"
F N "atol" 3 86 ""
V L "s" 3 86 "*int8" `633 
f G "atol" 3 86 "sint16(*int8 s)" `632  "Standard template: int16 strtoul(char * s,char *endptr,signed int base)"
C L "atol" 3 88 1 "*"
C L "atol" 3 88 1 "*"
C L "atol" 3 88 1 "*"
C L "atol" 3 88 1 "*"
F N "strtol" 3 94 ""
V L "s" 3 94 "*int8" `635 
V L "endptr" 3 94 "*int8" `636 
V L "base" 3 94 "sint8" `637 
f G "strtol" 3 94 "sint16(*int8 s,*int8 endptr,sint8 base)" `634  "Standard template: int16 strtoul(char * s,char *endptr,signed int base)"
C L "strtol" 3 96 1 "*"
C L "strtol" 3 96 1 "*"
C L "strtol" 3 96 1 "*"
C L "strtol" 3 96 1 "*"
F N "strtoul" 3 102 ""
V L "s" 3 102 "*int8" `639 
V L "endptr" 3 102 "*int8" `640 
V L "base" 3 102 "sint8" `641 
f G "strtoul" 3 102 "int16(*int8 s,*int8 endptr,sint8 base)" `638  "Standart template: float strtof(char * s,char *endptr)"
C L "strtoul" 3 96 2 "FUNCTION"
C L "strtoul" 3 104 1 "*"
C L "strtoul" 3 104 1 "*"
C L "strtoul" 3 104 1 "*"
F N "strtof" 3 111 ""
V L "s" 3 111 "*int8" `643 
V L "endptr" 3 111 "??0 *" `644 
f G "strtof" 3 111 "float(*int8 s,??0 * endptr)" `642  "provided for compatibility"
D G "strtof48" 3 117 "(s,e) strtof(s, e)"
D G "strtod" 3 118 "(s,e) strtof(s, e)"
C L "strtof" 3 104 1 "FUNCTION"
C L "strtof" 3 121 1 "*"
D G "atof" 3 125 "(s)   strtof(s, (char*)0)"
C L "strtof" 3 121 1 "FUNCTION"
C L "strtof" 3 144 1 "*"
C L "strtof" 3 144 1 "*"
C L "strtof" 3 144 1 "*"
F N "atoe" 3 150 ""
V L "s" 3 150 "*int8" `647 
f G "atoe" 3 150 "float(*int8 s)" `646  "Pseudo-random sequence generation functions"
C L "atoe" 3 144 1 "FUNCTION"
C L "atoe" 3 161 1 "*"
C L "atoe" 3 161 1 "*"
C L "atoe" 3 161 1 "*"
C L "atoe" 3 161 1 "*"
C L "atoe" 3 161 1 "*"
F N "rand" 3 170 ""
f G "rand" 3 170 "int16()" `648  "The srand function uses the argument as a seed for a new sequence of"
C L "rand" 3 172 1 "*"
C L "rand" 3 172 1 "*"
C L "rand" 3 172 1 "*"
C L "rand" 3 172 1 "*"
C L "rand" 3 172 1 "*"
C L "rand" 3 172 1 "*"
C L "rand" 3 172 1 "*"
C L "rand" 3 172 1 "*"
C L "rand" 3 172 1 "*"
C L "rand" 3 172 1 "*"
C L "rand" 3 172 1 "*"
C L "rand" 3 172 1 "*"
C L "rand" 3 172 1 "*"
C L "rand" 3 172 1 "*"
C L "rand" 3 172 1 "*"
F N "srand" 3 192 ""
V L "seed" 3 192 "int32" `650 
f G "srand" 3 192 "void(int32 seed)" `649  "Memory management functions"
C L "srand" 3 172 3 "FUNCTION"
F N "system" 3 206 ""
V L "string" 3 206 "*int8" `652 
f G "system" 3 206 "sint8(*int8 string)" `651  "Searching and sorting utilities"
C L "system" 3 172 1 "FUNCTION"
C L "system" 3 212 1 "*"
C L "system" 3 212 1 "*"
C L "system" 3 212 1 "*"
C L "system" 3 212 1 "*"
C L "system" 3 212 1 "*"
C L "system" 3 212 1 "*"
C L "system" 3 212 1 "*"
C L "system" 3 212 1 "*"
C L "system" 3 212 1 "*"
C L "system" 3 212 1 "*"
C L "system" 3 212 4 "*"
C L "system" 3 230 1 "*"
C L "system" 3 230 1 "*"
C L "system" 3 230 1 "*"
C L "system" 3 230 1 "*"
C L "system" 3 230 1 "*"
C L "system" 3 230 1 "*"
C L "system" 3 230 1 "*"
C L "system" 3 230 1 "*"
D G "labs" 3 250 "abs"
F N "div" 3 252 ""
V L "numer" 3 252 "sint8" `654 
V L "denom" 3 252 "sint8" `655 
f G "div" 3 252 "div_t(sint8 numer,sint8 denom)" `653 
F N "ldiv" 3 253 ""
V L "numer" 3 253 "sint16" `657 
V L "denom" 3 253 "sint16" `658 
f G "ldiv" 3 253 "ldiv_t(sint16 numer,sint16 denom)" `656  "Multibyte character functions"
C L "ldiv" 3 230 4 "FUNCTION"
C L "ldiv" 4 2 7 "FUNCTION"
D G "_STRING" 5 12 ""
C L "ldiv" 4 2 7 "FUNCTION"
D G "_CTYPE" 6 12 ""
D G "islower" 6 14 "(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz")"
D G "isupper" 6 15 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ")"
D G "isalnum" 6 16 "(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isalpha" 6 17 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isdigit" 6 18 "(x)  isamong(x,"0123456789")"
D G "isspace" 6 19 "(x)  ((x)==' ')"
D G "isxdigit" 6 20 "(x) isamong(x,"0123456789ABCDEFabcdef")"
D G "iscntrl" 6 21 "(x)  ((x)<' ')"
D G "isprint" 6 22 "(x)  ((x)>=' ')"
D G "isgraph" 6 23 "(x)  ((x)>' ')"
D G "ispunct" 6 24 "(x)  (((x)>' ')&&!isalnum(x))"
C L "ldiv" 5 19 10 "FUNCTION"
F N "memmove" 5 34 ""
V L "s1" 5 34 "*void" `660 
V L "s2" 5 34 "*void" `661 
V L "n" 5 34 "int16" `662 
F G "memmove" 5 35 "*int8(*void s1,*void s2,int16 n)" `659 
V L "sc1" 5 36 "*int8" `663 
V L "sc2" 5 37 "*int8" `664 
D G "strcopy" 5 54 "strcpy"
F N "strncpy" 5 61 ""
V L "s1" 5 61 "*int8" `666 
V L "s2" 5 61 "*int8" `667 
V L "n" 5 61 "int16" `668 
F G "strncpy" 5 62 "*int8(*int8 s1,*int8 s2,int16 n)" `665 
V L "s" 5 63 "*int8" `669 
F N "strcat" 5 78 ""
V L "s1" 5 78 "*int8" `671 
V L "s2" 5 78 "*int8" `672 
F G "strcat" 5 79 "*int8(*int8 s1,*int8 s2)" `670 
V L "s" 5 80 "*int8" `673 
F N "strncat" 5 96 ""
V L "s1" 5 96 "*int8" `675 
V L "s2" 5 96 "*int8" `676 
V L "n" 5 96 "int16" `677 
F G "strncat" 5 97 "*int8(*int8 s1,*int8 s2,int16 n)" `674 
V L "s" 5 98 "*int8" `678 
C L "memcmp" 5 19 3 "FUNCTION"
F N "memcmp" 5 120 ""
V L "s1" 5 120 "*void" `680 
V L "s2" 5 120 "*void" `681 
V L "n" 5 120 "int16" `682 
F G "memcmp" 5 121 "sint8(*void s1,*void s2,int16 n)" `679 
V L "su1" 5 122 "*int8" `683 
V L "su2" 5 122 "*int8" `684 
C L "strcmp" 5 19 2 "FUNCTION"
F N "strcmp" 5 134 ""
V L "s1" 5 134 "*int8" `686 
V L "s2" 5 134 "*int8" `687 
F G "strcmp" 5 135 "sint8(*int8 s1,*int8 s2)" `685 
C L "strcoll" 5 19 2 "FUNCTION"
F N "strcoll" 5 144 ""
V L "s1" 5 144 "*int8" `689 
V L "s2" 5 144 "*int8" `690 
F G "strcoll" 5 145 "sint8(*int8 s1,*int8 s2)" `688 
C L "strncmp" 5 19 4 "FUNCTION"
F N "strncmp" 5 157 ""
V L "s1" 5 157 "*int8" `692 
V L "s2" 5 157 "*int8" `693 
V L "n" 5 157 "int16" `694 
F G "strncmp" 5 158 "sint8(*int8 s1,*int8 s2,int16 n)" `691 
C L "strxfrm" 5 19 4 "FUNCTION"
F N "strxfrm" 5 170 ""
V L "s1" 5 170 "*int8" `696 
V L "s2" 5 170 "*int8" `697 
V L "n" 5 170 "int16" `698 
F G "strxfrm" 5 171 "int16(*int8 s1,*int8 s2,int16 n)" `695 
V L "c" 5 172 "int8" `699 
V L "n1" 5 173 "int8" `700 
C L "strxfrm" 5 19 1 "FUNCTION"
F N "memchr" 5 201 ""
V L "s" 5 201 "*void" `702 
V L "c" 5 201 "int8" `703 
V L "n" 5 201 "int16" `704 
F G "memchr" 5 202 "*int8(*void s,int8 c,int16 n)" `701 
V L "uc" 5 203 "int8" `705 
V L "su" 5 204 "*int8" `706 
F N "strchr" 5 215 ""
V L "s" 5 215 "*int8" `708 
V L "c" 5 215 "int8" `709 
F G "strchr" 5 216 "*int8(*int8 s,int8 c)" `707 
C L "strcspn" 5 19 4 "FUNCTION"
F N "strcspn" 5 227 ""
V L "s1" 5 227 "*int8" `711 
V L "s2" 5 227 "*int8" `712 
F G "strcspn" 5 228 "int8(*int8 s1,*int8 s2)" `710 
V L "sc1" 5 229 "*int8" `713 
V L "sc2" 5 229 "*int8" `714 
F N "strpbrk" 5 242 ""
V L "s1" 5 242 "*int8" `716 
V L "s2" 5 242 "*int8" `717 
F G "strpbrk" 5 243 "*int8(*int8 s1,*int8 s2)" `715 
V L "sc1" 5 244 "*int8" `718 
V L "sc2" 5 244 "*int8" `719 
F N "strrchr" 5 257 ""
V L "s" 5 257 "*int8" `721 
V L "c" 5 257 "int8" `722 
F G "strrchr" 5 258 "*int8(*int8 s,int8 c)" `720 
V L "p" 5 259 "*int8" `723 
C L "strspn" 5 19 2 "FUNCTION"
F N "strspn" 5 272 ""
V L "s1" 5 272 "*int8" `725 
V L "s2" 5 272 "*int8" `726 
F G "strspn" 5 273 "int8(*int8 s1,*int8 s2)" `724 
V L "sc1" 5 274 "*int8" `727 
V L "sc2" 5 274 "*int8" `728 
F N "strstr" 5 291 ""
V L "s1" 5 291 "*int8" `730 
V L "s2" 5 291 "*int8" `731 
F G "strstr" 5 292 "*int8(*int8 s1,*int8 s2)" `729 
V L "s" 5 293 "*int8" `732 
V L "t" 5 293 "*int8" `733 
C L "strlen" 5 19 2 "FUNCTION"
F N "strlen" 5 318 ""
V L "s" 5 318 "*int8" `735 
F G "strlen" 5 319 "int16(*int8 s)" `734 
V L "sc" 5 320 "*int8" `736 
F N "strtok" 5 341 ""
V L "s1" 5 341 "*int8" `738 
V L "s2" 5 341 "*int8" `739 
F G "strtok" 5 342 "*int8(*int8 s1,*int8 s2)" `737 
V L "beg" 5 343 "*int8" `740 
V L "end" 5 343 "*int8" `741 
V L "save" 5 344 "*int8" `742 
C L "stricmp" 5 19 6 "FUNCTION"
F N "stricmp" 5 392 ""
V L "s1" 5 392 "*int8" `744 
V L "s2" 5 392 "*int8" `745 
F G "stricmp" 5 393 "sint8(*int8 s1,*int8 s2)" `743 
F N "strlwr" 5 406 ""
V L "s" 5 406 "*int8" `749 
F G "strlwr" 5 407 "*int8(*int8 s)" `748 
V L "p" 5 408 "*int8" `750 
F N "strupr" 5 420 ""
V L "s" 5 420 "*int8" `752 
F G "strupr" 5 421 "*int8(*int8 s)" `751 
V L "p" 5 422 "*int8" `753 
F N "div" 3 275 ""
V L "numer" 3 275 "sint8" `654 
V L "denom" 3 275 "sint8" `756 
F G "div" 3 276 "div_t(sint8 numer,sint8 denom)" `653 
V L "val" 3 277 "div_t" `754 
F N "ldiv" 3 283 ""
V L "numer" 3 283 "sint16" `657 
V L "denom" 3 283 "sint16" `763 
F G "ldiv" 3 284 "ldiv_t(sint16 numer,sint16 denom)" `656 
V L "val" 3 285 "ldiv_t" `761 
F N "atoe" 3 362 ""
V L "s" 3 362 "*int8" `769 
F G "atoe" 3 363 "float(*int8 s)" `646 
V L "pow10" 3 364 "float" `768 
V L "result" 3 365 "float" `769 
V L "sign" 3 366 "int8" `770 
V L "expsign" 3 367 "int8" `771 
V L "c" 3 368 "int8" `772 
V L "ptr" 3 369 "int8" `773 
V L "i" 3 370 "int8" `774 
V L "exp" 3 371 "float" `775 
V L "expcnt" 3 372 "int8" `776 
C L "atoe" 3 398 1 "FUNCTION"
F N "atoi" 3 430 ""
V L "s" 3 430 "*int8" `789 
F G "atoi" 3 431 "sint8(*int8 s)" `624 
V L "result" 3 432 "sint8" `788 
V L "sign" 3 433 "int8" `789 
V L "base" 3 433 "int8" `790 
V L "index" 3 433 "int8" `791 
V L "c" 3 434 "int8" `792 
C L "atoi" 3 398 1 "FUNCTION"
C L "atoi" 3 398 1 "FUNCTION"
C L "atoi" 3 398 1 "FUNCTION"
C L "atoi" 3 398 1 "FUNCTION"
C L "atoi" 3 398 1 "FUNCTION"
C L "atoi" 3 398 1 "FUNCTION"
F N "atol" 3 499 ""
V L "s" 3 499 "*int8" `794 
F G "atol" 3 500 "sint16(*int8 s)" `632 
V L "result" 3 501 "sint16" `793 
V L "sign" 3 502 "int8" `794 
V L "base" 3 502 "int8" `795 
V L "index" 3 502 "int8" `796 
V L "c" 3 503 "int8" `797 
C L "atol" 3 398 1 "FUNCTION"
C L "atol" 3 398 1 "FUNCTION"
C L "atol" 3 398 1 "FUNCTION"
C L "atol" 3 398 1 "FUNCTION"
C L "mult_with10" 3 398 1 "FUNCTION"
F N "mult_with10" 3 566 ""
V L "num" 3 566 "int32" `799 
F G "mult_with10" 3 567 "sint32(int32 num)" `798 
F N "atoi32" 3 572 ""
V L "s" 3 572 "*int8" `801 
F G "atoi32" 3 573 "sint32(*int8 s)" `626 
V L "result" 3 574 "sint32" `800 
V L "sign" 3 575 "int8" `801 
V L "base" 3 575 "int8" `802 
V L "index" 3 575 "int8" `803 
V L "c" 3 576 "int8" `804 
C L "atoi32" 3 398 1 "FUNCTION"
C L "atoi32" 3 398 1 "FUNCTION"
C L "atoi32" 3 398 1 "FUNCTION"
C L "atoi32" 3 398 1 "FUNCTION"
C L "atoi32" 3 398 1 "FUNCTION"
F N "itoa" 3 771 ""
V L "num" 3 771 "sint32" `629 
V L "base" 3 771 "int8" `630 
V L "s" 3 771 "*int8" `808 
F G "itoa" 3 772 "*int8(sint32 num,int8 base,*int8 s)" `628 
V L "temp" 3 773 "int32" `805 
V L "i" 3 774 "int8" `806 
V L "sign" 3 774 "int8" `807 
V L "cnt" 3 774 "int8" `808 
V L "c" 3 775 "int8" `809 
C L "itoa" 3 398 1 "FUNCTION"
C L "itoa" 3 398 1 "FUNCTION"
C L "itoa" 3 398 1 "FUNCTION"
C L "itoa" 3 398 1 "FUNCTION"
C L "itoa" 3 398 1 "FUNCTION"
F N "strtof" 3 886 ""
V L "s" 3 886 "*int8" `643 
V L "endptr" 3 886 "??0 *" `818 
F G "strtof" 3 887 "float(*int8 s,??0 * endptr)" `642 
V L "pow10" 3 888 "float" `816 
V L "result" 3 889 "float" `817 
V L "skip" 3 890 "int1" `818 
V L "sign" 3 890 "int1" `819 
V L "point" 3 890 "int1" `820 
V L "c" 3 891 "int8" `821 
V L "ptr" 3 892 "int8" `822 
F N "strtoul" 3 1104 ""
V L "s" 3 1104 "*int8" `639 
V L "endptr" 3 1104 "*int8" `640 
V L "base" 3 1104 "sint8" `827 
F G "strtoul" 3 1105 "int16(*int8 s,*int8 endptr,sint8 base)" `638 
V L "sc" 3 1106 "*int8" `824 
V L "s1" 3 1106 "*int8" `825 
V L "sd" 3 1106 "*int8" `826 
V L "x" 3 1107 "int16" `827 
V L "sign" 3 1108 "int8" `828 
V L "digits" 3 1109 "int8[1]" `829 
C L "strtoul" 3 398 1 "FUNCTION"
C L "strtoul" 3 398 1 "FUNCTION"
C L "strtoul" 3 398 1 "FUNCTION"
F N "strtol" 3 1166 ""
V L "s" 3 1166 "*int8" `635 
V L "endptr" 3 1166 "*int8" `636 
V L "base" 3 1166 "sint8" `834 
F G "strtol" 3 1167 "sint16(*int8 s,*int8 endptr,sint8 base)" `634 
V L "sc" 3 1168 "*int8" `831 
V L "s1" 3 1168 "*int8" `832 
V L "sd" 3 1168 "*int8" `833 
V L "x" 3 1169 "sint16" `834 
V L "sign" 3 1170 "int8" `835 
V L "digits" 3 1171 "int8[1]" `836 
C L "strtol" 3 398 1 "FUNCTION"
C L "strtol" 3 398 1 "FUNCTION"
C L "strtol" 3 398 1 "FUNCTION"
F N "system" 3 1229 ""
V L "string" 3 1229 "*int8" `839 
F G "system" 3 1230 "sint8(*int8 string)" `651 
F N "mblen" 3 1234 ""
V L "s" 3 1234 "*int8" `839 
V L "n" 3 1234 "int16" `840 
F G "mblen" 3 1235 "int16(*int8 s,int16 n)" `838 
F N "mbtowc" 3 1239 ""
V L "pwc" 3 1239 "*int8" `842 
V L "s" 3 1239 "*int8" `843 
V L "n" 3 1239 "int16" `844 
F G "mbtowc" 3 1240 "int8(*int8 pwc,*int8 s,int16 n)" `841 
F N "wctomb" 3 1245 ""
V L "s" 3 1245 "*int8" `846 
V L "wchar" 3 1245 "int8" `847 
F G "wctomb" 3 1246 "int8(*int8 s,int8 wchar)" `845 
F N "mbstowcs" 3 1251 ""
V L "pwcs" 3 1251 "*int8" `849 
V L "s" 3 1251 "*int8" `850 
V L "n" 3 1251 "int16" `851 
F G "mbstowcs" 3 1252 "int16(*int8 pwcs,*int8 s,int16 n)" `848 
F N "wcstombs" 3 1257 ""
V L "s" 3 1257 "*int8" `853 
V L "pwcs" 3 1257 "*int8" `854 
V L "n" 3 1257 "int16" `855 
F G "wcstombs" 3 1258 "int16(*int8 s,*int8 pwcs,int16 n)" `852 
V G "_Randseed" 3 1267 "int32" `856 
F N "rand" 3 1269 ""
F G "rand" 3 1270 "int16()" `648 
F N "srand" 3 1275 ""
V L "seed" 3 1275 "int32" `861 
F G "srand" 3 1276 "void(int32 seed)" `649 
F N "*_Cmpfun" 3 1285 ""
V L "p1" 3 1285 "*int8" `861 
V L "p2" 3 1285 "*int8" `862 
T G "*_Cmpfun" 3 1285 "sint8(*int8 p1,*int8 p2)" `860 
F N "qsort" 3 1292 ""
V L "qdata" 3 1292 "*int8" `865 
V L "qitems" 3 1292 "int8" `866 
V L "qsize" 3 1292 "int8" `867 
V L "cmp" 3 1292 "_Cmpfun" `868 
F G "qsort" 3 1292 "void(*int8 qdata,int8 qitems,int8 qsize,_Cmpfun cmp)" `864 
V L "m" 3 1293 "int8" `869 
V L "j" 3 1293 "int8" `870 
V L "i" 3 1293 "int8" `871 
V L "l" 3 1293 "int8" `872 
V L "done" 3 1294 "int1" `873 
V L "t" 3 1295 "int8[16]" `874 
F N "bsearch" 3 1320 ""
V L "key" 3 1320 "*int8" `877 
V L "base" 3 1320 "*int8" `878 
V L "num" 3 1320 "int16" `879 
V L "width" 3 1320 "int16" `880 
V L "cmp" 3 1320 "_Cmpfun" `881 
F G "bsearch" 3 1321 "*int8(*int8 key,*int8 base,int16 num,int16 width,_Cmpfun cmp)" `876 
V L "p" 3 1322 "*int8" `882 
V L "q" 3 1322 "*int8" `883 
V L "n" 3 1323 "int16" `884 
V L "pivot" 3 1324 "int16" `885 
V L "val" 3 1325 "sint8" `886 
C L "bsearch" 3 398 1 "FUNCTION"
D G "red_led" 1 13 "PIN_C0"
D G "yellow_led" 1 14 "PIN_C1"
D G "blue_led" 1 15 "PIN_A4"
D G "green_led" 1 16 "PIN_A6"
D G "red_tran" 1 19 "PIN_A1"
D G "yellow_tran" 1 20 "PIN_A3"
D G "blue_tran" 1 21 "PIN_A5"
D G "green_tran" 1 22 "PIN_C2"
D G "defused_led" 1 25 "PIN_B4"
C L "init" 1 12 1 "FUNCTION"
F N "init" 1 28 ""
f G "init" 1 28 "void()" `890  "Gets the status of the main modules leds"
F N "get_led_status" 1 30 ""
V L "led_status" 1 30 "*int8" `892 
f G "get_led_status" 1 30 "void(*int8 led_status)" `891  "The main game loop"
F N "game" 1 32 ""
V L "series" 1 32 "*int8" `895 
f G "game" 1 32 "void(*int8 series)" `894  "Enable or dissable transistors"
F N "enable_trans" 1 34 ""
f G "enable_trans" 1 34 "void()" `897 
F N "disable_trans" 1 35 ""
f G "disable_trans" 1 35 "void()" `898  "Blinks leds to show if something is wrong"
F N "display_wrong" 1 37 ""
f G "display_wrong" 1 37 "void()" `899 
F N "display_wrong2" 1 38 ""
f G "display_wrong2" 1 38 "void()" `900  "Resets all of the leds to 0"
F N "reset_led" 1 40 ""
f G "reset_led" 1 40 "void()" `901  "Checks each button if it was pressed"
F N "check_button_press" 1 42 ""
V L "series" 1 42 "*int8" `903 
V L "turn" 1 42 "int8" `904 
V L "fail_state" 1 42 "int8" `905 
f G "check_button_press" 1 42 "void(*int8 series,int8 turn,int8 fail_state)" `902  "Blinks the sequence of the led flashes"
F N "blink_this_turn" 1 44 ""
V L "series" 1 44 "*int8" `908 
V L "turn" 1 44 "int8" `909 
f G "blink_this_turn" 1 44 "void(*int8 series,int8 turn)" `907  "Gets the main module LED status and sends it to series variable"
F N "get_led_status" 1 46 ""
V L "incoming" 1 46 "int8" `912 
f G "get_led_status" 1 46 "void(int8 incoming)" `911 
V G "data" 0 3 "int8" `913 
C L "get_led_status" 0 3 1 "FUNCTION"
V G "incoming" 0 5 "int8" `914 
V G "state" 0 5 "int8" `915  "incoming is the data from the i2c channel state is direction of data coming or going"
V G "hp" 0 7 "int8" `916 
C L "get_led_status" 0 3 1 "FUNCTION"
V G "min" 0 8 "int8" `917 
C L "get_led_status" 0 3 1 "FUNCTION"
V G "sec" 0 9 "int8" `918 
C L "get_led_status" 0 3 1 "FUNCTION"
V G "seriess" 0 10 "int8[8]" `919 
C L "get_led_status" 0 3 2 "FUNCTION"
F N "i2c_interupt" 0 14 ""
F G "i2c_interupt" 0 14 "void()" `920  "state = i2c_isr_state();"
C L "i2c_interupt" 0 3 12 "FUNCTION"
F N "MAIN" 0 40 ""
F G "MAIN" 0 40 "void()" `921  "Initializes starting pin values"
C L "MAIN" 0 3 1 "FUNCTION"
V L "series" 0 45 "int8[50]" `924 
V L "i" 0 46 "int8" `925 
C L "MAIN" 0 3 6 "FUNCTION"
C L "MAIN" 0 3 1 "FUNCTION"
C L "MAIN" 0 3 1 "FUNCTION"
C L "get_led_status" 0 3 1 "FUNCTION"
F N "get_led_status" 0 68 ""
V L "incoming" 0 68 "int8" `927 
F G "get_led_status" 0 68 "void(int8 incoming)" `911 
V L "c" 0 69 "int8" `926 
V L "k" 0 69 "int8" `927 
V L "bin" 0 70 "int8" `928 
C L "init" 0 3 1 "FUNCTION"
F N "init" 0 83 ""
F G "init" 0 83 "void()" `890  "I2C init interrupts"
C L "init" 0 3 1 "FUNCTION"
F N "get_led_status" 0 99 ""
V L "led_status" 0 99 "*int8" `930 
F G "get_led_status" 0 99 "void(*int8 led_status)" `891 
V L "i" 0 101 "int8" `929 
C L "get_led_status" 0 3 1 "FUNCTION"
C L "game" 0 3 1 "FUNCTION"
F N "game" 0 108 ""
V L "series" 0 108 "*int8" `931 
F G "game" 0 108 "void(*int8 series)" `894  "If the player pressed wrong, fail_state = 1, else 0"
V L "fail_state" 0 110 "int8" `930 
V L "turn" 0 112 "int8" `931 
C L "game" 0 3 1 "FUNCTION"
C L "game" 0 3 1 "FUNCTION"
C L "game" 0 3 1 "FUNCTION"
C L "game" 0 3 1 "FUNCTION"
F N "enable_trans" 0 132 ""
F G "enable_trans" 0 132 "void()" `897 
F N "disable_trans" 0 139 ""
F G "disable_trans" 0 139 "void()" `898 
F N "display_wrong" 0 146 ""
F G "display_wrong" 0 146 "void()" `899 
F N "display_wrong2" 0 158 ""
F G "display_wrong2" 0 158 "void()" `900 
V L "i" 0 159 "int8" `932 
F N "check_button_press" 0 173 ""
V L "series" 0 173 "*int8" `903 
V L "turn" 0 173 "int8" `904 
V L "fail_state" 0 173 "int8" `936 
F G "check_button_press" 0 173 "void(*int8 series,int8 turn,int8 fail_state)" `902 
V L "i" 0 174 "int8" `933 
C L "check_button_press" 0 3 1 "FUNCTION"
C L "check_button_press" 0 3 1 "FUNCTION"
C L "check_button_press" 0 3 1 "FUNCTION"
C L "check_button_press" 0 3 1 "FUNCTION"
C L "check_button_press" 0 3 1 "FUNCTION"
C L "check_button_press" 0 3 1 "FUNCTION"
C L "check_button_press" 0 3 1 "FUNCTION"
F N "blink_this_turn" 0 236 ""
V L "series" 0 236 "*int8" `908 
V L "turn" 0 236 "int8" `936 
F G "blink_this_turn" 0 236 "void(*int8 series,int8 turn)" `907 
V L "i" 0 237 "int8" `934 
F N "reset_led" 0 262 ""
F G "reset_led" 0 262 "void()" `901 
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 1
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 3 0
F B "read_program_memory" 3 0
F B "read_rom_memory" 3 0
F B "erase_program_eeprom" 1 0
F B "write_configuration_memory" 2 3
F B "read_configuration_memory" 2 3
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "output_e" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "input_e" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "set_tris_e" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "get_tris_e" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "input_change_e" 0 0
F B "port_b_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "set_analog_pins" 1 2
F B "get_capture" 0 1
F B "set_compare_time" 1 2
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_timer_3" 1 0
F B "set_timer3" 1 0
F B "get_timer3" 0 0
F B "setup_ccp1" 1 0
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 0
F B "set_pwm2_duty" 1 0
F B "setup_low_volt_detect" 1 0
F B "setup_oscillator" 0 2
F B "pll_locked" 0 0
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 2
F B "spi_data_is_in2" 0 0
F B "brownout_enable" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
F B "i2c_read" 0 2
F B "i2c_write" 1 2
F B "i2c_start" 0 2
F B "i2c_stop" 0 1
F B "i2c_isr_state" 0 1
F B "i2c_slaveaddr" 1 2
F B "i2c_init" 1 2
F B "i2c_poll" 0 1
